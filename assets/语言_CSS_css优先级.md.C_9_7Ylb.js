import{_ as s,c as i,o as d,a7 as e,aV as a}from"./chunks/framework.DDkSvsBP.js";const k=JSON.parse('{"title":"css优先级","description":"","frontmatter":{},"headers":[],"relativePath":"语言/CSS/css优先级.md","filePath":"语言/CSS/css优先级.md","lastUpdated":1750738239000}'),o={name:"语言/CSS/css优先级.md"};function r(l,t,n,h,c,g){return d(),i("div",null,t[0]||(t[0]=[e('<h1 id="css优先级" tabindex="-1">css优先级 <a class="header-anchor" href="#css优先级" aria-label="Permalink to “css优先级”">​</a></h1><p>important &gt; id &gt; class &gt; *</p><p><img src="'+a+`" alt="logo" data-zoomable="true" loading="lazy"></p><p>CSS优先级（Specificity）用于确定当多个规则作用于同一元素时，哪个样式将生效。其计算规则基于选择器的类型，<strong>优先级从高到低</strong>如下：</p><hr><h2 id="_1-优先级层级-由高到低" tabindex="-1"><strong>1. 优先级层级（由高到低）</strong> <a class="header-anchor" href="#_1-优先级层级-由高到低" aria-label="Permalink to “1. 优先级层级（由高到低）”">​</a></h2><table tabindex="0"><thead><tr><th>选择器类型</th><th>示例</th><th>权重值表示法 (A,B,C,D)</th></tr></thead><tbody><tr><td><strong>内联样式</strong></td><td><code>&lt;div style=&quot;...&quot;&gt;</code></td><td><code>1,0,0,0</code></td></tr><tr><td><strong>ID选择器</strong></td><td><code>#header</code></td><td><code>0,1,0,0</code></td></tr><tr><td><strong>类/伪类/属性选择器</strong></td><td><code>.class</code>, <code>:hover</code></td><td><code>0,0,1,0</code></td></tr><tr><td><strong>元素/伪元素选择器</strong></td><td><code>div</code>, <code>::before</code></td><td><code>0,0,0,1</code></td></tr><tr><td><strong>通配符/继承/子选择器</strong></td><td><code>*</code>, <code>&gt;</code></td><td><code>0,0,0,0</code></td></tr></tbody></table><hr><h2 id="_2-计算规则" tabindex="-1"><strong>2. 计算规则</strong> <a class="header-anchor" href="#_2-计算规则" aria-label="Permalink to “2. 计算规则”">​</a></h2><ul><li><p><strong>将选择器拆分为四组 <code>(A, B, C, D)</code></strong>：</p><ul><li><strong>A</strong>：内联样式（存在则为1，否则0）。</li><li><strong>B</strong>：ID选择器的数量。</li><li><strong>C</strong>：类、伪类（<code>:hover</code>）、属性选择器（<code>[type=&quot;text&quot;]</code>）的数量。</li><li><strong>D</strong>：元素选择器（<code>div</code>）、伪元素（<code>::before</code>）的数量。</li></ul></li><li><p><strong>比较方法</strong>：<br> 从左到右逐级比较（A → B → C → D），数值大的优先级更高。<br><strong>示例</strong>：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#nav</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .item</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* (0,1,2,1) → A=0, B=1, C=2, D=1 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> #sidebar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .link</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* (0,1,1,1) → A=0, B=1, C=1, D=1 */</span></span></code></pre></div><p>第一个选择器优先级更高（比较到C时，2 &gt; 1）。</p></li></ul><hr><h2 id="_3-特殊情况规则" tabindex="-1"><strong>3. 特殊情况规则</strong> <a class="header-anchor" href="#_3-特殊情况规则" aria-label="Permalink to “3. 特殊情况规则”">​</a></h2><ul><li><p><strong><code>!important</code></strong>：<br> 直接覆盖所有其他规则（<strong>慎用</strong>），但内联样式加 <code>!important</code> 的优先级最高。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !important</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 最高优先级 */</span></span></code></pre></div></li><li><p><strong>相同优先级</strong>：<br> 后定义的样式覆盖先定义的（源码顺序靠后的生效）。</p></li><li><p><strong>继承的样式</strong>：<br> 优先级最低（低于通配符 <code>*</code>）。</p></li><li><p><strong>组合选择器</strong>：<br><code>+</code>, <code>&gt;</code>, <code>~</code> 等组合符不增加优先级，仅影响选择逻辑。</p></li><li><p><strong><code>:not()</code> 伪类</strong>：<br> 自身不计入优先级，但内部的选择器参与计算。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 优先级 = (0,1,0,1)（#id 参与计算） */</span></span></code></pre></div></li></ul><hr><h2 id="_4-示例对比" tabindex="-1"><strong>4. 示例对比</strong> <a class="header-anchor" href="#_4-示例对比" aria-label="Permalink to “4. 示例对比”">​</a></h2><table tabindex="0"><thead><tr><th>选择器示例</th><th>权重值</th><th>计算逻辑</th></tr></thead><tbody><tr><td><code>style=&quot;color:red&quot;</code></td><td><code>1,0,0,0</code></td><td>内联样式</td></tr><tr><td><code>#main .list li.active</code></td><td><code>0,1,2,1</code></td><td>1个ID + 2个类 + 1个元素</td></tr><tr><td><code>ul#menu li.item</code></td><td><code>0,1,1,2</code></td><td>1个ID + 1个类 + 2个元素</td></tr><tr><td><code>a:hover</code></td><td><code>0,0,1,1</code></td><td>1个伪类 + 1个元素</td></tr><tr><td><code>div p</code></td><td><code>0,0,0,2</code></td><td>2个元素</td></tr><tr><td><code>*</code></td><td><code>0,0,0,0</code></td><td>通配符</td></tr></tbody></table><hr><h2 id="_5-优先级速记技巧" tabindex="-1"><strong>5. 优先级速记技巧</strong> <a class="header-anchor" href="#_5-优先级速记技巧" aria-label="Permalink to “5. 优先级速记技巧”">​</a></h2><ul><li><strong>ID选择器</strong> 是最高权重（除内联和<code>!important</code>）。</li><li><strong>100个类</strong> &lt; <strong>1个ID</strong>（因为比较顺序：B &gt; C）。</li><li>实际开发中避免过度嵌套，用类选择器更可控。</li></ul><blockquote><p>💡 总结：优先级计算 = <strong>内联 &gt; ID &gt; 类/伪类 &gt; 元素</strong>，比较时从左到右逐级对比。</p></blockquote>`,20)]))}const b=s(o,[["render",r]]);export{k as __pageData,b as default};
