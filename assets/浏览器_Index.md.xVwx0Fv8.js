import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.Cyk5UgWo.js";const i=JSON.parse(`{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/Index.md","filePath":"浏览器/Index.md","lastUpdated":1751812369000}`),a={name:`浏览器/Index.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<p>是的，<strong><code>index.html</code> 会被浏览器缓存</strong>，但具体行为取决于服务端的缓存策略配置。以下是详细分析和解决方案：</p><hr><h3 id="_1-为什么-index-html-会被缓存" tabindex="-1"><strong>1. 为什么 <code>index.html</code> 会被缓存？</strong> <a class="header-anchor" href="#_1-为什么-index-html-会被缓存" aria-label="Permalink to “1. 为什么 index.html 会被缓存？”">​</a></h3><ul><li><strong>默认行为</strong>：浏览器会根据服务端返回的 <code>Cache-Control</code> 或 <code>Expires</code> 等 HTTP 头部决定是否缓存 <code>index.html</code>。</li><li><strong>常见场景</strong>： <ul><li>未配置缓存策略时，浏览器可能默认缓存 <code>index.html</code>（尤其是强缓存）。</li><li>静态服务器（如 Nginx/Apache）可能对 HTML 文件设置缓存。</li></ul></li></ul><hr><h3 id="_2-如何防止-index-html-缓存" tabindex="-1"><strong>2. 如何防止 <code>index.html</code> 缓存？</strong> <a class="header-anchor" href="#_2-如何防止-index-html-缓存" aria-label="Permalink to “2. 如何防止 index.html 缓存？”">​</a></h3><h4 id="方案-1-服务端配置-http-头部-推荐" tabindex="-1"><strong>方案 1：服务端配置 HTTP 头部（推荐）</strong> <a class="header-anchor" href="#方案-1-服务端配置-http-头部-推荐" aria-label="Permalink to “方案 1：服务端配置 HTTP 头部（推荐）”">​</a></h4><p>通过服务端强制 <code>index.html</code> 不缓存或短时间缓存：</p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cache-Control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-store, no-cache, must-revalidate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Expires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Pragma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no-cache</span></span></code></pre></div><p><strong>Nginx 配置示例</strong>：</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /index.html </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache, no-store, must-revalidate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pragma </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Expires </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="方案-2-添加版本号-哈希参数" tabindex="-1"><strong>方案 2：添加版本号/哈希参数</strong> <a class="header-anchor" href="#方案-2-添加版本号-哈希参数" aria-label="Permalink to “方案 2：添加版本号/哈希参数”">​</a></h4><p>在引用 <code>index.html</code> 的 URL 中动态添加参数（如时间戳或版本号）：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;styles.css?v=1.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.js?t=20230703&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>单页应用（SPA）示例</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前端代码中动态加载资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/index.html?nocache=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="方案-3-使用-service-worker-控制缓存" tabindex="-1"><strong>方案 3：使用 Service Worker 控制缓存</strong> <a class="header-anchor" href="#方案-3-使用-service-worker-控制缓存" aria-label="Permalink to “方案 3：使用 Service Worker 控制缓存”">​</a></h4><p>在 <code>sw.js</code> 中跳过 <code>index.html</code> 的缓存：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fetch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.request.url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.request).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> caches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/fallback.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h3 id="_3-验证-index-html-是否被缓存" tabindex="-1"><strong>3. 验证 <code>index.html</code> 是否被缓存</strong> <a class="header-anchor" href="#_3-验证-index-html-是否被缓存" aria-label="Permalink to “3. 验证 index.html 是否被缓存”">​</a></h3><ul><li><strong>浏览器开发者工具</strong>： <ol><li>打开 <strong>Network</strong> 面板。</li><li>刷新页面，查看 <code>index.html</code> 的请求状态： <ul><li>如果状态为 <code>200 (from disk cache)</code>，说明被强缓存。</li><li>如果状态为 <code>304 (Not Modified)</code>，说明被协商缓存。</li></ul></li></ol></li><li><strong>命令行工具</strong>：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://yourdomain.com/index.html</span></span></code></pre></div>检查返回的 <code>Cache-Control</code> 和 <code>Expires</code> 头部。</li></ul><hr><h3 id="_4-特殊情况处理" tabindex="-1"><strong>4. 特殊情况处理</strong> <a class="header-anchor" href="#_4-特殊情况处理" aria-label="Permalink to “4. 特殊情况处理”">​</a></h3><h4 id="cdn-缓存" tabindex="-1"><strong>CDN 缓存</strong> <a class="header-anchor" href="#cdn-缓存" aria-label="Permalink to “CDN 缓存”">​</a></h4><p>如果使用 CDN（如 Cloudflare、AWS CloudFront），需额外配置：</p><ul><li>设置 <code>index.html</code> 的缓存时间为 0。</li><li>触发 CDN 缓存刷新（Purge Cache）。</li></ul><h4 id="单页应用-spa-路由问题" tabindex="-1"><strong>单页应用（SPA）路由问题</strong> <a class="header-anchor" href="#单页应用-spa-路由问题" aria-label="Permalink to “单页应用（SPA）路由问题”">​</a></h4><ul><li><strong>问题</strong>：用户直接访问子路由（如 <code>/dashboard</code>）时，可能因缓存的 <code>index.html</code> 版本过旧导致路由失败。</li><li><strong>解决</strong>：确保服务器始终返回最新的 <code>index.html</code>（配置 Nginx/Apache 的 <code>try_files</code> 或 Fallback）。</li></ul><hr><h2 id="最佳实践" tabindex="-1"><strong>最佳实践</strong> <a class="header-anchor" href="#最佳实践" aria-label="Permalink to “最佳实践”">​</a></h2><ol><li><strong>生产环境</strong>： <ul><li>对 <code>index.html</code> 设置 <code>no-cache</code> 或短缓存（如 <code>max-age=60</code>）。</li><li>对其他静态资源（JS/CSS/图片）使用 <strong>文件名哈希</strong> + 长期缓存（如 <code>max-age=31536000, immutable</code>）。</li></ul></li><li><strong>开发环境</strong>： <ul><li>禁用所有缓存（或使用 <code>vite/webpack-dev-server</code> 的热更新）。</li></ul></li><li><strong>紧急更新</strong>： <ul><li>通过版本号或 CDN 缓存刷新强制更新。</li></ul></li></ol><hr><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><ul><li><code>index.html</code> <strong>默认可能被缓存</strong>，需通过服务端配置或版本控制避免。</li><li>优先使用 <strong>HTTP 头部控制</strong> + <strong>文件名哈希</strong> 的组合方案。</li><li>对于 SPA/PWA，需结合 Service Worker 和服务器路由配置处理缓存问题。</li></ul>`,35)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};