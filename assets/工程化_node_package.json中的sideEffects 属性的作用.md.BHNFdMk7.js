import{_ as i,c as a,o as e,a7 as t}from"./chunks/framework.DDkSvsBP.js";const c=JSON.parse('{"title":"package.json中的sideEffects属性的作用","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/node/package.json中的sideEffects 属性的作用.md","filePath":"工程化/node/package.json中的sideEffects 属性的作用.md","lastUpdated":1749438066000}'),n={name:"工程化/node/package.json中的sideEffects 属性的作用.md"};function l(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="package-json中的sideeffects属性的作用" tabindex="-1">package.json中的sideEffects属性的作用 <a class="header-anchor" href="#package-json中的sideeffects属性的作用" aria-label="Permalink to “package.json中的sideEffects属性的作用”">​</a></h1><p>在 <code>package.json</code> 文件中，<code>sideEffects</code> 字段用于<strong>优化 Tree Shaking（树摇）</strong> 过程，帮助打包工具（如 Webpack、Rollup）更高效地移除未使用的代码（Dead Code Elimination）。它的核心作用是<strong>标记模块是否具有“副作用”</strong>。</p><hr><h3 id="什么是-副作用" tabindex="-1">什么是“副作用”？ <a class="header-anchor" href="#什么是-副作用" aria-label="Permalink to “什么是“副作用”？”">​</a></h3><p>在 JavaScript 中，“副作用”指的是：<strong>模块在被导入（import）时会执行一些与导出无关的操作</strong>，例如：</p><ul><li>修改全局变量（<code>window</code>、<code>document</code>）</li><li>自动初始化（如注册 Web Components）</li><li>执行 <code>polyfill</code></li><li>注入 CSS 样式</li><li>日志输出等</li></ul><p><strong>纯模块（无副作用）</strong>：仅导出内容，导入时不会执行额外操作（例如工具函数库）。</p><hr><h3 id="sideeffects-的配置方式" tabindex="-1"><code>sideEffects</code> 的配置方式 <a class="header-anchor" href="#sideeffects-的配置方式" aria-label="Permalink to “sideEffects 的配置方式”">​</a></h3><h4 id="_1-标记整个包为无副作用" tabindex="-1">1. 标记整个包为无副作用 <a class="header-anchor" href="#_1-标记整个包为无副作用" aria-label="Permalink to “1. 标记整个包为无副作用”">​</a></h4><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>含义：<strong>包内所有文件都是“纯”的</strong>，没有副作用。</li><li>打包工具会<strong>安全移除未使用的导出</strong>（即使从未被导入）。</li><li>适用于：工具库（如 Lodash、React 组件库）。</li></ul><h4 id="_2-标记部分文件有副作用" tabindex="-1">2. 标记部分文件有副作用 <a class="header-anchor" href="#_2-标记部分文件有副作用" aria-label="Permalink to “2. 标记部分文件有副作用”">​</a></h4><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;**/*.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/polyfill.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>含义：<strong>只有指定文件有副作用</strong>，其他文件都是“纯”的。</li><li>打包工具会<strong>保留这些文件的副作用代码</strong>，即使未被显式使用。</li><li>适用于：包含 CSS 文件、polyfill 或初始化脚本的项目。</li></ul><hr><h3 id="为什么需要-sideeffects" tabindex="-1">为什么需要 <code>sideEffects</code>？ <a class="header-anchor" href="#为什么需要-sideeffects" aria-label="Permalink to “为什么需要 sideEffects？”">​</a></h3><h4 id="场景示例" tabindex="-1">场景示例 <a class="header-anchor" href="#场景示例" aria-label="Permalink to “场景示例”">​</a></h4><p>假设你的库有一个 CSS 文件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/styles.css</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./styles.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/utils.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span></code></pre></div><p>如果用户只导入了 <code>utils.js</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { add } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;your-lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未导入 CSS</span></span></code></pre></div><p>若未配置 <code>sideEffects</code>：</p><ul><li>打包工具可能认为 <code>styles.css</code> 未被使用，将其移除 → <strong>样式丢失</strong>！</li></ul><h4 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to “解决方案”">​</a></h4><p>在 <code>package.json</code> 中标记 CSS 为副作用：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/*.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时打包工具会保留 <code>styles.css</code>，即使它未被显式导入。</p><hr><h3 id="关键注意事项" tabindex="-1">关键注意事项 <a class="header-anchor" href="#关键注意事项" aria-label="Permalink to “关键注意事项”">​</a></h3><ol><li><p><strong>对 CSS/Less/Sass 文件必须标记</strong><br> 这些文件通常通过副作用生效（如 <code>import &#39;style.css&#39;</code>），需显式声明。</p></li><li><p><strong>纯 ES 模块库建议设为 <code>false</code></strong><br> 工具库（如 Lodash-es）可声明 <code>&quot;sideEffects&quot;: false</code>，确保 Tree Shaking 生效。</p></li><li><p><strong>CommonJS 模块通常无效</strong><br> Tree Shaking 主要针对 ES 模块（ESM），CommonJS 模块无法被优化。</p></li><li><p><strong>Webpack 4+ 和 Rollup 支持</strong><br> 主流打包工具均依赖此字段优化。</p></li></ol><hr><h3 id="示例配置" tabindex="-1">示例配置 <a class="header-anchor" href="#示例配置" aria-label="Permalink to “示例配置”">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sideEffects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;**/*.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;**/*.scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;./src/init.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始化全局逻辑的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/index.esm.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ESM 入口</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/index.cjs.js&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // CommonJS 入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>推荐配置</th><th>效果</th></tr></thead><tbody><tr><td>纯工具库（无副作用文件）</td><td><code>&quot;sideEffects&quot;: false</code></td><td>最大化 Tree Shaking，移除所有未使用代码。</td></tr><tr><td>包含 CSS/初始化脚本的库</td><td><code>&quot;sideEffects&quot;: [文件列表]</code></td><td>保留副作用文件（如 CSS），同时优化其他代码。</td></tr><tr><td>未明确声明</td><td>（不设置）</td><td>打包工具保守处理，可能保留未使用的副作用代码，导致产物体积增大。</td></tr></tbody></table><p>通过合理配置 <code>sideEffects</code>，能显著提升 Tree Shaking 效率，减小最终打包体积！</p>`,38)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
