import{_ as d,c as e,o,a6 as l}from"./chunks/framework.mq8cK8gF.js";const g=JSON.parse('{"title":"java常用方法","description":"","frontmatter":{},"headers":[],"relativePath":"后端/Java常用方法.md","filePath":"后端/Java常用方法.md","lastUpdated":1750039219000}'),c={name:"后端/Java常用方法.md"};function a(n,t,r,i,s,x){return o(),e("div",null,t[0]||(t[0]=[l('<h1 id="java常用方法" tabindex="-1">java常用方法 <a class="header-anchor" href="#java常用方法" aria-label="Permalink to “java常用方法”">​</a></h1><h2 id="math工具类" tabindex="-1">Math工具类 <a class="header-anchor" href="#math工具类" aria-label="Permalink to “Math工具类”">​</a></h2><table tabindex="0"><thead><tr><th>函数</th><th>参数类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>abs(x)</code></td><td>所有标量/向量</td><td>绝对值</td><td><code>abs(-2.5) = 2.5</code></td></tr><tr><td><code>sign(x)</code></td><td>所有标量/向量</td><td>符号函数，返回 <code>1</code> 或 <code>-1</code></td><td><code>sign(5) = 1, sign(-3) = -1</code></td></tr><tr><td><code>floor(x)</code></td><td>所有标量/向量</td><td>向下取整</td><td><code>floor(3.7) = 3</code></td></tr><tr><td><code>ceil(x)</code></td><td>所有标量/向量</td><td>向上取整</td><td><code>ceil(3.1) = 4</code></td></tr><tr><td><code>round(x)</code></td><td>所有标量/向量</td><td>四舍五入</td><td><code>round(3.5) = 4</code></td></tr><tr><td><code>trunc(x)</code></td><td>所有标量/向量</td><td>截断小数部分，返回整数部分</td><td><code>trunc(3.7) = 3</code></td></tr><tr><td><code>mod(x, y)</code></td><td>标量/向量</td><td>取模运算，返回 <code>x</code> 除以 <code>y</code> 的余数</td><td><code>mod(7, 3) = 1</code></td></tr><tr><td><code>min(x, y)</code></td><td>标量/向量</td><td>取最小值</td><td><code>min(3, 5) = 3</code></td></tr><tr><td><code>max(x, y)</code></td><td>标量/向量</td><td>取最大值</td><td><code>max(3, 5) = 5</code></td></tr><tr><td><code>clamp(x, min, max)</code></td><td>标量/向量</td><td>限制 <code>x</code> 在 <code>[min, max]</code> 范围内</td><td><code>clamp(3.5, 2, 4) = 3.5</code></td></tr><tr><td><code>mix(x, y, a)</code></td><td>标量/向量</td><td>线性插值，返回 <code>x</code> 和 <code>y</code> 的混合值</td><td><code>mix(2, 8, 0.5) = 5</code></td></tr><tr><td><code>cbrt(x)</code></td><td>所有标量/向量</td><td>立方根</td><td><code>cbrt(27) = 3</code></td></tr><tr><td><code>sqrt(x)</code></td><td>所有标量/向量</td><td>平方根</td><td><code>sqrt(4) = 2</code></td></tr><tr><td><code>hypot(x, y)</code></td><td>所有标量/向量</td><td>直角三角形的斜边长度</td><td><code>hypot(3, 4) = 5</code></td></tr><tr><td><code>exp(x)</code></td><td>所有标量/向量</td><td>指数函数，返回 <code>e^x</code></td><td><code>exp(1) = 2.71828...</code></td></tr><tr><td><code>exp2(x)</code></td><td>所有标量/向量</td><td>指数函数，返回 <code>2^x</code></td><td><code>exp2(2) = 4</code></td></tr><tr><td><code>log(x)</code></td><td>所有标量/向量</td><td>自然对数，返回 <code>ln(x)</code></td><td><code>log(e) = 1</code></td></tr><tr><td><code>log2(x)</code></td><td>所有标量/向量</td><td>以 2 为底的对数</td><td><code>log2(8) = 3</code></td></tr><tr><td><code>log10(x)</code></td><td>所有标量/向量</td><td>以 10 为底的对数</td><td><code>log10(100) = 2</code></td></tr><tr><td><code>sin(x)</code></td><td>所有标量/向量</td><td>正弦函数，返回 <code>-1</code> 到 <code>1</code> 的值</td><td><code>sin(0) = 0</code></td></tr><tr><td><code>cos(x)</code></td><td>所有标量/向量</td><td>余弦函数，返回 <code>-1</code> 到 <code>1</code> 的值</td><td><code>cos(0) = 1</code></td></tr><tr><td><code>tan(x)</code></td><td>所有标量/向量</td><td>正切函数，返回 <code>-∞</code> 到 <code>∞</code> 的值</td><td><code>tan(0) = 0</code></td></tr><tr><td><code>asin(x)</code></td><td>所有标量/向量</td><td>反正弦函数，返回 <code>-π/2</code> 到 <code>π/2</code> 的值</td><td><code>asin(0) = 0</code></td></tr><tr><td><code>acos(x)</code></td><td>所有标量/向量</td><td>反余弦函数，返回 <code>0</code> 到 <code>π</code> 的值</td><td><code>acos(1) = 0</code></td></tr><tr><td><code>atan(y, x)</code></td><td>所有标量/向量</td><td>反正切函数，返回 <code>-π</code> 到 <code>π</code> 的值</td><td><code>atan(1, 1) = π/4</code></td></tr><tr><td><code>atan2(y, x)</code></td><td>所有标量/向量</td><td>反正切函数，返回 <code>-π</code> 到 <code>π</code> 的值</td><td><code>atan2(1, 1) = π/4</code></td></tr></tbody></table><h2 id="runtime-方法" tabindex="-1">Runtime 方法 <a class="header-anchor" href="#runtime-方法" aria-label="Permalink to “Runtime 方法”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">返回值类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exit(int status)</code></td><td style="text-align:left;">void</td><td style="text-align:left;">停止虚拟机</td><td style="text-align:left;">Runtime.getRuntime().exit(0);</td></tr><tr><td style="text-align:left;"><code>availableProcessors()</code></td><td style="text-align:left;">int</td><td style="text-align:left;">获取CPU线程数</td><td style="text-align:left;">Runtime.getRuntime().availableProcessors()</td></tr><tr><td style="text-align:left;"><code>maxMemory()</code></td><td style="text-align:left;">long</td><td style="text-align:left;">JVM能从系统中获取总内存大小（单位Byte）</td><td style="text-align:left;">Runtime.getRuntime().maxMemory()</td></tr><tr><td style="text-align:left;"><code>totalMemory()</code></td><td style="text-align:left;">long</td><td style="text-align:left;">JVM已经从系统中获取总内存大小（单位Byte）</td><td style="text-align:left;">Runtime.getRuntime().totalMemory()</td></tr><tr><td style="text-align:left;"><code>freeMemory()</code></td><td style="text-align:left;">long</td><td style="text-align:left;">JVM剩余内存大小（单位Byte）</td><td style="text-align:left;">Runtime.getRuntime().freeMemory()</td></tr><tr><td style="text-align:left;"><code>exec(String command)</code></td><td style="text-align:left;">Process</td><td style="text-align:left;">运行cmd命令</td><td style="text-align:left;">Runtime.getRuntime().exec(&#39;shutdown -s -t 18000&#39;)</td></tr></tbody></table><h2 id="object类" tabindex="-1">Object类 <a class="header-anchor" href="#object类" aria-label="Permalink to “Object类”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">返回值类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>toString()</code></td><td style="text-align:left;">Object</td><td style="text-align:left;">返回字符串的表示形式</td><td style="text-align:left;">obj.toString()</td></tr><tr><td style="text-align:left;"><code>equals(Object obj)</code></td><td style="text-align:left;">boolean</td><td style="text-align:left;">比较两个对象是否相等</td><td style="text-align:left;">obj.</td></tr><tr><td style="text-align:left;"><code>clone(int a)</code></td><td style="text-align:left;">object</td><td style="text-align:left;">对象克隆</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="objects工具" tabindex="-1">Objects工具 <a class="header-anchor" href="#objects工具" aria-label="Permalink to “Objects工具”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">返回值类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>toString(Object a)</code></td><td style="text-align:left;">String</td><td style="text-align:left;">返回字符串的表示形式</td><td style="text-align:left;">Objects.toString(obj)</td></tr><tr><td style="text-align:left;"><code>equals(Object a, Object b)</code></td><td style="text-align:left;">boolean</td><td style="text-align:left;">比较两个对象是否相等</td><td style="text-align:left;">Objects.equals(obj1, obj2)</td></tr><tr><td style="text-align:left;"><code>isNull(Object a)</code></td><td style="text-align:left;">boolean</td><td style="text-align:left;">判断对象是否为空</td><td style="text-align:left;">Objects.isNull(obj)</td></tr><tr><td style="text-align:left;"><code>nonNull(Object a)</code></td><td style="text-align:left;">boolean</td><td style="text-align:left;">判断对象是否不为空</td><td style="text-align:left;">Objects.nonNull(obj)</td></tr><tr><td style="text-align:left;"><code>hash(Object... values)</code></td><td style="text-align:left;">int</td><td style="text-align:left;">计算对象的哈希值</td><td style="text-align:left;">Objects.hash(obj1, obj2)</td></tr></tbody></table>',9)]))}const f=d(c,[["render",a]]);export{g as __pageData,f as default};
