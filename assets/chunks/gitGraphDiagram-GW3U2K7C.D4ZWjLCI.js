import{H as e,N as t,O as n,a$ as r,aD as i,aG as a,aI as o,aL as s,aN as c,aO as l,aP as u,aQ as d,aR as f,aW as p,a_ as ee,b1 as m,b3 as te,bJ as ne}from"../app.DSF2ddfr.js";import"./chunk-4KMFLZZN.Bu_nnoIV.js";import"./baseUniq.BqXQhMx-.js";import"./basePickBy.C_hiHc8M.js";import"./clone.CZegHJqa.js";import"./chunk-JEIROHC2.g3nkjEDE.js";import"./chunk-BN7GFLIU.FWcZSzPf.js";import"./chunk-T44TD3VJ.BTMctIE3.js";import"./chunk-KMC2YHZD.XGbd0BGI.js";import"./chunk-WFWHJNB7.D0YhMwaO.js";import"./chunk-WFRQ32O7.CrBHQ4AJ.js";import"./chunk-XRWGC2XP.KdsN5Yqp.js";import{b as re}from"./chunk-353BL4L5.CEHNfFgC.js";import{b as ie}from"./chunk-AACKK3MU.NkY7cm0E.js";import{b as ae}from"./mermaid-parser.core.COC1fjE2.js";var h={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},oe=s.gitGraph,g=i(()=>{let t=e({...oe,...u().gitGraph});return t},`getConfig`),_=new ie(()=>{let e=g(),t=e.mainBranchName,n=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:n}]]),branches:new Map([[t,null]]),currBranch:t,direction:`LR`,seq:0,options:{}}});function v(){return t({length:7})}i(v,`getID`);function y(e,t){let n=Object.create(null);return e.reduce((e,r)=>{let i=t(r);return n[i]||(n[i]=!0,e.push(r)),e},[])}i(y,`uniqBy`);var se=i(function(e){_.records.direction=e},`setDirection`),ce=i(function(e){p.debug(`options str`,e),e=e?.trim(),e||=`{}`;try{_.records.options=JSON.parse(e)}catch(e){p.error(`error while parsing gitGraph options`,e.message)}},`setOptions`),le=i(function(){return _.records.options},`getOptions`),ue=i(function(e){let t=e.msg,n=e.id,r=e.type,i=e.tags;p.info(`commit`,t,n,r,i),p.debug(`Entering commit:`,t,n,r,i);let a=g();n=o.sanitizeText(n,a),t=o.sanitizeText(t,a),i=i?.map(e=>o.sanitizeText(e,a));let s={id:n||_.records.seq+`-`+v(),message:t,seq:_.records.seq++,type:r??h.NORMAL,tags:i??[],parents:_.records.head==null?[]:[_.records.head.id],branch:_.records.currBranch};_.records.head=s,p.info(`main branch`,a.mainBranchName),_.records.commits.has(s.id)&&p.warn(`Commit ID ${s.id} already exists`),_.records.commits.set(s.id,s),_.records.branches.set(_.records.currBranch,s.id),p.debug(`in pushCommit `+s.id)},`commit`),de=i(function(e){let t=e.name,n=e.order;if(t=o.sanitizeText(t,g()),_.records.branches.has(t))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);_.records.branches.set(t,_.records.head==null?null:_.records.head.id),_.records.branchConfig.set(t,{name:t,order:n}),b(t),p.debug(`in createBranch`)},`branch`),fe=i(e=>{let t=e.branch,n=e.id,r=e.type,i=e.tags,a=g();t=o.sanitizeText(t,a),n&&=o.sanitizeText(n,a);let s=_.records.branches.get(_.records.currBranch),c=_.records.branches.get(t),l=s?_.records.commits.get(s):void 0,u=c?_.records.commits.get(c):void 0;if(l&&u&&l.branch===t)throw Error(`Cannot merge branch '${t}' into itself.`);if(_.records.currBranch===t){let e=Error(`Incorrect usage of "merge". Cannot merge a branch to itself`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch abc`]},e}if(l===void 0||!l){let e=Error(`Incorrect usage of "merge". Current branch (${_.records.currBranch})has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`commit`]},e}if(!_.records.branches.has(t)){let e=Error(`Incorrect usage of "merge". Branch to be merged (`+t+`) does not exist`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},e}if(u===void 0||!u){let e=Error(`Incorrect usage of "merge". Branch to be merged (`+t+`) has no commits`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`"commit"`]},e}if(l===u){let e=Error(`Incorrect usage of "merge". Both branches have same head`);throw e.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch abc`]},e}if(n&&_.records.commits.has(n)){let e=Error(`Incorrect usage of "merge". Commit with id:`+n+` already exists, use different custom id`);throw e.hash={text:`merge ${t} ${n} ${r} ${i?.join(` `)}`,token:`merge ${t} ${n} ${r} ${i?.join(` `)}`,expected:[`merge ${t} ${n}_UNIQUE ${r} ${i?.join(` `)}`]},e}let d=c||``,f={id:n||`${_.records.seq}-${v()}`,message:`merged branch ${t} into ${_.records.currBranch}`,seq:_.records.seq++,parents:_.records.head==null?[]:[_.records.head.id,d],branch:_.records.currBranch,type:h.MERGE,customType:r,customId:!!n,tags:i??[]};_.records.head=f,_.records.commits.set(f.id,f),_.records.branches.set(_.records.currBranch,f.id),p.debug(_.records.branches),p.debug(`in mergeBranch`)},`merge`),pe=i(function(e){let t=e.id,n=e.targetId,r=e.tags,i=e.parent;p.debug(`Entering cherryPick:`,t,n,r);let a=g();if(t=o.sanitizeText(t,a),n=o.sanitizeText(n,a),r=r?.map(e=>o.sanitizeText(e,a)),i=o.sanitizeText(i,a),!t||!_.records.commits.has(t)){let e=Error(`Incorrect usage of "cherryPick". Source commit id should exist and provided`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let s=_.records.commits.get(t);if(s===void 0||!s)throw Error(`Incorrect usage of "cherryPick". Source commit id should exist and provided`);if(i&&!(Array.isArray(s.parents)&&s.parents.includes(i))){let e=Error(`Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.`);throw e}let c=s.branch;if(s.type===h.MERGE&&!i){let e=Error(`Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.`);throw e}if(!n||!_.records.commits.has(n)){if(c===_.records.currBranch){let e=Error(`Incorrect usage of "cherryPick". Source commit is already on current branch`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let e=_.records.branches.get(_.records.currBranch);if(e===void 0||!e){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${_.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let a=_.records.commits.get(e);if(a===void 0||!a){let e=Error(`Incorrect usage of "cherry-pick". Current branch (${_.records.currBranch})has no commits`);throw e.hash={text:`cherryPick ${t} ${n}`,token:`cherryPick ${t} ${n}`,expected:[`cherry-pick abc`]},e}let o={id:_.records.seq+`-`+v(),message:`cherry-picked ${s?.message} into ${_.records.currBranch}`,seq:_.records.seq++,parents:_.records.head==null?[]:[_.records.head.id,s.id],branch:_.records.currBranch,type:h.CHERRY_PICK,tags:r?r.filter(Boolean):[`cherry-pick:${s.id}${s.type===h.MERGE?`|parent:${i}`:``}`]};_.records.head=o,_.records.commits.set(o.id,o),_.records.branches.set(_.records.currBranch,o.id),p.debug(_.records.branches),p.debug(`in cherryPick`)}},`cherryPick`),b=i(function(e){if(e=o.sanitizeText(e,g()),_.records.branches.has(e)){_.records.currBranch=e;let t=_.records.branches.get(_.records.currBranch);t===void 0||!t?_.records.head=null:_.records.head=_.records.commits.get(t)??null}else{let t=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},`checkout`);function x(e,t,n){let r=e.indexOf(t);r===-1?e.push(n):e.splice(r,1,n)}i(x,`upsert`);function S(e){let t=e.reduce((e,t)=>e.seq>t.seq?e:t,e[0]),n=``;e.forEach(function(e){e===t?n+=`	*`:n+=`	|`});let r=[n,t.id,t.seq];for(let e in _.records.branches)_.records.branches.get(e)===t.id&&r.push(e);if(p.debug(r.join(` `)),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){let n=_.records.commits.get(t.parents[0]);x(e,t,n),t.parents[1]&&e.push(_.records.commits.get(t.parents[1]))}else if(t.parents.length==0)return;else if(t.parents[0]){let n=_.records.commits.get(t.parents[0]);x(e,t,n)}e=y(e,e=>e.id),S(e)}i(S,`prettyPrintCommitHistory`);var me=i(function(){p.debug(_.records.commits);let e=C()[0];S([e])},`prettyPrint`),he=i(function(){_.reset(),a()},`clear`),ge=i(function(){let e=[..._.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}));return e},`getBranchesAsObjArray`),_e=i(function(){return _.records.branches},`getBranches`),ve=i(function(){return _.records.commits},`getCommits`),C=i(function(){let e=[..._.records.commits.values()];return e.forEach(function(e){p.debug(e.id)}),e.sort((e,t)=>e.seq-t.seq),e},`getCommitsArray`),w=i(function(){return _.records.currBranch},`getCurrentBranch`),T=i(function(){return _.records.direction},`getDirection`),E=i(function(){return _.records.head},`getHead`),D={commitType:h,getConfig:g,setDirection:se,setOptions:ce,getOptions:le,commit:ue,branch:de,merge:fe,cherryPick:pe,checkout:b,prettyPrint:me,clear:he,getBranchesAsObjArray:ge,getBranches:_e,getCommits:ve,getCommitsArray:C,getCurrentBranch:w,getDirection:T,getHead:E,setAccTitle:r,getAccTitle:l,getAccDescription:c,setAccDescription:ee,setDiagramTitle:m,getDiagramTitle:f},O=i((e,t)=>{re(e,t),e.dir&&t.setDirection(e.dir);for(let n of e.statements)k(n,t)},`populate`),k=i((e,t)=>{let n={Commit:i(e=>t.commit(A(e)),`Commit`),Branch:i(e=>t.branch(j(e)),`Branch`),Merge:i(e=>t.merge(M(e)),`Merge`),Checkout:i(e=>t.checkout(N(e)),`Checkout`),CherryPicking:i(e=>t.cherryPick(P(e)),`CherryPicking`)},r=n[e.$type];r?r(e):p.error(`Unknown statement type: ${e.$type}`)},`parseStatement`),A=i(e=>{let t={id:e.id,msg:e.message??``,type:e.type===void 0?h.NORMAL:h[e.type],tags:e.tags??void 0};return t},`parseCommit`),j=i(e=>{let t={name:e.name,order:e.order??0};return t},`parseBranch`),M=i(e=>{let t={branch:e.branch,id:e.id??``,type:e.type===void 0?void 0:h[e.type],tags:e.tags??void 0};return t},`parseMerge`),N=i(e=>{let t=e.branch;return t},`parseCheckout`),P=i(e=>{let t={id:e.id,targetId:``,tags:e.tags?.length===0?void 0:e.tags,parent:e.parent};return t},`parseCherryPicking`),F={parse:i(async e=>{let t=await ae(`gitGraph`,e);p.debug(t),O(t,D)},`parse`)},ye=d(),I=ye?.gitGraph,L=10,R=40,z=4,B=2,V=8,H=new Map,U=new Map,W=30,G=new Map,K=[],q=0,J=`LR`,be=i(()=>{H.clear(),U.clear(),G.clear(),q=0,K=[],J=`LR`},`clear`),Y=i(e=>{let t=document.createElementNS(`http://www.w3.org/2000/svg`,`text`),n=typeof e==`string`?e.split(/\\n|\n|<br\s*\/?>/gi):e;return n.forEach(e=>{let n=document.createElementNS(`http://www.w3.org/2000/svg`,`tspan`);n.setAttributeNS(`http://www.w3.org/XML/1998/namespace`,`xml:space`,`preserve`),n.setAttribute(`dy`,`1em`),n.setAttribute(`x`,`0`),n.setAttribute(`class`,`row`),n.textContent=e.trim(),t.appendChild(n)}),t},`drawText`),X=i(e=>{let t,n,r;return J===`BT`?(n=i((e,t)=>e<=t,`comparisonFunc`),r=1/0):(n=i((e,t)=>e>=t,`comparisonFunc`),r=0),e.forEach(e=>{let i=J===`TB`||J==`BT`?U.get(e)?.y:U.get(e)?.x;i!==void 0&&n(i,r)&&(t=e,r=i)}),t},`findClosestParent`),xe=i(e=>{let t=``,n=1/0;return e.forEach(e=>{let r=U.get(e).y;r<=n&&(t=e,n=r)}),t||void 0},`findClosestParentBT`),Se=i((e,t,n)=>{let r=n,i=n,a=[];e.forEach(e=>{let n=t.get(e);if(!n)throw Error(`Commit not found for key ${e}`);n.parents.length?(r=we(n),i=Math.max(r,i)):a.push(n),Te(n,r)}),r=i,a.forEach(e=>{Ee(e,r,n)}),e.forEach(e=>{let n=t.get(e);if(n?.parents.length){let e=xe(n.parents);r=U.get(e).y-R,r<=i&&(i=r);let t=H.get(n.branch).pos,a=r-L;U.set(n.id,{x:t,y:a})}})},`setParallelBTPos`),Ce=i(e=>{let t=X(e.parents.filter(e=>e!==null));if(!t)throw Error(`Closest parent not found for commit ${e.id}`);let n=U.get(t)?.y;if(n===void 0)throw Error(`Closest parent position not found for commit ${e.id}`);return n},`findClosestParentPos`),we=i(e=>{let t=Ce(e);return t+R},`calculateCommitPosition`),Te=i((e,t)=>{let n=H.get(e.branch);if(!n)throw Error(`Branch not found for commit ${e.id}`);let r=n.pos,i=t+L;return U.set(e.id,{x:r,y:i}),{x:r,y:i}},`setCommitPosition`),Ee=i((e,t,n)=>{let r=H.get(e.branch);if(!r)throw Error(`Branch not found for commit ${e.id}`);let i=t+n,a=r.pos;U.set(e.id,{x:a,y:i})},`setRootPosition`),De=i((e,t,n,r,i,a)=>{if(a===h.HIGHLIGHT)e.append(`rect`).attr(`x`,n.x-10).attr(`y`,n.y-10).attr(`width`,20).attr(`height`,20).attr(`class`,`commit ${t.id} commit-highlight${i%V} ${r}-outer`),e.append(`rect`).attr(`x`,n.x-6).attr(`y`,n.y-6).attr(`width`,12).attr(`height`,12).attr(`class`,`commit ${t.id} commit${i%V} ${r}-inner`);else if(a===h.CHERRY_PICK)e.append(`circle`).attr(`cx`,n.x).attr(`cy`,n.y).attr(`r`,10).attr(`class`,`commit ${t.id} ${r}`),e.append(`circle`).attr(`cx`,n.x-3).attr(`cy`,n.y+2).attr(`r`,2.75).attr(`fill`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`circle`).attr(`cx`,n.x+3).attr(`cy`,n.y+2).attr(`r`,2.75).attr(`fill`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`line`).attr(`x1`,n.x+3).attr(`y1`,n.y+1).attr(`x2`,n.x).attr(`y2`,n.y-5).attr(`stroke`,`#fff`).attr(`class`,`commit ${t.id} ${r}`),e.append(`line`).attr(`x1`,n.x-3).attr(`y1`,n.y+1).attr(`x2`,n.x).attr(`y2`,n.y-5).attr(`stroke`,`#fff`).attr(`class`,`commit ${t.id} ${r}`);else{let o=e.append(`circle`);if(o.attr(`cx`,n.x),o.attr(`cy`,n.y),o.attr(`r`,t.type===h.MERGE?9:10),o.attr(`class`,`commit ${t.id} commit${i%V}`),a===h.MERGE){let a=e.append(`circle`);a.attr(`cx`,n.x),a.attr(`cy`,n.y),a.attr(`r`,6),a.attr(`class`,`commit ${r} ${t.id} commit${i%V}`)}if(a===h.REVERSE){let a=e.append(`path`);a.attr(`d`,`M ${n.x-5},${n.y-5}L${n.x+5},${n.y+5}M${n.x-5},${n.y+5}L${n.x+5},${n.y-5}`).attr(`class`,`commit ${r} ${t.id} commit${i%V}`)}}},`drawCommitBullet`),Oe=i((e,t,n,r)=>{if(t.type!==h.CHERRY_PICK&&(t.customId&&t.type===h.MERGE||t.type!==h.MERGE)&&I?.showCommitLabel){let i=e.append(`g`),a=i.insert(`rect`).attr(`class`,`commit-label-bkg`),o=i.append(`text`).attr(`x`,r).attr(`y`,n.y+25).attr(`class`,`commit-label`).text(t.id),s=o.node()?.getBBox();if(s&&(a.attr(`x`,n.posWithOffset-s.width/2-B).attr(`y`,n.y+13.5).attr(`width`,s.width+2*B).attr(`height`,s.height+2*B),J===`TB`||J===`BT`?(a.attr(`x`,n.x-(s.width+4*z+5)).attr(`y`,n.y-12),o.attr(`x`,n.x-(s.width+4*z)).attr(`y`,n.y+s.height-12)):o.attr(`x`,n.posWithOffset-s.width/2),I.rotateCommitLabel))if(J===`TB`||J===`BT`)o.attr(`transform`,`rotate(-45, `+n.x+`, `+n.y+`)`),a.attr(`transform`,`rotate(-45, `+n.x+`, `+n.y+`)`);else{let e=-7.5-(s.width+10)/25*9.5,t=10+s.width/25*8.5;i.attr(`transform`,`translate(`+e+`, `+t+`) rotate(-45, `+r+`, `+n.y+`)`)}}},`drawCommitLabel`),ke=i((e,t,n,r)=>{if(t.tags.length>0){let i=0,a=0,o=0,s=[];for(let r of t.tags.reverse()){let t=e.insert(`polygon`),c=e.append(`circle`),l=e.append(`text`).attr(`y`,n.y-16-i).attr(`class`,`tag-label`).text(r),u=l.node()?.getBBox();if(!u)throw Error(`Tag bbox not found`);a=Math.max(a,u.width),o=Math.max(o,u.height),l.attr(`x`,n.posWithOffset-u.width/2),s.push({tag:l,hole:c,rect:t,yOffset:i}),i+=20}for(let{tag:e,hole:t,rect:i,yOffset:c}of s){let s=o/2,l=n.y-19.2-c;if(i.attr(`class`,`tag-label-bkg`).attr(`points`,`
      ${r-a/2-z/2},${l+B}  
      ${r-a/2-z/2},${l-B}
      ${n.posWithOffset-a/2-z},${l-s-B}
      ${n.posWithOffset+a/2+z},${l-s-B}
      ${n.posWithOffset+a/2+z},${l+s+B}
      ${n.posWithOffset-a/2-z},${l+s+B}`),t.attr(`cy`,l).attr(`cx`,r-a/2+z/2).attr(`r`,1.5).attr(`class`,`tag-hole`),J===`TB`||J===`BT`){let o=r+c;i.attr(`class`,`tag-label-bkg`).attr(`points`,`
        ${n.x},${o+2}
        ${n.x},${o-2}
        ${n.x+L},${o-s-2}
        ${n.x+L+a+4},${o-s-2}
        ${n.x+L+a+4},${o+s+2}
        ${n.x+L},${o+s+2}`).attr(`transform`,`translate(12,12) rotate(45, `+n.x+`,`+r+`)`),t.attr(`cx`,n.x+z/2).attr(`cy`,o).attr(`transform`,`translate(12,12) rotate(45, `+n.x+`,`+r+`)`),e.attr(`x`,n.x+5).attr(`y`,o+3).attr(`transform`,`translate(14,14) rotate(45, `+n.x+`,`+r+`)`)}}}},`drawCommitTags`),Ae=i(e=>{let t=e.customType??e.type;switch(t){case h.NORMAL:return`commit-normal`;case h.REVERSE:return`commit-reverse`;case h.HIGHLIGHT:return`commit-highlight`;case h.MERGE:return`commit-merge`;case h.CHERRY_PICK:return`commit-cherry-pick`;default:return`commit-normal`}},`getCommitClassType`),je=i((e,t,n,r)=>{let i={x:0,y:0};if(e.parents.length>0){let n=X(e.parents);if(n){let a=r.get(n)??i;if(t===`TB`)return a.y+R;if(t===`BT`){let t=r.get(e.id)??i;return t.y-R}else return a.x+R}}else if(t===`TB`)return W;else if(t===`BT`){let t=r.get(e.id)??i;return t.y-R}else return 0;return 0},`calculatePosition`),Me=i((e,t,n)=>{let r=J===`BT`&&n?t:t+L,i=J===`TB`||J===`BT`?r:H.get(e.branch)?.pos,a=J===`TB`||J===`BT`?H.get(e.branch)?.pos:r;if(a===void 0||i===void 0)throw Error(`Position were undefined for commit ${e.id}`);return{x:a,y:i,posWithOffset:r}},`getCommitPosition`),Z=i((e,t,n)=>{if(!I)throw Error(`GitGraph config not found`);let r=e.append(`g`).attr(`class`,`commit-bullets`),a=e.append(`g`).attr(`class`,`commit-labels`),o=J===`TB`||J===`BT`?W:0,s=[...t.keys()],c=I?.parallelCommits??!1,l=i((e,n)=>{let r=t.get(e)?.seq,i=t.get(n)?.seq;return r!==void 0&&i!==void 0?r-i:0},`sortKeys`),u=s.sort(l);J===`BT`&&(c&&Se(u,t,o),u=u.reverse()),u.forEach(e=>{let i=t.get(e);if(!i)throw Error(`Commit not found for key ${e}`);c&&(o=je(i,J,o,U));let s=Me(i,o,c);if(n){let e=Ae(i),t=i.customType??i.type,n=H.get(i.branch)?.index??0;De(r,i,s,e,n,t),Oe(a,i,s,o),ke(a,i,s,o)}J===`TB`||J===`BT`?U.set(i.id,{x:s.x,y:s.posWithOffset}):U.set(i.id,{x:s.posWithOffset,y:s.y}),o=J===`BT`&&c?o+R:o+R+L,o>q&&(q=o)})},`drawCommits`),Ne=i((e,t,n,r,a)=>{let o=J===`TB`||J===`BT`?n.x<r.x:n.y<r.y,s=o?t.branch:e.branch,c=i(e=>e.branch===s,`isOnBranchToGetCurve`),l=i(n=>n.seq>e.seq&&n.seq<t.seq,`isBetweenCommits`);return[...a.values()].some(e=>l(e)&&c(e))},`shouldRerouteArrow`),Q=i((e,t,n=0)=>{let r=e+Math.abs(e-t)/2;if(n>5)return r;let i=K.every(e=>Math.abs(e-r)>=10);if(i)return K.push(r),r;let a=Math.abs(e-t);return Q(e,t-a/5,n+1)},`findLane`),Pe=i((e,t,n,r)=>{let i=U.get(t.id),a=U.get(n.id);if(i===void 0||a===void 0)throw Error(`Commit positions not found for commits ${t.id} and ${n.id}`);let o=Ne(t,n,i,a,r),s=``,c=``,l=0,u=0,d=H.get(n.branch)?.index;n.type===h.MERGE&&t.id!==n.parents[0]&&(d=H.get(t.branch)?.index);let f;if(o){s=`A 10 10, 0, 0, 0,`,c=`A 10 10, 0, 0, 1,`,l=10,u=10;let e=i.y<a.y?Q(i.y,a.y):Q(a.y,i.y),n=i.x<a.x?Q(i.x,a.x):Q(a.x,i.x);J===`TB`?i.x<a.x?f=`M ${i.x} ${i.y} L ${n-l} ${i.y} ${c} ${n} ${i.y+u} L ${n} ${a.y-l} ${s} ${n+u} ${a.y} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${n+l} ${i.y} ${s} ${n} ${i.y+u} L ${n} ${a.y-l} ${c} ${n-u} ${a.y} L ${a.x} ${a.y}`):J===`BT`?i.x<a.x?f=`M ${i.x} ${i.y} L ${n-l} ${i.y} ${s} ${n} ${i.y-u} L ${n} ${a.y+l} ${c} ${n+u} ${a.y} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${n+l} ${i.y} ${c} ${n} ${i.y-u} L ${n} ${a.y+l} ${s} ${n-u} ${a.y} L ${a.x} ${a.y}`):i.y<a.y?f=`M ${i.x} ${i.y} L ${i.x} ${e-l} ${s} ${i.x+u} ${e} L ${a.x-l} ${e} ${c} ${a.x} ${e+u} L ${a.x} ${a.y}`:(d=H.get(t.branch)?.index,f=`M ${i.x} ${i.y} L ${i.x} ${e+l} ${c} ${i.x+u} ${e} L ${a.x-l} ${e} ${s} ${a.x} ${e-u} L ${a.x} ${a.y}`)}else s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,J===`TB`?(i.x<a.x&&(f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${s} ${i.x+u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${c} ${a.x} ${i.y+u} L ${a.x} ${a.y}`),i.x>a.x&&(s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${c} ${i.x-u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x+l} ${i.y} ${s} ${a.x} ${i.y+u} L ${a.x} ${a.y}`),i.x===a.x&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`)):J===`BT`?(i.x<a.x&&(f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${c} ${i.x+u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`),i.x>a.x&&(s=`A 20 20, 0, 0, 0,`,c=`A 20 20, 0, 0, 1,`,l=20,u=20,f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${s} ${i.x-u} ${a.y} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`),i.x===a.x&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`)):(i.y<a.y&&(f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${c} ${a.x} ${i.y+u} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${i.x} ${a.y-l} ${s} ${i.x+u} ${a.y} L ${a.x} ${a.y}`),i.y>a.y&&(f=n.type===h.MERGE&&t.id!==n.parents[0]?`M ${i.x} ${i.y} L ${a.x-l} ${i.y} ${s} ${a.x} ${i.y-u} L ${a.x} ${a.y}`:`M ${i.x} ${i.y} L ${i.x} ${a.y+l} ${c} ${i.x+u} ${a.y} L ${a.x} ${a.y}`),i.y===a.y&&(f=`M ${i.x} ${i.y} L ${a.x} ${a.y}`));if(f===void 0)throw Error(`Line definition not found`);e.append(`path`).attr(`d`,f).attr(`class`,`arrow arrow`+d%V)},`drawArrow`),Fe=i((e,t)=>{let n=e.append(`g`).attr(`class`,`commit-arrows`);[...t.keys()].forEach(e=>{let r=t.get(e);r.parents&&r.parents.length>0&&r.parents.forEach(e=>{Pe(n,t.get(e),r,t)})})},`drawArrows`),Ie=i((e,t)=>{let n=e.append(`g`);t.forEach((e,t)=>{let r=t%V,i=H.get(e.name)?.pos;if(i===void 0)throw Error(`Position not found for branch ${e.name}`);let a=n.append(`line`);a.attr(`x1`,0),a.attr(`y1`,i),a.attr(`x2`,q),a.attr(`y2`,i),a.attr(`class`,`branch branch`+r),J===`TB`?(a.attr(`y1`,W),a.attr(`x1`,i),a.attr(`y2`,q),a.attr(`x2`,i)):J===`BT`&&(a.attr(`y1`,q),a.attr(`x1`,i),a.attr(`y2`,W),a.attr(`x2`,i)),K.push(i);let o=e.name,s=Y(o),c=n.insert(`rect`),l=n.insert(`g`).attr(`class`,`branchLabel`),u=l.insert(`g`).attr(`class`,`label branch-label`+r);u.node().appendChild(s);let d=s.getBBox();c.attr(`class`,`branchLabelBkg label`+r).attr(`rx`,4).attr(`ry`,4).attr(`x`,-d.width-4-(I?.rotateCommitLabel===!0?30:0)).attr(`y`,-d.height/2+8).attr(`width`,d.width+18).attr(`height`,d.height+4),u.attr(`transform`,`translate(`+(-d.width-14-(I?.rotateCommitLabel===!0?30:0))+`, `+(i-d.height/2-1)+`)`),J===`TB`?(c.attr(`x`,i-d.width/2-10).attr(`y`,0),u.attr(`transform`,`translate(`+(i-d.width/2-5)+`, 0)`)):J===`BT`?(c.attr(`x`,i-d.width/2-10).attr(`y`,q),u.attr(`transform`,`translate(`+(i-d.width/2-5)+`, `+q+`)`)):c.attr(`transform`,`translate(-19, `+(i-d.height/2)+`)`)})},`drawBranches`),Le=i(function(e,t,n,r,i){return H.set(e,{pos:t,index:n}),t+=50+(i?40:0)+(J===`TB`||J===`BT`?r.width/2:0),t},`setBranchPosition`),$=i(function(e,t,r,i){if(be(),p.debug(`in gitgraph renderer`,e+`
`,`id:`,t,r),!I)throw Error(`GitGraph config not found`);let a=I.rotateCommitLabel??!1,o=i.db;G=o.getCommits();let s=o.getBranchesAsObjArray();J=o.getDirection();let c=ne(`[id="${t}"]`),l=0;s.forEach((e,t)=>{let n=Y(e.name),r=c.append(`g`),i=r.insert(`g`).attr(`class`,`branchLabel`),o=i.insert(`g`).attr(`class`,`label branch-label`);o.node()?.appendChild(n);let s=n.getBBox();l=Le(e.name,l,t,s,a),o.remove(),i.remove(),r.remove()}),Z(c,G,!1),I.showBranches&&Ie(c,s),Fe(c,G),Z(c,G,!0),n.insertTitle(c,`gitTitleText`,I.titleTopMargin??0,o.getDiagramTitle()),te(void 0,c,I.diagramPadding,I.useMaxWidth)},`draw`),Re={draw:$},ze=i(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e[`gitBranchLabel`+t]}; }
        .commit${t} { stroke: ${e[`git`+t]}; fill: ${e[`git`+t]}; }
        .commit-highlight${t} { stroke: ${e[`gitInv`+t]}; fill: ${e[`gitInv`+t]}; }
        .label${t}  { fill: ${e[`git`+t]}; }
        .arrow${t} { stroke: ${e[`git`+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,`getStyles`),Be=ze,Ve={parser:F,db:D,renderer:Re,styles:Be};export{Ve as diagram};