import{_ as l,c as r,o as i,j as a,a as t}from"./chunks/framework.D-BI-jj5.js";const _=JSON.parse('{"title":"事件代理","description":"","frontmatter":{"title":"事件代理","date":"2021-03-27T23:40:43.000Z","tags":["事件"],"categories":["前端","事件"]},"headers":[],"relativePath":"浏览器/事件代理.md","filePath":"浏览器/事件代理.md","lastUpdated":1749107541000}'),d={name:"浏览器/事件代理.md"};function o(s,e,n,c,p,u){return i(),r("div",null,e[0]||(e[0]=[a("h2",{id:"什么是事件代理",tabindex:"-1"},[t("什么是事件代理 "),a("a",{class:"header-anchor",href:"#什么是事件代理","aria-label":"Permalink to “什么是事件代理”"},"​")],-1),a("p",null,"事件委托或事件代理: 耕具《js高级程序设计》一书来说就是利用事件冒泡, 指定一个事件处理程序,就可以管理某一类的所有事件.举个例子: dom需要事件处理程序,我们都会给他设置事件处理程序, but, 如果有在ul中全部100个li需要添加事件处理程序,其具有相同的点击事件,那么可以根据for来进行遍历, 也可以根据上层的ul来添加.在性能的角度来看,把ul建立事件会减少dom的交互次数,提高性能.",-1),a("h2",{id:"事件代理的原理",tabindex:"-1"},[t("事件代理的原理 "),a("a",{class:"header-anchor",href:"#事件代理的原理","aria-label":"Permalink to “事件代理的原理”"},"​")],-1),a("p",null,"事件委托是利用事件的冒泡原理来实现的,就是事件从最深的节点开始,然后逐步向上传播事件",-1),a("p",null,"举个例子: 页面上有这么一个节点树, div>ul>li>a;比如给最里面的a加一个click点击事件,那么这个事件就会一层一层的往外执行, 执行顺序 a > li > ul > div, 有这样的一个机制,那么我们给最外面的div加点击事件,那么里面的ul,li,a做点击事件的时候,都会冒泡到最外层的div上,所以都会触发,这就是事件委托,委托他们父级代理",-1)]))}const f=l(d,[["render",o]]);export{_ as __pageData,f as default};
