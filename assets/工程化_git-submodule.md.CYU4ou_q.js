import{F as e,b as t,j as n,m as r,q as i}from"./chunks/plugin-vue_export-helper.Cyk5UgWo.js";const a=JSON.parse(`{"title":"git submodule","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/git-submodule.md","filePath":"工程化/git-submodule.md","lastUpdated":1749116258000}`),o={name:`工程化/git-submodule.md`};function s(t,a,o,s,c,l){return e(),r(`div`,null,a[0]||=[n(`h1`,{id:`git-submodule`,tabindex:`-1`},[i(`git submodule `),n(`a`,{class:`header-anchor`,href:`#git-submodule`,"aria-label":`Permalink to “git submodule”`},`​`)],-1),n(`p`,null,`开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。今天无意中发现了Git的git submodule命令，之前的问题迎刃而解了。 添加 为当前工程添加submodule，命令如下：`,-1),n(`p`,null,[n(`code`,null,`git submodule add 仓库地址 路径`)],-1),n(`p`,null,`其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。 注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone） 命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。 删除 submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。 下载的工程带有submodule 当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：`,-1),n(`p`,null,[n(`code`,null,`git submodule update --init --recursive`)],-1),n(`p`,null,`即可将子模块内容下载下来后工程才不会缺少相应的文件。`,-1)])}var c=t(o,[[`render`,s]]);export{a as __pageData,c as default};