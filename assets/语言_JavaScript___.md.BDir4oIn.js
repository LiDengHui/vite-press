import{F as e,J as t,T as n,b as r,f as i,j as a,k as o,m as s,p as c,q as l,r as u}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const d=JSON.parse(`{"title":"==","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/==.md","filePath":"语言/JavaScript/==.md","lastUpdated":1751812369000}`),f={name:`语言/JavaScript/==.md`};function p(r,d,f,p,m,h){let g=t(`Mermaid`);return e(),s(`div`,null,[d[1]||=a(`h1`,{id:``,tabindex:`-1`},[l(`== `),a(`a`,{class:`header-anchor`,href:`#`,"aria-label":`Permalink to “==”`},`​`)],-1),d[2]||=a(`p`,null,[l(`在 JavaScript 中，`),a(`code`,null,`==`),l(` 是`),a(`strong`,null,`宽松相等运算符`),l(`（Loose Equality Operator），它会在比较两个值时进行`),a(`strong`,null,`类型转换`),l(`（Type Coercion），然后再比较转换后的值是否相等。这种类型转换有时会导致一些不符合直觉的结果，因此理解 `),a(`code`,null,`==`),l(` 的工作机制非常重要。`)],-1),(e(),o(i,null,{default:n(()=>[u(g,{id:`mermaid-6`,class:`mermaid my-class main img`,graph:`stateDiagram-v2%0A%20%20%20%20direction%20LR%0A%20%20%20%20%0A%20%20%20%20state%20%22undefined%20%3D%3D%20null%22%20as%201%0A%20%20%20%20state%20%22NaN%20!%3D%20NaN%22%20as%202%0A%20%20%20%20state%20%22%E4%B8%80%E7%AB%AF%E5%8E%9F%E5%A7%8B%EF%BC%8C%E4%B8%80%E7%AB%AF%E5%AF%B9%E8%B1%A1%22%20as%203%0A%20%20%20%20state%20%22%E5%AF%B9%E8%B1%A1%E8%BD%AC%E5%8E%9F%E5%A7%8B%E5%90%8E%E6%AF%94%E8%BE%83%22%20as%204%0A%20%20%20%20%0A%20%20%20%20%3D%3D%20--%3E%20%E7%89%B9%E6%AE%8A%0A%20%20%20%20%3D%3D%20--%3E%20%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%90%8C%0A%20%20%20%20%3D%3D%20--%3E%20%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%0A%20%20%20%20%0A%20%20%20%20%E7%89%B9%E6%AE%8A%20--%3E%201%0A%20%20%20%20%E7%89%B9%E6%AE%8A%20--%3E%202%20%0A%20%20%20%20%0A%20%20%20%20%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%90%8C%20--%3E%20%E6%AF%94%E8%BE%83%E5%80%BC%0A%20%20%20%20%0A%20%20%20%20%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%20--%3E%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%0A%20%20%20%20%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%20--%3E%203%0A%20%20%20%20%0A%20%20%20%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%20--%3E%20%E8%BD%AC%E6%8D%A2%E4%BD%8D%E6%95%B0%E5%AD%97%E6%AF%94%E8%BE%83%0A%20%20%20%203%20--%3E%204%0A%20%20%20%20note%20right%20of%204%0A%20%20%20%20%20%20%20%20%E5%85%88%E8%B0%83%E7%94%A8%20valueOf%0A%20%20%20%20%20%20%20%20%E8%8B%A5%E6%97%A0%E6%B3%95%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E5%A7%8B%E5%80%BC%0A%20%20%20%20%20%20%20%20%E5%86%8D%E8%B0%83%E7%94%A8toString()%0A%20%20%20%20end%20note%0A%0A`})]),fallback:n(()=>d[0]||=[l(` Loading... `,-1)]),_:1})),d[3]||=c(`<h2 id="的运算规则" tabindex="-1"><strong><code>==</code> 的运算规则</strong> <a class="header-anchor" href="#的运算规则" aria-label="Permalink to “== 的运算规则”">​</a></h2><ol><li><p><strong>如果两个值的类型相同</strong>，则直接比较它们的值：</p><ul><li><code>5 == 5</code> → <code>true</code></li><li><code>&quot;hello&quot; == &quot;hello&quot;</code> → <code>true</code></li><li><code>true == true</code> → <code>true</code></li><li><code>null == null</code> → <code>true</code></li><li><code>undefined == undefined</code> → <code>true</code></li><li><code>NaN == NaN</code> → <code>false</code>（<code>NaN</code> 不等于任何值，包括它自己）</li></ul></li><li><p><strong>如果两个值的类型不同</strong>，JavaScript 会尝试进行类型转换，规则如下：</p><ul><li><strong>数字 vs 字符串</strong> → 字符串会被转换成数字：<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // true，因为 &quot;5&quot; 被转成数字 5</span></span></code></pre></div></li><li><strong>布尔值 vs 非布尔值</strong> → 布尔值会先转换成数字（<code>true</code>→<code>1</code>，<code>false</code>→<code>0</code>），然后再比较：<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true，因为 true → 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true，因为 false → 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // true，因为 true → 1，&quot;1&quot; → 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // true，因为 false → 0，&quot;&quot; → 0</span></span></code></pre></div></li><li><strong>对象 vs 基本类型</strong> → 对象会调用 <code>valueOf()</code> 或 <code>toString()</code> 转换成基本类型再比较：<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // true，因为 [1].toString() → &quot;1&quot; → 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // true，因为 [].toString() → &quot;&quot; → 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[object Object]&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Error，因为 {} 认为是代码块</span></span></code></pre></div></li><li><strong><code>null</code> 和 <code>undefined</code></strong>： <ul><li><code>null == undefined</code> → <code>true</code></li><li><code>null</code> 和 <code>undefined</code> 不会转换成其他类型：<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span></code></pre></div></li></ul></li></ul></li></ol><hr><h2 id="的奇怪行为-容易踩坑" tabindex="-1"><strong><code>==</code> 的奇怪行为（容易踩坑）</strong> <a class="header-anchor" href="#的奇怪行为-容易踩坑" aria-label="Permalink to “== 的奇怪行为（容易踩坑）”">​</a></h2><p>由于类型转换的规则，<code>==</code> 可能会导致一些不符合直觉的结果：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // true（&quot;&quot; → 0）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true（false → 0，&quot;0&quot; → 0）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true（[] → &quot;&quot; → 0，false → 0）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1,2&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true（数组转字符串）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true（空白字符串 → 0）</span></span></code></pre></div><hr><h2 id="严格相等-vs-宽松相等" tabindex="-1"><strong><code>===</code>（严格相等） vs <code>==</code>（宽松相等）</strong> <a class="header-anchor" href="#严格相等-vs-宽松相等" aria-label="Permalink to “===（严格相等） vs ==（宽松相等）”">​</a></h2><ul><li><code>===</code> <strong>不会进行类型转换</strong>，只有类型和值都相同才返回 <code>true</code>。</li><li><code>==</code> <strong>会进行类型转换</strong>，可能导致意外结果。</li></ul><p><strong>推荐使用 <code>===</code></strong>，除非你明确需要类型转换的逻辑。</p><hr><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><ul><li><code>==</code> 会进行隐式类型转换，可能导致意外行为。</li><li><code>===</code> 更严格，推荐使用。</li><li>特殊规则： <ul><li><code>NaN == NaN</code> → <code>false</code>（<code>NaN</code> 不等于任何值）</li><li><code>null == undefined</code> → <code>true</code>（但它们不等于其他值）</li><li>对象会尝试转换成基本类型再比较。</li></ul></li></ul><p>如果你不确定 <code>==</code> 的行为，可以优先使用 <code>===</code> 或使用 <code>console.log()</code> 查看转换后的值。</p>`,14)])}var m=r(f,[[`render`,p]]);export{d as __pageData,m as default};