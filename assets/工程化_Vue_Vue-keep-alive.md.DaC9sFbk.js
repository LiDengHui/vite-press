import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.CL7LGUog.js";const i=JSON.parse(`{"title":"Vue Keep-alive","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Vue/Vue-keep-alive.md","filePath":"工程化/Vue/Vue-keep-alive.md","lastUpdated":1754714200000}`),a={name:`工程化/Vue/Vue-keep-alive.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="vue-keep-alive" tabindex="-1">Vue Keep-alive <a class="header-anchor" href="#vue-keep-alive" aria-label="Permalink to “Vue Keep-alive”">​</a></h1><p>在 Vue 中，组件缓存通常是通过 <code>keep-alive</code> 来实现的。<code>keep-alive</code> 是 Vue 提供的一个内置组件，它可以缓存已经渲染过的组件实例，使得当组件被切换时，不会销毁组件状态，从而提高性能和用户体验。</p><h2 id="_1-如何实现组件缓存" tabindex="-1">1. <strong>如何实现组件缓存</strong> <a class="header-anchor" href="#_1-如何实现组件缓存" aria-label="Permalink to “1. 如何实现组件缓存”">​</a></h2><p><code>keep-alive</code> 只适用于 Vue 动态组件，它会缓存进入 <code>keep-alive</code> 的组件，而不是重新销毁和创建它们。下面是如何在 Vue 中使用 <code>keep-alive</code> 来缓存组件：</p><h3 id="_1-1-基本用法" tabindex="-1">1.1 基本用法 <a class="header-anchor" href="#_1-1-基本用法" aria-label="Permalink to “1.1 基本用法”">​</a></h3><p>将 <code>keep-alive</code> 包裹在动态组件外部，只有被 <code>keep-alive</code> 包裹的组件才能被缓存。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">switchComponent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;切换组件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FirstComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./FirstComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SecondComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./SecondComponent.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currentComponent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FirstComponent&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FirstComponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SecondComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    switchComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.currentComponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FirstComponent&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SecondComponent&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FirstComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在上面的代码中，<code>currentComponent</code> 动态控制显示的组件，当点击按钮切换组件时，<code>keep-alive</code> 会缓存组件实例，使得组件状态得以保留。</p><h3 id="_1-2-keep-alive-的属性" tabindex="-1">1.2 <code>keep-alive</code> 的属性 <a class="header-anchor" href="#_1-2-keep-alive-的属性" aria-label="Permalink to “1.2 keep-alive 的属性”">​</a></h3><p><code>keep-alive</code> 有两个常用的属性：</p><ul><li><strong><code>include</code></strong>：指定一个字符串、正则表达式或数组，只有匹配的组件会被缓存。</li><li><strong><code>exclude</code></strong>：指定一个字符串、正则表达式或数组，匹配的组件将不会被缓存。</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FirstComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;component :is=&quot;currentComponent&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在这个例子中，只有 <code>FirstComponent</code> 会被缓存，<code>SecondComponent</code> 会被销毁。</p><h2 id="_2-与-keep-alive-相关的生命周期钩子" tabindex="-1">2. <strong>与 <code>keep-alive</code> 相关的生命周期钩子</strong> <a class="header-anchor" href="#_2-与-keep-alive-相关的生命周期钩子" aria-label="Permalink to “2. 与 keep-alive 相关的生命周期钩子”">​</a></h2><p>当组件被包裹在 <code>keep-alive</code> 中时，组件会经历一些特殊的生命周期钩子。主要有以下几个：</p><h3 id="_2-1-activated" tabindex="-1">2.1 <strong><code>activated</code></strong> <a class="header-anchor" href="#_2-1-activated" aria-label="Permalink to “2.1 activated”">​</a></h3><ul><li><code>activated</code> 钩子在组件被激活时触发（即从缓存中恢复）。</li><li>它的执行时机是组件被从 <code>keep-alive</code> 中恢复出来后，这个钩子会比 <code>created</code> 和 <code>mounted</code> 先触发。</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  activated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;组件已激活&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-2-deactivated" tabindex="-1">2.2 <strong><code>deactivated</code></strong> <a class="header-anchor" href="#_2-2-deactivated" aria-label="Permalink to “2.2 deactivated”">​</a></h3><ul><li><code>deactivated</code> 钩子在组件被缓存时触发（即从视图中移除，但未销毁）。</li><li>它的执行时机是组件被隐藏或从 DOM 中移除时，但 <code>keep-alive</code> 会保留组件的状态。</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  deactivated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;组件已被缓存&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_3-与-keep-alive-相关的生命周期钩子总结" tabindex="-1">3. <strong>与 <code>keep-alive</code> 相关的生命周期钩子总结</strong> <a class="header-anchor" href="#_3-与-keep-alive-相关的生命周期钩子总结" aria-label="Permalink to “3. 与 keep-alive 相关的生命周期钩子总结”">​</a></h2><ul><li><code>created</code> 和 <code>mounted</code>：在组件首次创建并挂载时调用，不会因为 <code>keep-alive</code> 的缓存而被跳过。</li><li><code>activated</code>：当组件从 <code>keep-alive</code> 中恢复时调用，相当于组件重新显示。</li><li><code>deactivated</code>：当组件被缓存时调用，通常用于释放资源、暂停定时器等操作。</li></ul><h2 id="_4-性能考虑" tabindex="-1">4. <strong>性能考虑</strong> <a class="header-anchor" href="#_4-性能考虑" aria-label="Permalink to “4. 性能考虑”">​</a></h2><p>使用 <code>keep-alive</code> 时，缓存的组件实例将保持在内存中，因此在某些情况下，过多的缓存可能会导致性能问题。为了优化性能，可以通过 <code>include</code> 和 <code>exclude</code> 属性来控制哪些组件需要缓存，从而避免不必要的内存占用。</p><h2 id="_5-使用-keep-alive-的最佳实践" tabindex="-1">5. <strong>使用 <code>keep-alive</code> 的最佳实践</strong> <a class="header-anchor" href="#_5-使用-keep-alive-的最佳实践" aria-label="Permalink to “5. 使用 keep-alive 的最佳实践”">​</a></h2><ul><li><strong>缓存页面状态</strong>：在需要缓存页面的场景中非常有用，尤其是在 Tab 页、列表页等切换频繁的场景。</li><li><strong>减少不必要的缓存</strong>：避免过多的组件被缓存，尽量使用 <code>include</code> 或 <code>exclude</code> 来有选择地缓存组件。</li><li><strong>清理资源</strong>：在 <code>deactivated</code> 钩子中清理定时器、取消网络请求等资源，以避免内存泄漏。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><ul><li><code>keep-alive</code> 用于缓存组件，避免频繁的销毁和创建，提升性能。</li><li><code>activated</code> 和 <code>deactivated</code> 是与 <code>keep-alive</code> 相关的生命周期钩子，分别在组件从缓存中恢复和被缓存时触发。</li><li><code>include</code> 和 <code>exclude</code> 属性可以控制哪些组件需要被缓存。</li><li>使用时需要注意性能和资源的管理，避免过度缓存导致性能问题。</li></ul>`,29)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};