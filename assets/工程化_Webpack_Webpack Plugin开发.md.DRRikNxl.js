import{_ as i,c as a,o as t,a7 as l}from"./chunks/framework.t6yJIVLk.js";const E=JSON.parse('{"title":"Webpack Plugin开发","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Webpack/Webpack Plugin开发.md","filePath":"工程化/Webpack/Webpack Plugin开发.md","lastUpdated":1750738239000}'),n={name:"工程化/Webpack/Webpack Plugin开发.md"};function e(h,s,k,p,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="webpack-plugin开发" tabindex="-1">Webpack Plugin开发 <a class="header-anchor" href="#webpack-plugin开发" aria-label="Permalink to “Webpack Plugin开发”">​</a></h1><p>Webpack 插件开发的核心在于理解其<strong>插件架构（Tapable）</strong> 和 <strong>构建生命周期（钩子）</strong>。下面详细解析插件属性对象、常用钩子及其阶段：</p><h2 id="一、webpack-插件基本结构" tabindex="-1">一、Webpack 插件基本结构 <a class="header-anchor" href="#一、webpack-插件基本结构" aria-label="Permalink to “一、Webpack 插件基本结构”">​</a></h2><p>一个 Webpack 插件是一个包含 <code>apply(compiler)</code> 方法的 JavaScript 类/函数：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 注册钩子回调</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compiler.hooks.someHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MyPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 插件逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyPlugin;</span></span></code></pre></div><h2 id="二、插件属性对象详解" tabindex="-1">二、插件属性对象详解 <a class="header-anchor" href="#二、插件属性对象详解" aria-label="Permalink to “二、插件属性对象详解”">​</a></h2><h3 id="_1-compiler-对象" tabindex="-1">1. <code>compiler</code> 对象 <a class="header-anchor" href="#_1-compiler-对象" aria-label="Permalink to “1. compiler 对象”">​</a></h3><ul><li><strong>作用</strong>：代表完整的 Webpack 配置环境，贯穿整个构建生命周期</li><li><strong>关键属性</strong>： <ul><li><code>options</code>：完整的 Webpack 配置 (<code>webpack.config.js</code>)</li><li><code>inputFileSystem</code> / <code>outputFileSystem</code>：文件系统抽象（内存、磁盘）</li><li><code>hooks</code>：所有生命周期钩子的集合（核心扩展点）</li></ul></li></ul><h3 id="_2-compilation-对象" tabindex="-1">2. <code>compilation</code> 对象 <a class="header-anchor" href="#_2-compilation-对象" aria-label="Permalink to “2. compilation 对象”">​</a></h3><ul><li><strong>作用</strong>：代表单次构建过程，包含模块、依赖、资源等详细信息</li><li><strong>关键属性</strong>： <ul><li><code>modules</code>：所有模块（文件）的 Set 集合</li><li><code>chunks</code>：代码块（Chunk）信息</li><li><code>assets</code>：最终生成的资源对象 <code>{ filename: source }</code></li><li><code>hooks</code>：编译过程钩子（如模块优化、资源生成）</li></ul></li></ul><h2 id="三、核心生命周期钩子详解" tabindex="-1">三、核心生命周期钩子详解 <a class="header-anchor" href="#三、核心生命周期钩子详解" aria-label="Permalink to “三、核心生命周期钩子详解”">​</a></h2><h3 id="_1-compiler-hooks-全局钩子" tabindex="-1">1. Compiler Hooks（全局钩子） <a class="header-anchor" href="#_1-compiler-hooks-全局钩子" aria-label="Permalink to “1. Compiler Hooks（全局钩子）”">​</a></h3><table tabindex="0"><thead><tr><th>钩子名称</th><th>类型</th><th>触发时机</th><th>用途示例</th></tr></thead><tbody><tr><td><code>environment</code></td><td>SyncHook</td><td>环境初始化后</td><td>设置全局变量</td></tr><tr><td><code>compile</code></td><td>SyncHook</td><td>开始编译前</td><td>修改 entry 配置</td></tr><tr><td><code>compilation</code></td><td>SyncHook</td><td>创建 compilation 对象后</td><td>注册 compilation 钩子</td></tr><tr><td><code>emit</code></td><td>AsyncSeriesHook</td><td>生成资源到输出目录<strong>前</strong></td><td>修改最终 assets（关键！）</td></tr><tr><td><code>afterEmit</code></td><td>AsyncSeriesHook</td><td>资源已写入磁盘</td><td>清理临时文件</td></tr><tr><td><code>done</code></td><td>SyncHook</td><td>构建完成</td><td>输出构建统计信息</td></tr><tr><td><code>failed</code></td><td>SyncHook</td><td>构建失败时</td><td>错误通知</td></tr></tbody></table><h3 id="_2-compilation-hooks-单次编译钩子" tabindex="-1">2. Compilation Hooks（单次编译钩子） <a class="header-anchor" href="#_2-compilation-hooks-单次编译钩子" aria-label="Permalink to “2. Compilation Hooks（单次编译钩子）”">​</a></h3><table tabindex="0"><thead><tr><th>钩子名称</th><th>类型</th><th>触发时机</th><th>用途示例</th></tr></thead><tbody><tr><td><code>buildModule</code></td><td>SyncHook</td><td>开始构建模块前</td><td>修改模块加载器</td></tr><tr><td><code>succeedModule</code></td><td>SyncHook</td><td>模块构建成功</td><td>模块分析统计</td></tr><tr><td><code>finishModules</code></td><td>SyncHook</td><td>所有模块构建完成</td><td>模块依赖分析</td></tr><tr><td><code>optimizeChunks</code></td><td>SyncBailHook</td><td>优化 chunks（拆分/合并）</td><td>自定义 chunk 策略</td></tr><tr><td><code>processAssets</code></td><td>AsyncSeriesHook</td><td>处理 assets <strong>最常用！</strong></td><td>修改/添加资源文件</td></tr><tr><td><code>additionalAssets</code></td><td>AsyncSeriesHook</td><td>添加额外资源</td><td>插入 license 文件</td></tr></tbody></table><h2 id="四、关键阶段解读" tabindex="-1">四、关键阶段解读 <a class="header-anchor" href="#四、关键阶段解读" aria-label="Permalink to “四、关键阶段解读”">​</a></h2><ol><li><p><strong>初始化阶段</strong></p><ul><li>钩子：<code>environment</code>, <code>afterEnvironment</code></li><li>操作：创建 compiler 实例，应用插件</li></ul></li><li><p><strong>编译准备</strong></p><ul><li>钩子：<code>entryOption</code>, <code>afterPlugins</code>, <code>afterResolvers</code></li><li>操作：解析 entry 配置，初始化插件/解析器</li></ul></li><li><p><strong>模块构建</strong></p><ul><li>钩子：<code>make</code> → <code>buildModule</code> → <code>succeedModule</code></li><li>过程：递归构建模块 AST → 依赖收集 → Loader 转换</li></ul></li><li><p><strong>优化阶段</strong></p><ul><li>钩子：<code>optimize</code> → <code>optimizeModules</code> → <code>optimizeChunks</code></li><li>操作：Tree Shaking、代码压缩、拆分 Chunk</li></ul></li><li><p><strong>资源生成</strong></p><ul><li>核心钩子：<code>processAssets</code>（Webpack 5+）</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.thisCompilation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compilation.hooks.processAssets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stage: Compilation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PROCESS_ASSETS_STAGE_ADDITIONS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 修改 assets 对象（添加/删除/替换文件）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new-file.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>阶段常量（控制执行顺序）：<br><code>PROCESS_ASSETS_STAGE_ADDITIONAL</code> → 添加额外资源<br><code>PROCESS_ASSETS_STAGE_OPTIMIZE</code> → 优化已存在资源<br><code>PROCESS_ASSETS_STAGE_REPORT</code> → 最终报告</li></ul></li><li><p><strong>输出阶段</strong></p><ul><li>钩子：<code>emit</code>（最后修改机会）→ <code>afterEmit</code> → <code>done</code></li><li>注意：<code>emit</code> 阶段文件<strong>未写入磁盘</strong>，只能修改内存中的 assets</li></ul></li></ol><h2 id="五、实战技巧" tabindex="-1">五、实战技巧 <a class="header-anchor" href="#五、实战技巧" aria-label="Permalink to “五、实战技巧”">​</a></h2><ol><li><p><strong>异步钩子处理</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.emit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tapAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 异步操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 必须调用！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p><strong>修改已有资源</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compilation.hooks.processAssets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> webpack.sources.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RawSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/* Banner */</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p><strong>错误处理</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.failed.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;构建失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p><strong>自定义钩子</strong>（高级）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在插件中创建钩子</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compiler.hooks.myCustomHook </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SyncHook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他插件中调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiler.hooks.myCustomHook.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ some: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div></li></ol><h2 id="六、常用插件参考" tabindex="-1">六、常用插件参考 <a class="header-anchor" href="#六、常用插件参考" aria-label="Permalink to “六、常用插件参考”">​</a></h2><ol><li><strong>html-webpack-plugin</strong>：使用 <code>emit</code> 阶段注入 HTML</li><li><strong>clean-webpack-plugin</strong>：使用 <code>done</code> 阶段清理目录</li><li><strong>webpack-bundle-analyzer</strong>：使用 <code>done</code> 阶段分析输出</li><li><strong>terser-webpack-plugin</strong>：使用 <code>optimizeChunks</code> 阶段压缩代码</li></ol><blockquote><p><strong>关键原则</strong>：根据插件目标选择正确的钩子阶段。修改资源用 <code>processAssets</code>/<code>emit</code>，处理模块用编译阶段钩子，全局操作使用 compiler 钩子。</p></blockquote>`,22)]))}const c=i(n,[["render",e]]);export{E as __pageData,c as default};
