import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const i=JSON.parse(`{"title":"代码提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/代码提及规范.md","filePath":"工程化/代码提及规范.md","lastUpdated":1749215922000}`),a={name:`工程化/代码提及规范.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="代码提交规范" tabindex="-1">代码提交规范 <a class="header-anchor" href="#代码提交规范" aria-label="Permalink to “代码提交规范”">​</a></h1><p>要让 npm 项目提交的代码符合 Git Commits 规范（如 <strong>Conventional Commits</strong>），需通过工具链约束提交格式、自动校验及生成日志。以下是详细实施步骤：</p><p>以下是将提供的操作整理成的Markdown表格：</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">含义</th><th style="text-align:left;">示例</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>feat</strong></td><td style="text-align:left;">新增功能（feature）</td><td style="text-align:left;"><code>feat: add night mode to the application</code></td><td>描述新功能的添加，如新增用户界面特性或后端服务功能</td></tr><tr><td style="text-align:left;"><strong>fix</strong></td><td style="text-align:left;">修复错误（bug fix）</td><td style="text-align:left;"><code>fix: resolve null pointer exception in user login</code></td><td>修复代码中的错误或问题，确保程序行为符合预期</td></tr><tr><td style="text-align:left;"><strong>style</strong></td><td style="text-align:left;">代码样式修改（不影响逻辑）</td><td style="text-align:left;"><code>style: update code formatting according to ESLint rules</code></td><td>改进代码风格（如缩进、空格、换行），不改变功能</td></tr><tr><td style="text-align:left;"><strong>revert</strong></td><td style="text-align:left;">回滚之前的提交</td><td style="text-align:left;"><code>revert: 回滚feat: 增加用户注册功能</code></td><td>直接明确回滚历史代码或功能模块</td></tr><tr><td style="text-align:left;"><strong>build</strong></td><td style="text-align:left;">构建系统/外部依赖变更</td><td style="text-align:left;"><code>build: 升级webpack到版本5</code></td><td>影响构建系统的更改（如打包配置、依赖升级）</td></tr><tr><td style="text-align:left;"><strong>refactor</strong></td><td style="text-align:left;">代码重构（不改变功能）</td><td style="text-align:left;"><code>refactor: simplify complex function logic</code></td><td>优化代码结构而不改变外部行为</td></tr><tr><td style="text-align:left;"><strong>docs</strong></td><td style="text-align:left;">文档更新</td><td style="text-align:left;"><code>docs: update installation guide for v2.0</code></td><td>更新README、API文档等说明性内容</td></tr><tr><td style="text-align:left;"><strong>test</strong></td><td style="text-align:left;">测试相关更改</td><td style="text-align:left;"><code>test: add unit tests for new feature</code></td><td>添加或修改测试用例</td></tr><tr><td style="text-align:left;"><strong>chore</strong></td><td style="text-align:left;">维护任务</td><td style="text-align:left;"><code>chore: update package.json dependencies</code></td><td>日常维护（如更新依赖项、配置文件）</td></tr><tr><td style="text-align:left;"><strong>perf</strong></td><td style="text-align:left;">性能优化</td><td style="text-align:left;"><code>perf: optimize database query performance</code></td><td>针对性能提升的代码优化</td></tr><tr><td style="text-align:left;"><strong>ci</strong></td><td style="text-align:left;">持续集成配置变更</td><td style="text-align:left;"><code>ci: configure GitHub Actions for automated testing</code></td><td>更新CI/CD流水线配置（如GitHub Actions/Jenkins）</td></tr></tbody></table><h3 id="说明" tabindex="-1">说明： <a class="header-anchor" href="#说明" aria-label="Permalink to “说明：”">​</a></h3><ol><li><strong>前缀规范</strong>：所有类型均使用英文小写前缀（如<code>feat</code>/<code>fix</code>）</li><li><strong>语义化提交</strong>：示例遵循<code>&lt;类型&gt;: &lt;描述&gt;</code>的格式（如<code>feat: add night mode</code>）</li><li><strong>作用范围</strong>： <ul><li><code>style</code>仅涉及代码风格（如格式化规则）</li><li><code>revert</code>需明确标注被回滚的提交</li><li><code>build</code>和<code>ci</code>区分：前者影响项目构建，后者涉及自动化流程配置</li></ul></li></ol><h3 id="一、安装-commitizen-工具-规范提交信息" tabindex="-1">一、安装 Commitizen 工具（规范提交信息） <a class="header-anchor" href="#一、安装-commitizen-工具-规范提交信息" aria-label="Permalink to “一、安装 Commitizen 工具（规范提交信息）”">​</a></h3><p><strong>作用</strong>：交互式生成符合规范的提交信息，替代 <code>git commit</code>。<br><strong>步骤</strong>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装（推荐）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置适配器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.czrc</span></span></code></pre></div><ul><li><strong>使用方式</strong>：<br> 提交时运行 <code>git cz</code> 或 <code>npm run commit</code>（若项目局部安装），按提示填写： <ol><li><strong><code>type</code></strong>：选择提交类型（如 feat、fix、docs）。</li><li><strong><code>scope</code></strong>：输入影响范围（如模块名）。</li><li><strong><code>subject</code></strong>：简短描述（必填）。</li><li><strong><code>body/footer</code></strong>：详细说明或关联 issue（可选）。</li></ol></li></ul><hr><h3 id="二、定制中文提交提示-可选" tabindex="-1">二、定制中文提交提示（可选） <a class="header-anchor" href="#二、定制中文提交提示-可选" aria-label="Permalink to “二、定制中文提交提示（可选）”">​</a></h3><p>替换默认英文提示为中文：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-customizable</span></span></code></pre></div><p>创建 <code>.cz-config.js</code> 文件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  types: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feat&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;feat:     新功能&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fix:      修复Bug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他类型（docs/style/refactor等）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  messages: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;选择提交类型:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scope: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;影响范围（如模块名）:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subject: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;简短描述（必填）:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在 <code>package.json</code> 中指定适配器：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="三、配置-commitlint-husky-强制校验" tabindex="-1">三、配置 Commitlint + Husky（强制校验） <a class="header-anchor" href="#三、配置-commitlint-husky-强制校验" aria-label="Permalink to “三、配置 Commitlint + Husky（强制校验）”">​</a></h3><p><strong>作用</strong>：通过 Git 钩子拦截不符合规范的提交。<br><strong>步骤</strong>：</p><ol><li><p><strong>安装依赖</strong>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/config-conventional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span></span></code></pre></div></li><li><p><strong>创建校验规则</strong>：<br> 在 <code>commitlint.config.js</code> 中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@commitlint/config-conventional&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] };</span></span></code></pre></div></li><li><p><strong>启用 Husky 钩子</strong>：<br> 在 <code>package.json</code> 中添加：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;commit-msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>提交时自动校验，格式错误则拒绝提交（示例错误：<code>git commit -m &quot;update code&quot;</code> 会报错）。</li></ul></li></ol><hr><h3 id="四、集成代码风格检查-增强规范" tabindex="-1">四、集成代码风格检查（增强规范） <a class="header-anchor" href="#四、集成代码风格检查-增强规范" aria-label="Permalink to “四、集成代码风格检查（增强规范）”">​</a></h3><p>在提交前自动检查代码风格（如 ESLint/Standard）：</p><ol><li><p><strong>安装 ESLint</strong>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成配置文件</span></span></code></pre></div></li><li><p><strong>配置 Husky 的 <code>pre-commit</code> 钩子</strong>：<br> 在 <code>package.json</code> 中：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint src/**/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查指定目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;commit-msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>代码不符合规范时，提交将被终止。</li></ul></li></ol><hr><h3 id="五、规范提交流程示例" tabindex="-1">五、规范提交流程示例 <a class="header-anchor" href="#五、规范提交流程示例" aria-label="Permalink to “五、规范提交流程示例”">​</a></h3><ol><li><p>添加文件到暂存区：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div></li><li><p>触发交互式提交：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 或 npm run commit</span></span></code></pre></div><ul><li>按提示填写类型、范围、描述等。</li></ul></li><li><p>自动触发流程：</p><ul><li>Husky 执行 <code>pre-commit</code>（代码检查）。</li><li>Husky 执行 <code>commit-msg</code>（信息格式校验）。</li><li>全部通过后提交成功。</li></ul></li></ol><hr><h3 id="六、自动生成变更日志-changelog" tabindex="-1">六、自动生成变更日志（Changelog） <a class="header-anchor" href="#六、自动生成变更日志-changelog" aria-label="Permalink to “六、自动生成变更日志（Changelog）”">​</a></h3><p>利用规范提交自动生成日志：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conventional-changelog-cli</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> angular</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CHANGELOG.md</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span></code></pre></div><ul><li>每次发布新版本时运行，自动提取 <code>feat</code>/<code>fix</code> 等类型提交到日志。</li></ul><hr><h3 id="七、npm-版本管理规范" tabindex="-1">七、NPM 版本管理规范 <a class="header-anchor" href="#七、npm-版本管理规范" aria-label="Permalink to “七、NPM 版本管理规范”">​</a></h3><p>结合语义化版本（SemVer）：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 修复Bug（0.0.1 → 0.0.2）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 新增功能（0.0.2 → 0.1.0）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> major</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 破坏性变更（0.1.0 → 1.0.0）</span></span></code></pre></div><ul><li>自动创建 Git Tag（如 <code>v1.0.0</code>）。</li></ul><hr><h3 id="总结-完整工具链" tabindex="-1">总结：完整工具链 <a class="header-anchor" href="#总结-完整工具链" aria-label="Permalink to “总结：完整工具链”">​</a></h3><table tabindex="0"><thead><tr><th>工具</th><th>作用</th><th>关键配置</th></tr></thead><tbody><tr><td><strong>Commitizen</strong></td><td>交互式生成规范提交信息</td><td><code>.cz-config.js</code>（中文支持）</td></tr><tr><td><strong>Commitlint</strong></td><td>校验提交信息格式</td><td><code>commitlint.config.js</code></td></tr><tr><td><strong>Husky</strong></td><td>Git 钩子管理</td><td><code>pre-commit</code>/<code>commit-msg</code></td></tr><tr><td><strong>ESLint</strong></td><td>代码风格检查</td><td><code>.eslintrc.js</code></td></tr><tr><td><strong>conventional-changelog</strong></td><td>自动生成变更日志</td><td>版本发布时执行</td></tr></tbody></table><blockquote><p>通过以上步骤，团队可确保所有提交符合 <strong>类型化+作用域+描述</strong> 的规范（如 <code>fix(login): 修复密码验证逻辑</code>），提升代码可维护性和自动化效率。</p></blockquote>`,43)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};