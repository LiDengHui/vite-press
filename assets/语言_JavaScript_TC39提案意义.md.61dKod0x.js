import{_ as r,c as o,o as a,a7 as e}from"./chunks/framework.BQO8qXET.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/TC39提案意义.md","filePath":"语言/JavaScript/TC39提案意义.md","lastUpdated":1750738239000}'),l={name:"语言/JavaScript/TC39提案意义.md"};function i(s,t,n,d,g,c){return a(),o("div",null,t[0]||(t[0]=[e('<p>TC39（ECMAScript标准制定委员会）负责推进JavaScript（ECMAScript）的语言演进，其提案采用五阶段流程（Stage 0–4）。每个阶段代表提案的成熟度，需经委员会审查和社区反馈。以下是各阶段的核心意义及典型案例：</p><hr><h3 id="📌-stage-0-strawman-草案阶段" tabindex="-1">📌 <strong>Stage 0: Strawman（草案阶段）</strong> <a class="header-anchor" href="#📌-stage-0-strawman-草案阶段" aria-label="Permalink to “📌 Stage 0: Strawman（草案阶段）”">​</a></h3><ul><li><strong>目标</strong>：正式提交想法，开启初步讨论。</li><li><strong>要求</strong>：需由TC39成员或注册贡献者提交，描述问题并给出初步解决方案。</li><li><strong>产出</strong>：无规范文本，仅需说明提案动机。</li><li><strong>典型案例</strong>： <ul><li>历史提案如<code>Observable</code>（异步数据流处理）始于此阶段。</li></ul></li></ul><hr><h3 id="⚙️-stage-1-proposal-提案阶段" tabindex="-1">⚙️ <strong>Stage 1: Proposal（提案阶段）</strong> <a class="header-anchor" href="#⚙️-stage-1-proposal-提案阶段" aria-label="Permalink to “⚙️ Stage 1: Proposal（提案阶段）”">​</a></h3><ul><li><strong>目标</strong>：确定提案可行性，明确解决方案。</li><li><strong>要求</strong>： <ul><li>提供详细问题描述、解决方案及示例。</li><li>列出潜在挑战（如语义冲突、性能影响）。</li><li>定义需实现的API或语法。</li></ul></li><li><strong>产出</strong>：初步规范草案，包含API定义或语法范例。</li><li><strong>典型案例</strong>： <ul><li><strong>Type Annotations（类型注解）</strong>：旨在让原生JS支持TS风格的类型声明，处于Stage 1（截至2023年）。</li><li><code>Resizable ArrayBuffer</code>（可伸缩二进制缓冲区）曾在此阶段。</li></ul></li></ul><hr><h3 id="📐-stage-2-draft-草案定型阶段" tabindex="-1">📐 <strong>Stage 2: Draft（草案定型阶段）</strong> <a class="header-anchor" href="#📐-stage-2-draft-草案定型阶段" aria-label="Permalink to “📐 Stage 2: Draft（草案定型阶段）”">​</a></h3><ul><li><strong>目标</strong>：完成规范的正式描述，锁定核心设计。</li><li><strong>要求</strong>： <ul><li>使用<a href="https://tc39.es/ecma262/" target="_blank" rel="noreferrer">ECMAScript规范语言</a>编写完整草案。</li><li>实现初步的Polyfill或转译器（如Babel插件）。</li></ul></li><li><strong>产出</strong>：可纳入标准文档的规范文本。</li><li><strong>典型案例</strong>： <ul><li><strong><code>Array.prototype.groupBy</code></strong>：数组分组方法（如按奇偶性分类）。</li><li><strong><code>findLast</code></strong>：从数组末尾反向查找元素。</li></ul></li></ul><hr><h3 id="🧪-stage-3-candidate-候选阶段" tabindex="-1">🧪 <strong>Stage 3: Candidate（候选阶段）</strong> <a class="header-anchor" href="#🧪-stage-3-candidate-候选阶段" aria-label="Permalink to “🧪 Stage 3: Candidate（候选阶段）”">​</a></h3><ul><li><strong>目标</strong>：获得最终设计批准，等待实践验证。</li><li><strong>要求</strong>： <ul><li>规范文本完全定稿，仅允许修正边缘案例。</li><li>至少一种浏览器或引擎（如Chrome、SpiderMonkey）实现该功能。</li><li>收集实现过程中的反馈。</li></ul></li><li><strong>产出</strong>：可被JavaScript引擎集成的稳定规范。</li><li><strong>典型案例</strong>： <ul><li><strong><code>Error Cause</code></strong>（阿里巴巴提案）：为<code>Error</code>构造函数添加<code>cause</code>属性，支持链式错误追踪（2022年进入Stage 3）。</li><li><strong><code>Array.prototype.at</code></strong>：支持负索引查询数组（如<code>arr.at(-1)</code>）。</li></ul></li></ul><hr><h3 id="✅-stage-4-finished-完成阶段" tabindex="-1">✅ <strong>Stage 4: Finished（完成阶段）</strong> <a class="header-anchor" href="#✅-stage-4-finished-完成阶段" aria-label="Permalink to “✅ Stage 4: Finished（完成阶段）”">​</a></h3><ul><li><strong>目标</strong>：正式纳入ECMAScript标准。</li><li><strong>要求</strong>： <ul><li>通过<strong>两种以上</strong>主流引擎（V8、SpiderMonkey、JavaScriptCore等）的兼容性测试。</li><li>所有测试用例通过验证。</li><li>由TC39主席签署并入标准。</li></ul></li><li><strong>产出</strong>：成为当年发布的ECMAScript官方标准的一部分。</li><li><strong>典型案例</strong>： <ul><li><strong><code>Promise</code></strong>（异步编程核心）。</li><li><strong><code>Async/Await</code></strong>（基于Promise的语法糖）。</li><li><strong><code>Array.prototype.includes</code></strong>（数组包含检测）。</li></ul></li></ul><hr><h3 id="当前代表提案示例-截至2025年" tabindex="-1">当前代表提案示例（截至2025年） <a class="header-anchor" href="#当前代表提案示例-截至2025年" aria-label="Permalink to “当前代表提案示例（截至2025年）”">​</a></h3><table tabindex="0"><thead><tr><th><strong>阶段</strong></th><th><strong>提案名称</strong></th><th><strong>关键能力</strong></th><th><strong>状态来源</strong></th></tr></thead><tbody><tr><td>Stage 1</td><td><code>Type Annotations</code></td><td>原生JS支持TS风格类型注解（运行时忽略）</td><td></td></tr><tr><td>Stage 2</td><td><code>Array Group</code></td><td>按回调函数分组数组元素（<code>groupBy</code>）</td><td></td></tr><tr><td>Stage 3</td><td><code>Error Cause</code></td><td>链式错误堆栈追踪（<code>new Error(&quot;msg&quot;, {cause})</code>）</td><td></td></tr><tr><td>Stage 4</td><td><code>Array.prototype.at</code></td><td>支持负索引查询（<code>arr.at(-1)</code>）</td><td></td></tr></tbody></table><hr><h3 id="💎-流程意义与开发者影响" tabindex="-1">💎 流程意义与开发者影响 <a class="header-anchor" href="#💎-流程意义与开发者影响" aria-label="Permalink to “💎 流程意义与开发者影响”">​</a></h3><ul><li><strong>渐进严谨</strong>：从概念（Stage 0）到生产可用（Stage 4），层层过滤高风险设计。</li><li><strong>生态协同</strong>：Stage 3+的提案可安全用于Babel等工具，提前验证稳定性（如<code>@babel/plugin-proposal-error-cause</code>）。</li><li><strong>标准透明</strong>：所有提案公开托管于<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">TC39 GitHub</a>，开发者可追踪进度并参与讨论。</li></ul><blockquote><p>💡 <strong>实践建议</strong>：生产项目优先采用Stage 4特性；实验性功能（Stage 2–3）需结合转译器并评估兼容性。</p></blockquote>',23)]))}const u=r(l,[["render",i]]);export{p as __pageData,u as default};
