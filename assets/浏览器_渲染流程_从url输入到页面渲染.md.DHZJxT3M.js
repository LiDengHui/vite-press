import{_ as t,I as n,c as e,o as i,a7 as r,b as h,j as o,w as a,a as k,J as p,a9 as g}from"./chunks/framework.CegclTe-.js";const C=JSON.parse('{"title":"从url输入到页面渲染","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/渲染流程/从url输入到页面渲染.md","filePath":"浏览器/渲染流程/从url输入到页面渲染.md","lastUpdated":1751344787000}'),d={name:"浏览器/渲染流程/从url输入到页面渲染.md"};function E(c,s,A,u,y,F){const l=n("Mermaid");return i(),e("div",null,[s[1]||(s[1]=r(`<h1 id="从url输入到页面渲染" tabindex="-1">从url输入到页面渲染 <a class="header-anchor" href="#从url输入到页面渲染" aria-label="Permalink to “从url输入到页面渲染”">​</a></h1><p>当你在浏览器中输入一个URL并按下回车时，整个过程涉及多个步骤和技术协同工作。以下是详细流程：</p><hr><h2 id="_1-url解析" tabindex="-1">1. <strong>URL解析</strong> <a class="header-anchor" href="#_1-url解析" aria-label="Permalink to “1. URL解析”">​</a></h2><ul><li>浏览器解析你输入的URL（例如 <code>https://www.example.com/page</code>），提取协议（<code>https</code>）、域名（<code>www.example.com</code>）、端口（默认443）、路径（<code>/page</code>）等信息。</li><li>如果输入的不是完整URL（如直接输入关键词），浏览器会使用默认搜索引擎进行搜索。</li></ul><hr><h2 id="_2-dns查询-域名解析" tabindex="-1">2. <strong>DNS查询（域名解析）</strong> <a class="header-anchor" href="#_2-dns查询-域名解析" aria-label="Permalink to “2. DNS查询（域名解析）”">​</a></h2><ul><li><strong>目标</strong>：将域名转换为IP地址。</li><li><strong>步骤</strong>： <ol><li>检查<strong>浏览器缓存</strong> → 若无则查<strong>操作系统缓存</strong> → 若无则查<strong>本地Hosts文件</strong>。</li><li>若仍无结果，向<strong>本地DNS服务器</strong>（如ISP提供的服务器）发起请求。</li><li>本地DNS服务器递归查询： <ul><li>根DNS服务器 → 顶级域服务器（<code>.com</code>） → 权威DNS服务器（<code>example.com</code>）。</li></ul></li><li>获取IP地址后，逐级缓存结果。</li></ol></li></ul><h2 id="_3-建立tcp连接-三次握手" tabindex="-1">3. <strong>建立TCP连接（三次握手）</strong> <a class="header-anchor" href="#_3-建立tcp连接-三次握手" aria-label="Permalink to “3. 建立TCP连接（三次握手）”">​</a></h2><ul><li>浏览器通过操作系统内核的<strong>网络协议栈</strong>，向目标服务器的IP地址发起TCP连接： <ol><li><strong>SYN</strong>：客户端发送连接请求包（序列号=x）。</li><li><strong>SYN-ACK</strong>：服务器回复确认包（序列号=y，确认号=x+1）。</li><li><strong>ACK</strong>：客户端发送最终确认包（确认号=y+1）。</li></ol></li><li><strong>结果</strong>：建立可靠的TCP连接（目标端口：HTTP为80，HTTPS为443）。</li></ul><h2 id="_4-tls握手-仅https" tabindex="-1">4. <strong>TLS握手（仅HTTPS）</strong> <a class="header-anchor" href="#_4-tls握手-仅https" aria-label="Permalink to “4. TLS握手（仅HTTPS）”">​</a></h2><ul><li>若使用HTTPS，在TCP连接后需建立加密通道： <ol><li><strong>ClientHello</strong>：客户端发送支持的TLS版本、加密套件、随机数。</li><li><strong>ServerHello</strong>：服务器选择加密套件，发送数字证书（含公钥）和随机数。</li><li><strong>验证证书</strong>：浏览器检查证书是否由可信CA签发、是否过期、域名是否匹配。</li><li><strong>密钥交换</strong>：客户端生成预主密钥，用服务器公钥加密后发送。</li><li><strong>生成会话密钥</strong>：双方通过随机数和预主密钥生成对称加密密钥。</li><li><strong>加密通信</strong>：后续数据使用对称加密传输。</li></ol></li></ul><h2 id="_5-发送http请求" tabindex="-1">5. <strong>发送HTTP请求</strong> <a class="header-anchor" href="#_5-发送http请求" aria-label="Permalink to “5. 发送HTTP请求”">​</a></h2><ul><li>浏览器构建<strong>HTTP请求报文</strong>，格式如下：<div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www.example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user_id=123</span></span></code></pre></div></li><li>请求通过TCP连接发送到服务器。</li></ul><hr><h2 id="_6-服务器处理请求" tabindex="-1">6. <strong>服务器处理请求</strong> <a class="header-anchor" href="#_6-服务器处理请求" aria-label="Permalink to “6. 服务器处理请求”">​</a></h2><ul><li>服务器（如Nginx/Apache）接收请求，根据路径路由到后端应用（如Node.js/Python）。</li><li>后端可能执行操作： <ul><li>读取数据库（如MySQL）。</li><li>调用外部API。</li><li>渲染模板（如Jinja）。</li></ul></li><li>生成<strong>HTTP响应</strong>：<div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Set-Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> session_id=abc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><hr><h2 id="_7-浏览器渲染页面" tabindex="-1">7. <strong>浏览器渲染页面</strong> <a class="header-anchor" href="#_7-浏览器渲染页面" aria-label="Permalink to “7. 浏览器渲染页面”">​</a></h2><ol><li><strong>解析HTML</strong>：构建DOM树（文档对象模型）。</li><li><strong>解析CSS</strong>：构建CSSOM树（CSS对象模型）。</li><li><strong>合并渲染树</strong>：DOM + CSSOM → 渲染树（Render Tree）。</li><li><strong>布局（Layout）</strong>：计算元素大小和位置（重排）。</li><li><strong>绘制（Painting）</strong>：将渲染树转换为像素（重绘）。</li><li><strong>执行JavaScript</strong>： <ul><li>遇到<code>&lt;script&gt;</code>标签时暂停HTML解析，下载并执行JS。</li><li>若JS修改DOM/CSS，可能触发重新布局或绘制。</li></ul></li></ol><hr><h2 id="_8-加载子资源" tabindex="-1">8. <strong>加载子资源</strong> <a class="header-anchor" href="#_8-加载子资源" aria-label="Permalink to “8. 加载子资源”">​</a></h2><ul><li>解析过程中发现子资源（如图片、CSS、JS）：<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;style.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li>浏览器为每个资源<strong>重新发起HTTP请求</strong>（复用已有TCP连接或新建）。</li></ul><hr><h2 id="_9-连接终止" tabindex="-1">9. <strong>连接终止</strong> <a class="header-anchor" href="#_9-连接终止" aria-label="Permalink to “9. 连接终止”">​</a></h2><ul><li>默认HTTP/1.1使用<code>Keep-Alive</code>复用TCP连接。</li><li>页面关闭后，TCP连接通过<strong>四次挥手</strong>关闭： <ol><li>客户端发送<code>FIN</code>。</li><li>服务器回复<code>ACK</code>。</li><li>服务器发送<code>FIN</code>。</li><li>客户端回复<code>ACK</code>（等待2MSL后关闭）。</li></ol></li></ul><hr><h2 id="关键优化技术" tabindex="-1">关键优化技术 <a class="header-anchor" href="#关键优化技术" aria-label="Permalink to “关键优化技术”">​</a></h2><ul><li><strong>缓存</strong>：浏览器缓存静态资源（通过<code>Cache-Control</code>/<code>ETag</code>控制）。</li><li><strong>CDN</strong>：静态资源分发到边缘节点加速访问。</li><li><strong>HTTP/2</strong>：多路复用、头部压缩提升效率。</li><li><strong>预加载</strong>：<code>&lt;link rel=&quot;preload&quot;&gt;</code>提前加载关键资源。</li></ul><hr><h2 id="流程图概览" tabindex="-1">流程图概览 <a class="header-anchor" href="#流程图概览" aria-label="Permalink to “流程图概览”">​</a></h2>`,31)),(i(),h(g,null,{default:a(()=>[p(l,{id:"mermaid-329",class:"mermaid my-class main img",graph:"graph%20TD%0A%20%20A%5B%E8%BE%93%E5%85%A5URL%5D%20--%3E%20B%5BURL%E8%A7%A3%E6%9E%90%5D%0A%20%20B%20--%3E%20C%5BDNS%E6%9F%A5%E8%AF%A2%5D%0A%20%20C%20--%3E%20D%5BTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%5D%0A%20%20D%20--%3E%20E%7BHTTPS%3F%7D%0A%20%20E%20--%20%E6%98%AF%20--%3E%20F%5BTLS%E6%8F%A1%E6%89%8B%5D%0A%20%20E%20--%20%E5%90%A6%20--%3E%20G%5B%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%5D%0A%20%20F%20--%3E%20G%0A%20%20G%20--%3E%20H%5B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%5D%0A%20%20H%20--%3E%20I%5B%E8%BF%94%E5%9B%9EHTTP%E5%93%8D%E5%BA%94%5D%0A%20%20I%20--%3E%20J%5B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%5D%0A%20%20J%20--%3E%20K%5B%E5%8A%A0%E8%BD%BD%E5%AD%90%E8%B5%84%E6%BA%90%5D%0A%20%20K%20--%3E%20L%5B%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%5D%0A"})]),fallback:a(()=>s[0]||(s[0]=[k(" Loading... ")])),_:1})),s[2]||(s[2]=o("p",null,"整个过程通常在几百毫秒内完成，依赖网络、服务器性能及页面复杂度。",-1))])}const B=t(d,[["render",E]]);export{C as __pageData,B as default};
