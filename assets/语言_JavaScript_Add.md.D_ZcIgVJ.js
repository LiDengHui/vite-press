import{_ as i,I as t,c as o,o as A,j as B,b as d,a7 as r,a,w as e,J as n,a9 as s}from"./chunks/framework.C7ilHghW.js";const C=JSON.parse('{"title":"Add","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/Add.md","filePath":"语言/JavaScript/Add.md","lastUpdated":1751812369000}'),c={name:"语言/JavaScript/Add.md"};function m(D,E,p,u,g,_){const l=t("Mermaid");return A(),o("div",null,[E[1]||(E[1]=B("h1",{id:"add",tabindex:"-1"},[a("Add "),B("a",{class:"header-anchor",href:"#add","aria-label":"Permalink to “Add”"},"​")],-1)),E[2]||(E[2]=B("p",null,"以下是 JavaScript 加法运算的逻辑图，采用 Mermaid 语法绘制：",-1)),(A(),d(s,null,{default:e(()=>[n(l,{id:"mermaid-6",class:"mermaid my-class main img",graph:"stateDiagram-v2%0A%20%20%20direction%20LR%0A%20%20%20%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%20--%3E%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%0A%20%20%20%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%20--%3E%20%E5%90%AB%E6%9C%89%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%0A%20%20%20%0A%20%20%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%20--%3E%20%E9%83%BD%E8%BD%AC%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%3A%20%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%0A%20%20%20%E9%83%BD%E8%BD%AC%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%20--%3E%20%E6%8B%BC%E6%8E%A5%0A%20%20%20%0A%20%20%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%20--%3E%20%E9%83%BD%E8%BD%AC%E4%B8%BA%E6%95%B0%E5%AD%97%3A%20%E6%97%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%0A%20%20%20%E9%83%BD%E8%BD%AC%E4%B8%BA%E6%95%B0%E5%AD%97%20--%3E%20%E5%8A%A0%E6%B3%95%3A%20%E4%B8%80%E7%AB%AF%E6%9C%89NaN%E5%BE%97%E5%88%B0NaN%0A%20%20%20%0A%20%20%20%E5%90%AB%E6%9C%89%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%20--%3E%20%E8%B0%83%E7%94%A8valueOf%0A%20%20%20%E8%B0%83%E7%94%A8valueOf%20--%3E%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%0A%20%20%20%E8%B0%83%E7%94%A8valueOf%20--%3E%20%E8%B0%83%E7%94%A8toString%0A%20%20%20%E8%B0%83%E7%94%A8toString%20--%3E%20%E5%9D%87%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%0A%20%20%20%E8%B0%83%E7%94%A8toString%20--%3E%20%E6%8A%A5%E9%94%99%3A%E5%BE%97%E4%B8%8D%E5%88%B0%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%0A%20%20%20%20%0A"})]),fallback:e(()=>E[0]||(E[0]=[a(" Loading... ")])),_:1})),E[3]||(E[3]=r('<ol><li><strong>类型检查</strong>：首先检查运算中是否包含非原始类型（对象）</li><li><strong>对象处理</strong>： <ul><li>调用对象的 <code>valueOf()</code> 方法</li><li>如果返回原始值，进入原始类型处理流程</li><li>如果返回对象，继续调用 <code>toString()</code> 方法</li><li>如果 <code>toString()</code> 返回原始值，进入原始类型处理</li><li>如果仍返回对象，抛出 <code>TypeError</code></li></ul></li><li><strong>原始类型处理</strong>： <ul><li><strong>存在字符串</strong>：双方转为字符串后拼接</li><li><strong>无字符串</strong>： <ul><li>双方转为数字</li><li>任一为 <code>NaN</code> 则结果为 <code>NaN</code></li><li>否则执行数字加法</li></ul></li></ul></li></ol><h2 id="关键点" tabindex="-1">关键点： <a class="header-anchor" href="#关键点" aria-label="Permalink to “关键点：”">​</a></h2><ul><li>对象到原始值的转换遵循 <code>valueOf()</code> → <code>toString()</code> 的优先级</li><li>只有运算双方均为非字符串的原始类型时才会转为数字计算</li><li>字符串的存在会触发字符串拼接，优先级高于数字计算</li></ul>',3))])}const S=i(c,[["render",m]]);export{C as __pageData,S as default};
