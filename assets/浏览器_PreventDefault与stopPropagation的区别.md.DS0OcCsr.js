import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.CL7LGUog.js";const i=JSON.parse(`{"title":"PreventDefault与stopPropagation的区别","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/PreventDefault与stopPropagation的区别.md","filePath":"浏览器/PreventDefault与stopPropagation的区别.md","lastUpdated":1751344787000}`),a={name:`浏览器/PreventDefault与stopPropagation的区别.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="preventdefault与stoppropagation的区别" tabindex="-1">PreventDefault与stopPropagation的区别 <a class="header-anchor" href="#preventdefault与stoppropagation的区别" aria-label="Permalink to “PreventDefault与stopPropagation的区别”">​</a></h1><p>在浏览器事件处理中，<code>.preventDefault()</code> 和 <code>.stopPropagation()</code>（通常简写为 <code>.stop</code>）是用于控制事件行为的两个重要方法，它们的核心区别如下：</p><hr><h2 id="_1-event-preventdefault" tabindex="-1">1. <strong><code>event.preventDefault()</code></strong> <a class="header-anchor" href="#_1-event-preventdefault" aria-label="Permalink to “1. event.preventDefault()”">​</a></h2><ul><li><strong>作用</strong>：阻止事件的<strong>默认行为</strong>（浏览器内置行为）。</li><li><strong>典型应用场景</strong>： <ul><li>阻止 <code>&lt;a&gt;</code> 标签的页面跳转</li><li>阻止表单的自动提交</li><li>阻止鼠标右键弹出浏览器菜单</li></ul></li><li><strong>示例</strong>：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击链接但不会跳转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><hr><h2 id="_2-event-stoppropagation" tabindex="-1">2. <strong><code>event.stopPropagation()</code></strong> <a class="header-anchor" href="#_2-event-stoppropagation" aria-label="Permalink to “2. event.stopPropagation()”">​</a></h2><ul><li><strong>作用</strong>：阻止事件在 <strong>DOM 树中向上/向下传播</strong>（冒泡或捕获阶段）。</li><li><strong>典型应用场景</strong>： <ul><li>阻止子元素事件触发父元素的事件监听器</li><li>避免事件委托（Event Delegation）中的意外触发</li></ul></li><li><strong>示例</strong>：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">childElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止事件冒泡到父元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;子元素事件触发&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parentElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;父元素事件不会触发&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><hr><h2 id="_3-关键区别总结" tabindex="-1">3. <strong>关键区别总结</strong> <a class="header-anchor" href="#_3-关键区别总结" aria-label="Permalink to “3. 关键区别总结”">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>作用对象</th><th>影响范围</th></tr></thead><tbody><tr><td><code>event.preventDefault()</code></td><td><strong>事件的默认行为</strong></td><td>阻止浏览器内置行为（如跳转）</td></tr><tr><td><code>event.stopPropagation()</code></td><td><strong>事件的传播流程</strong></td><td>阻止事件冒泡/捕获</td></tr></tbody></table><hr><h2 id="_4-组合使用场景" tabindex="-1">4. <strong>组合使用场景</strong> <a class="header-anchor" href="#_4-组合使用场景" aria-label="Permalink to “4. 组合使用场景”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止表单提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 防止事件冒泡到父容器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 自定义逻辑...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_5-额外注意" tabindex="-1">5. <strong>额外注意</strong> <a class="header-anchor" href="#_5-额外注意" aria-label="Permalink to “5. 额外注意”">​</a></h2><ul><li><strong><code>event.stopImmediatePropagation()</code></strong>：<br> 不仅阻止事件传播，还会<strong>阻止同一元素上的其他监听器执行</strong>。<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopImmediatePropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止下一个监听器执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li></ul><hr><h2 id="总结图示" tabindex="-1">总结图示 <a class="header-anchor" href="#总结图示" aria-label="Permalink to “总结图示”">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>事件触发</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ 默认行为? → \`preventDefault()\` 可阻止</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ 捕获阶段 (父 → 子)</span></span>
<span class="line"><span>│   └─ \`stopPropagation()\` 可中断</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├─ 目标阶段 (当前元素)</span></span>
<span class="line"><span>│   └─ \`stopImmediatePropagation()\` 可阻止其他监听器</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└─ 冒泡阶段 (子 → 父)</span></span>
<span class="line"><span>    └─ \`stopPropagation()\` 可中断</span></span></code></pre></div><p>理解这两个方法的区别，能更精确地控制事件流和浏览器行为！</p>`,21)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};