import{_ as i,c as a,o as n,a7 as t}from"./chunks/framework.C7ilHghW.js";const o=JSON.parse('{"title":"RoundingMode 详细描述","description":"","frontmatter":{},"headers":[],"relativePath":"语言/后端/RoundingMode详细描述.md","filePath":"语言/后端/RoundingMode详细描述.md","lastUpdated":1750738239000}'),h={name:"语言/后端/RoundingMode详细描述.md"};function l(k,s,e,p,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="roundingmode-详细描述" tabindex="-1">RoundingMode 详细描述 <a class="header-anchor" href="#roundingmode-详细描述" aria-label="Permalink to “RoundingMode 详细描述”">​</a></h1><p>在 Java 中，<code>RoundingMode</code> 是一个枚举类（位于 <code>java.math</code> 包中），用于精确控制数值计算中的舍入行为。它通常与 <code>BigDecimal</code> 类配合使用，处理金融或科学计算中需要精确舍入的场景。以下是详细说明和示例：</p><hr><h3 id="roundingmode-的枚举值" tabindex="-1"><strong>RoundingMode 的枚举值</strong> <a class="header-anchor" href="#roundingmode-的枚举值" aria-label="Permalink to “RoundingMode 的枚举值”">​</a></h3><p>Java 提供了 8 种舍入模式：</p><table tabindex="0"><thead><tr><th>枚举值</th><th>行为描述</th><th>示例（保留 0 位小数）</th></tr></thead><tbody><tr><td><strong>UP</strong></td><td>远离零方向舍入（绝对值增大）</td><td><code>2.5 → 3</code><br><code>-1.6 → -2</code></td></tr><tr><td><strong>DOWN</strong></td><td>向零方向舍入（直接截断，绝对值减小）</td><td><code>2.5 → 2</code><br><code>-1.6 → -1</code></td></tr><tr><td><strong>CEILING</strong></td><td>向正无穷方向舍入（正数同 UP，负数同 DOWN）</td><td><code>2.5 → 3</code><br><code>-1.6 → -1</code></td></tr><tr><td><strong>FLOOR</strong></td><td>向负无穷方向舍入（正数同 DOWN，负数同 UP）</td><td><code>2.5 → 2</code><br><code>-1.6 → -2</code></td></tr><tr><td><strong>HALF_UP</strong></td><td>四舍五入（≥0.5 进位）</td><td><code>2.5 → 3</code><br><code>-1.5 → -2</code></td></tr><tr><td><strong>HALF_DOWN</strong></td><td>五舍六入（&gt;0.5 进位）</td><td><code>2.5 → 2</code><br><code>2.6 → 3</code></td></tr><tr><td><strong>HALF_EVEN</strong></td><td>银行家舍入法（向最接近的偶数舍入，解决 HALF_UP 的统计偏差）</td><td><code>2.5 → 2</code>（偶）<br><code>3.5 → 4</code>（奇）</td></tr><tr><td><strong>UNNECESSARY</strong></td><td>断言操作无需舍入（若需舍入则抛出 <code>ArithmeticException</code>）</td><td><code>2.0 → 2</code><br><code>2.5 → 异常</code></td></tr></tbody></table><hr><h3 id="使用示例" tabindex="-1"><strong>使用示例</strong> <a class="header-anchor" href="#使用示例" aria-label="Permalink to “使用示例”">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.math.BigDecimal;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.math.RoundingMode;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RoundingModeDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BigDecimal num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // HALF_UP (四舍五入)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HALF_UP: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.HALF_UP)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // HALF_DOWN (五舍六入)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HALF_DOWN: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.HALF_DOWN)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // HALF_EVEN (银行家舍入)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HALF_EVEN: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.HALF_EVEN)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2 (向偶数舍入)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // CEILING (向正无穷舍入)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BigDecimal negativeNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-1.6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CEILING: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.CEILING)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // UNNECESSARY (无需舍入则成功，否则异常)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            BigDecimal exactNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UNNECESSARY: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exactNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.UNNECESSARY)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, RoundingMode.UNNECESSARY); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 抛出 ArithmeticException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ArithmeticException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;需要舍入时使用 UNNECESSARY 会抛出异常&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="关键场景建议" tabindex="-1"><strong>关键场景建议</strong> <a class="header-anchor" href="#关键场景建议" aria-label="Permalink to “关键场景建议”">​</a></h3><ol><li><p><strong>金融计算</strong><br> 优先使用 <strong><code>HALF_EVEN</code></strong>（银行家舍入），符合 IEEE 754 标准，避免统计偏差。</p></li><li><p><strong>常规四舍五入</strong><br> 使用 <strong><code>HALF_UP</code></strong>（如成绩计算、货币显示）。</p></li><li><p><strong>强制截断小数</strong><br> 使用 <strong><code>DOWN</code></strong>（如库存单位取整）。</p></li><li><p><strong>精确校验</strong><br><strong><code>UNNECESSARY</code></strong> 用于确保计算结果无需舍入（如财务校验）。</p></li></ol><hr><h3 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ul><li><code>RoundingMode</code> 替代了旧版 <code>BigDecimal.ROUND_XXX</code> 常量（Java 5+ 推荐用枚举）。</li><li>浮点数类型（<code>float</code>/<code>double</code>）的运算<strong>不适用</strong> <code>RoundingMode</code>，需用 <code>BigDecimal</code>。</li><li>舍入模式的选择直接影响精度，需严格匹配业务需求。</li></ul><p>通过合理使用 <code>RoundingMode</code>，可避免传统四舍五入的误差累积问题（尤其在金融领域）。</p>`,16)]))}const g=i(h,[["render",l]]);export{o as __pageData,g as default};
