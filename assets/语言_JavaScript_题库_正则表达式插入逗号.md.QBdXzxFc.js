import{_ as s,c as e,o as a,a7 as o}from"./chunks/framework.t6yJIVLk.js";const p=JSON.parse('{"title":"正则表达式插入逗号","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/题库/正则表达式插入逗号.md","filePath":"语言/JavaScript/题库/正则表达式插入逗号.md","lastUpdated":1750738239000}'),l={name:"语言/JavaScript/题库/正则表达式插入逗号.md"};function t(d,i,n,h,c,r){return a(),e("div",null,i[0]||(i[0]=[o(`<h1 id="正则表达式插入逗号" tabindex="-1">正则表达式插入逗号 <a class="header-anchor" href="#正则表达式插入逗号" aria-label="Permalink to “正则表达式插入逗号”">​</a></h1><p>问题描述： 给定一个字符串，要求在字符串中的每个数字之间插入一个逗号。 示例： 输入：&quot;1234567890&quot; 输出：&quot;1,234,567,890&quot; 解决方案：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> insertCommas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\B</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?=(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(?!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">))</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>解析： 这个正则表达式 <code>/(?=(\\d{3})+$)/g</code> 的目的是在数字字符串中从右向左每三位添加一个逗号（千位分隔符）。以下是执行逻辑的详细分析：</p><h3 id="正则表达式分解" tabindex="-1">正则表达式分解： <a class="header-anchor" href="#正则表达式分解" aria-label="Permalink to “正则表达式分解：”">​</a></h3><ol><li><p><strong><code>(?=...)</code></strong><br> 正向先行断言（positive lookahead）。它匹配一个<strong>位置</strong>（不消耗字符），要求这个位置之后的内容必须满足 <code>...</code> 的条件。</p></li><li><p><strong><code>(\\d{3})+$</code></strong></p><ul><li><code>\\d{3}</code>：匹配连续三个数字。</li><li><code>(\\d{3})+</code>：匹配一个或多个连续的三个数字分组。</li><li><code>$</code>：匹配字符串的结尾。</li><li>整体要求：<strong>从当前位置到字符串结尾，数字的长度必须是 3 的倍数</strong>。</li></ul></li><li><p><strong><code>g</code> 标志</strong><br> 全局匹配，找到所有符合条件的位置。</p></li></ol><h3 id="执行逻辑步骤-以-100000000000-为例" tabindex="-1">执行逻辑步骤（以 <code>&quot;100000000000&quot;</code> 为例）： <a class="header-anchor" href="#执行逻辑步骤-以-100000000000-为例" aria-label="Permalink to “执行逻辑步骤（以 &quot;100000000000&quot; 为例）：”">​</a></h3><ol><li><p><strong>原始字符串</strong>： <code>&quot;100000000000&quot;</code>（长度 12，是 3 的倍数）。</p></li><li><p><strong>匹配位置</strong>：</p><ul><li>引擎从左向右扫描，检查每个位置是否满足条件：<strong>从该位置到结尾的数字长度是 3 的倍数</strong>。</li><li>匹配的位置： <ul><li>位置 <code>0</code>：后面 12 位数字（<code>100000000000</code>），长度 12 是 3 的倍数。</li><li>位置 <code>3</code>：后面 9 位数字（<code>000000000</code>），长度 9 是 3 的倍数。</li><li>位置 <code>6</code>：后面 6 位数字（<code>000000</code>），长度 6 是 3 的倍数。</li><li>位置 <code>9</code>：后面 3 位数字（<code>000</code>），长度 3 是 3 的倍数。</li></ul></li><li>共匹配 4 个位置：<code>0</code>、<code>3</code>、<code>6</code>、<code>9</code>。</li></ul></li><li><p><strong>替换操作</strong>：</p><ul><li>在每个匹配的位置插入逗号 <code>,</code>。</li><li>插入后： <ul><li>位置 <code>0</code> 插入 → <code>&quot;,100000000000&quot;</code></li><li>位置 <code>3</code> 插入 → <code>&quot;,100,000000000&quot;</code></li><li>位置 <code>6</code> 插入 → <code>&quot;,100,000,000000&quot;</code></li><li>位置 <code>9</code> 插入 → <code>&quot;,100,000,000,000&quot;</code></li></ul></li></ul></li></ol><h3 id="为什么输出是-100-000-000-000-而不是-100-000-000-000" tabindex="-1">为什么输出是 <code>&quot;100,000,000,000&quot;</code> 而不是 <code>&quot;,100,000,000,000&quot;</code>？ <a class="header-anchor" href="#为什么输出是-100-000-000-000-而不是-100-000-000-000" aria-label="Permalink to “为什么输出是 &quot;100,000,000,000&quot; 而不是 &quot;,100,000,000,000&quot;？”">​</a></h3><ul><li><strong>关键点</strong>：在位置 <code>0</code> 插入逗号后，字符串变为 <code>&quot;,100000000000&quot;</code>。但后续匹配的位置 <code>3</code>、<code>6</code>、<code>9</code> 是<strong>基于原始字符串的索引</strong>（不是新字符串）。</li><li>插入逗号后，原始字符串的索引会向后偏移： <ul><li>在位置 <code>0</code> 插入逗号后，新字符串中： <ul><li>原始索引 <code>0</code> 的字符 <code>&#39;1&#39;</code> 移动到新索引 <code>1</code>。</li><li>原始索引 <code>3</code> 的字符 <code>&#39;0&#39;</code> 移动到新索引 <code>4</code>。</li></ul></li><li><strong>引擎继续使用原始索引</strong>，在原始索引 <code>3</code> 插入逗号时，实际插入到新字符串的索引 <code>4</code>（即 <code>&#39;1&#39;</code> 后的位置），形成 <code>&quot;100,&quot;</code>。</li></ul></li><li>最终结果：<strong>位置 <code>0</code> 的逗号被后续字符覆盖</strong>，只保留 <code>&quot;100,000,000,000&quot;</code>。</li></ul><h3 id="验证逻辑" tabindex="-1">验证逻辑： <a class="header-anchor" href="#验证逻辑" aria-label="Permalink to “验证逻辑：”">​</a></h3><ul><li><p><strong>字符串 <code>&quot;123456&quot;</code>（长度 6）</strong>：</p><ul><li>匹配位置：<code>0</code>（后面 6 位）和 <code>3</code>（后面 3 位）。</li><li>输出：<code>&quot;123,456&quot;</code>（位置 <code>0</code> 的逗号被覆盖，位置 <code>3</code> 的逗号保留）。</li></ul></li><li><p><strong>字符串 <code>&quot;12345&quot;</code>（长度 5）</strong>：</p><ul><li>匹配位置：<code>2</code>（后面 <code>&quot;345&quot;</code> 长度 3）。</li><li>输出：<code>&quot;12,345&quot;</code>。</li></ul></li></ul><h3 id="潜在问题" tabindex="-1">潜在问题： <a class="header-anchor" href="#潜在问题" aria-label="Permalink to “潜在问题：”">​</a></h3><ul><li><strong>开头逗号问题</strong>：如果字符串长度是 3 的倍数，位置 <code>0</code> 会匹配，但实际输出中开头逗号会被覆盖（如上述逻辑）。若字符串不以数字开头（如负号），可能暴露问题。</li><li><strong>更健壮的方案</strong>：常见写法是 <code>/(\\d)(?=(\\d{3})+$)/g</code>，替换为 <code>&#39;$1,&#39;</code>。它匹配<strong>一个数字（后跟三的倍数位）</strong>，避免位置 <code>0</code>：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100000000000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(?=(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$1,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;100,000,000,000&quot;</span></span></code></pre></div></li></ul><h3 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to “总结：”">​</a></h3><ul><li><strong>逻辑</strong>：匹配所有<strong>从该位置到结尾的数字长度是 3 的倍数</strong>的位置，插入逗号。</li><li><strong>实际效果</strong>：从右向左每三位加逗号，位置 <code>0</code> 的逗号会被覆盖，因此输出正确。</li><li><strong>适用场景</strong>：纯数字字符串，长度可能不是 3 的倍数（如长度 5 时匹配位置 <code>2</code>）。</li></ul>`,16)]))}const g=s(l,[["render",t]]);export{p as __pageData,g as default};
