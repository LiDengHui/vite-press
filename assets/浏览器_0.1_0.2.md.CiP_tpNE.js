import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.Cyk5UgWo.js";var i=`/vite-press/assets/2021-03-01-23-07-16.SEw8xAnb.png`,a=`/vite-press/assets/2021-03-01-23-10-38.vSb7Bpnb.png`,o=`/vite-press/assets/2021-03-01-23-11-33.DF8eTinh.png`,s=`/vite-press/assets/2021-03-01-23-12-13.DBTCt7ib.png`,c=`/vite-press/assets/2021-03-01-23-12-37.C8ESD5Ep.png`;const l=JSON.parse(`{"title":"0.1 + 0.2 != 0.3","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/0.1+0.2.md","filePath":"浏览器/0.1+0.2.md","lastUpdated":1751078101000}`),u={name:`浏览器/0.1+0.2.md`};function d(t,l,u,d,f,p){return e(),n(`div`,null,l[0]||=[r(`<h1 id="_0-1-0-2-0-3" tabindex="-1">0.1 + 0.2 != 0.3 <a class="header-anchor" href="#_0-1-0-2-0-3" aria-label="Permalink to “0.1 + 0.2 != 0.3”">​</a></h1><h1 id="计算机中数的表示" tabindex="-1">计算机中数的表示 <a class="header-anchor" href="#计算机中数的表示" aria-label="Permalink to “计算机中数的表示”">​</a></h1><p><img src="`+i+`" alt="" data-zoomable="true" loading="lazy"></p><ul><li>64位浮点数, 1 位符号位 + 11 位指数(带偏移量) + 52 位的尾数</li><li>32位浮点数, 1 位符号位 + 8 位指数(带偏移量) + 23 位的尾数</li></ul><h2 id="_1-如何存储" tabindex="-1">1 如何存储 <a class="header-anchor" href="#_1-如何存储" aria-label="Permalink to “1 如何存储”">​</a></h2><p><img src="`+a+`" alt="" data-zoomable="true" loading="lazy"></p><p>1 * 2^0 = 1;</p><h2 id="_0-如何存储" tabindex="-1">0 如何存储 <a class="header-anchor" href="#_0-如何存储" aria-label="Permalink to “0 如何存储”">​</a></h2><p><img src="`+o+`" alt="" data-zoomable="true" loading="lazy"></p><p>0 * 2 ^ 0 = 0</p><h2 id="_0-1-如何存储" tabindex="-1">0.1 如何存储 <a class="header-anchor" href="#_0-1-如何存储" aria-label="Permalink to “0.1 如何存储”">​</a></h2><p><img src="`+s+`" alt="" data-zoomable="true" loading="lazy"></p><p>1.10011001100110011 * 2 ^ -4</p><h2 id="_0-2-如何存储" tabindex="-1">0.2 如何存储 <a class="header-anchor" href="#_0-2-如何存储" aria-label="Permalink to “0.2 如何存储”">​</a></h2><p><img src="`+c+`" alt="" data-zoomable="true" loading="lazy"></p><p>1.10011001100110011 * 2 ^ -3</p><h2 id="nan-如何存储" tabindex="-1">NAN 如何存储 <a class="header-anchor" href="#nan-如何存储" aria-label="Permalink to “NAN 如何存储”">​</a></h2><p>NaN在内存中的值则是阶码全1，尾数不全0</p><h2 id="infinity-如何存储" tabindex="-1">Infinity 如何存储 <a class="header-anchor" href="#infinity-如何存储" aria-label="Permalink to “Infinity 如何存储”">​</a></h2><p>在内存中的值是阶码为全1，尾数全0</p><h2 id="max如何存储" tabindex="-1">Max如何存储 <a class="header-anchor" href="#max如何存储" aria-label="Permalink to “Max如何存储”">​</a></h2><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to “参考文档”">​</a></h2><ol><li><a href="https://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html" target="_blank" rel="noreferrer">查看浮点数存储</a></li><li><a href="https://juejin.cn/post/6844903680362151950" target="_blank" rel="noreferrer">掘金0.1 + 0.2 != 0.3</a></li><li><a href="https://juejin.cn/post/6844903680362151950" target="_blank" rel="noreferrer">IEEE754维基百科</a></li></ol><h1 id="todo-小数在计算机中的表示" tabindex="-1">TODO:小数在计算机中的表示 <a class="header-anchor" href="#todo-小数在计算机中的表示" aria-label="Permalink to “TODO:小数在计算机中的表示”">​</a></h1><h1 id="todo-0-1-0-2-发生了什么" tabindex="-1">TODO:0.1 + 0.2 发生了什么 <a class="header-anchor" href="#todo-0-1-0-2-发生了什么" aria-label="Permalink to “TODO:0.1 + 0.2 发生了什么”">​</a></h1>`,25)])}var f=t(u,[[`render`,d]]);export{l as __pageData,f as default};