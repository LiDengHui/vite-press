import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const i=JSON.parse(`{"title":"跨域是什么","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/交互协议/CORS-跨域同源策略.md","filePath":"浏览器/交互协议/CORS-跨域同源策略.md","lastUpdated":1754714200000}`),a={name:`浏览器/交互协议/CORS-跨域同源策略.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="跨域是什么" tabindex="-1"><strong>跨域是什么</strong> <a class="header-anchor" href="#跨域是什么" aria-label="Permalink to “跨域是什么”">​</a></h1><p><strong>跨域</strong>是指浏览器中的 <strong>同源策略</strong> 限制了不同源（domain、protocol、port）之间的请求与资源访问。在 Web 开发中，当一个网站的脚本尝试访问另一个网站的资源时，浏览器会基于 <strong>同源策略</strong>（Same-Origin Policy, SOP）来限制这种跨域请求。</p><h2 id="什么是同源策略" tabindex="-1"><strong>什么是同源策略？</strong> <a class="header-anchor" href="#什么是同源策略" aria-label="Permalink to “什么是同源策略？”">​</a></h2><p>同源策略要求 <strong>协议、域名和端口号必须完全相同</strong>，否则浏览器就认为是跨域请求。比如，下面这两个 URL 是不同源的：</p><ul><li><code>http://example.com/page1</code></li><li><code>https://example.com/page2</code></li></ul><p>虽然这两个 URL 使用相同的域名，但由于协议不同（HTTP vs HTTPS），它们被认为是不同源，因此不能直接进行交互。</p><h2 id="为什么会有跨域问题" tabindex="-1"><strong>为什么会有跨域问题？</strong> <a class="header-anchor" href="#为什么会有跨域问题" aria-label="Permalink to “为什么会有跨域问题？”">​</a></h2><p>同源策略的主要目的是 <strong>保护用户的隐私和安全</strong>。它防止了如下情况的发生：</p><ul><li>网站 A 的 JavaScript 可以访问网站 B 的数据，导致用户的敏感信息被窃取。</li><li>恶意网站通过脚本访问用户在其他网站上的私人数据（如银行账户、社交账户等）。</li></ul><h2 id="跨域的常见场景" tabindex="-1"><strong>跨域的常见场景</strong> <a class="header-anchor" href="#跨域的常见场景" aria-label="Permalink to “跨域的常见场景”">​</a></h2><ol><li><strong>AJAX 请求跨域</strong>：从一个域名的网页通过 JavaScript 发起请求到另一个域名（如：A 网站访问 B 网站的 API）。</li><li><strong>图片、脚本、样式等资源</strong>：一个网站的资源请求来自于另一个域名。</li><li><strong>iframe 嵌套</strong>：一个网站嵌入了来自其他域名的网页，并希望进行交互。</li></ol><h2 id="如何解决跨域问题" tabindex="-1"><strong>如何解决跨域问题</strong> <a class="header-anchor" href="#如何解决跨域问题" aria-label="Permalink to “如何解决跨域问题”">​</a></h2><p>有多种方法可以解决跨域问题，具体解决方案取决于应用的场景和要求。常见的跨域解决方法包括：</p><hr><h2 id="_1-cors-跨源资源共享" tabindex="-1"><strong>1. CORS（跨源资源共享）</strong> <a class="header-anchor" href="#_1-cors-跨源资源共享" aria-label="Permalink to “1. CORS（跨源资源共享）”">​</a></h2><p><strong>CORS（Cross-Origin Resource Sharing）</strong> 是一种浏览器技术，它允许服务器声明哪些源可以访问资源。通过设置 HTTP 头部（如 <code>Access-Control-Allow-Origin</code>），服务器可以告诉浏览器允许哪些来源进行跨域请求。</p><h3 id="如何实现-cors" tabindex="-1"><strong>如何实现 CORS</strong> <a class="header-anchor" href="#如何实现-cors" aria-label="Permalink to “如何实现 CORS”">​</a></h3><ul><li><strong>服务器端设置</strong>：服务器需要响应 HTTP 请求头，允许跨域请求。</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> *</span></span></code></pre></div><ul><li><strong>允许特定来源</strong>：你可以设置允许特定的源进行跨域访问，而不是允许所有来源。</li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://example.com</span></span></code></pre></div><ul><li><p><strong>其他常见的 CORS 头部</strong>：</p><ul><li><code>Access-Control-Allow-Methods</code>: 允许的方法，如 <code>GET, POST, PUT</code>.</li><li><code>Access-Control-Allow-Headers</code>: 允许请求携带的头部信息，如 <code>Content-Type</code>.</li><li><code>Access-Control-Allow-Credentials</code>: 是否允许发送凭据（cookies 或 HTTP 认证信息）。</li></ul></li></ul><h3 id="cors-具体工作流程" tabindex="-1"><strong>CORS 具体工作流程</strong> <a class="header-anchor" href="#cors-具体工作流程" aria-label="Permalink to “CORS 具体工作流程”">​</a></h3><ol><li>浏览器发起跨域请求，并发送一个带有 <code>Origin</code> 头部的请求。</li><li>服务器检查请求的 <code>Origin</code>，如果允许跨域，返回带有相应的 <code>Access-Control-Allow-Origin</code> 头部的响应。</li><li>浏览器根据响应头部来决定是否允许该请求的结果被使用。</li></ol><hr><h2 id="_2-jsonp-json-with-padding" tabindex="-1"><strong>2. JSONP（JSON with Padding）</strong> <a class="header-anchor" href="#_2-jsonp-json-with-padding" aria-label="Permalink to “2. JSONP（JSON with Padding）”">​</a></h2><p><strong>JSONP</strong> 是一种跨域请求的方法，主要用于 <strong>GET 请求</strong>，通过在页面中动态插入 <code>&lt;script&gt;</code> 标签来获取跨域的数据。JSONP 的核心思想是将请求的数据包装在一个函数中，脚本加载完成后立即调用该函数并传递数据。</p><h3 id="如何实现-jsonp" tabindex="-1"><strong>如何实现 JSONP</strong> <a class="header-anchor" href="#如何实现-jsonp" aria-label="Permalink to “如何实现 JSONP”">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/api/data?callback=handleData&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理返回的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="jsonp-的限制" tabindex="-1"><strong>JSONP 的限制</strong> <a class="header-anchor" href="#jsonp-的限制" aria-label="Permalink to “JSONP 的限制”">​</a></h3><ul><li><strong>只支持 GET 请求</strong>：因为 <code>&lt;script&gt;</code> 标签只支持 GET 请求，不能进行其他 HTTP 方法的跨域请求。</li><li><strong>安全问题</strong>：JSONP 的实现方式存在一定的安全隐患，因为它通过动态插入 <code>&lt;script&gt;</code> 标签来获取数据，这意味着可能会被恶意脚本攻击。</li></ul><hr><h2 id="_3-代理转发-proxy" tabindex="-1"><strong>3. 代理转发（Proxy）</strong> <a class="header-anchor" href="#_3-代理转发-proxy" aria-label="Permalink to “3. 代理转发（Proxy）”">​</a></h2><p>通过设置一个代理服务器来转发请求，可以解决前端请求的跨域问题。在开发过程中，可以使用代理服务器将请求发送到目标服务器，而不会受到浏览器的跨域限制。</p><h3 id="如何实现代理转发" tabindex="-1"><strong>如何实现代理转发</strong> <a class="header-anchor" href="#如何实现代理转发" aria-label="Permalink to “如何实现代理转发”">​</a></h3><ul><li><strong>前端开发环境中</strong>，你可以通过配置 <code>webpack</code>、<code>vite</code> 等开发工具的代理功能来解决跨域问题。</li></ul><p>例如，使用 <code>webpack</code> 配置代理：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://backend-server.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在这个配置中，所有发往 <code>/api</code> 的请求都会被代理到 <code>http://backend-server.com</code>，这样前端和后端的请求就不会受到跨域的限制。</p><hr><h2 id="_4-服务器端代理-后端代理" tabindex="-1"><strong>4. 服务器端代理（后端代理）</strong> <a class="header-anchor" href="#_4-服务器端代理-后端代理" aria-label="Permalink to “4. 服务器端代理（后端代理）”">​</a></h2><p>在生产环境中，可以通过 <strong>服务器端代理</strong> 来解决跨域问题。前端向自己的服务器发起请求，然后由服务器代理转发请求到实际的目标服务器。</p><h3 id="如何实现服务器端代理" tabindex="-1"><strong>如何实现服务器端代理</strong> <a class="header-anchor" href="#如何实现服务器端代理" aria-label="Permalink to “如何实现服务器端代理”">​</a></h3><ul><li><strong>Node.js 服务器端代理</strong>：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> axios</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;axios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://external-api.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error fetching data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Server is running on http://localhost:3000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在这个例子中，前端请求 <code>/api/data</code>，然后后端代理将请求转发到实际的目标 API。</p><hr><h2 id="_5-websocket" tabindex="-1"><strong>5. WebSocket</strong> <a class="header-anchor" href="#_5-websocket" aria-label="Permalink to “5. WebSocket”">​</a></h2><p>WebSocket 是一种在浏览器和服务器之间进行双向通信的协议，它不受同源策略的限制。因此，可以使用 WebSocket 来进行跨域通信。</p><h3 id="如何使用-websocket" tabindex="-1"><strong>如何使用 WebSocket</strong> <a class="header-anchor" href="#如何使用-websocket" aria-label="Permalink to “如何使用 WebSocket”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> socket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wss://example.com/socket&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onopen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Server!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Received message:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>WebSocket 建立连接后，浏览器和服务器之间可以自由地交换消息，而不受同源策略的限制。</p><hr><h2 id="_6-使用-iframe-和-postmessage" tabindex="-1"><strong>6. 使用 iframe 和 postMessage</strong> <a class="header-anchor" href="#_6-使用-iframe-和-postmessage" aria-label="Permalink to “6. 使用 iframe 和 postMessage”">​</a></h2><p>通过将一个页面嵌入到 <code>iframe</code> 中，并使用 <strong>postMessage</strong> 方法进行跨域通信。<code>postMessage</code> 是一种安全的方式，可以跨越源的限制来进行消息传递。</p><h3 id="如何使用-postmessage" tabindex="-1"><strong>如何使用 postMessage</strong> <a class="header-anchor" href="#如何使用-postmessage" aria-label="Permalink to “如何使用 postMessage”">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- parent.html --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iframe&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://other-domain.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">iframe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iframe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;iframe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    iframe.contentWindow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://other-domain.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// child.html (https://other-domain.com)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event.origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://your-domain.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 安全验证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Received message:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><ul><li><strong>跨域问题</strong> 是由于浏览器的同源策略（SOP）造成的，限制了不同源之间的交互。</li><li><strong>CORS</strong> 是目前最常用的跨域解决方案，通过设置响应头部来允许指定源进行跨域请求。</li><li><strong>JSONP</strong> 是通过 <code>&lt;script&gt;</code> 标签来实现跨域，只支持 <code>GET</code> 请求。</li><li><strong>代理转发</strong> 和 <strong>服务器端代理</strong> 通过中间层解决了跨域问题，前端和后端之间的请求不会受同源策略的限制。</li><li><strong>WebSocket</strong> 和 <strong>postMessage</strong> 是其他解决跨域的方案，通常用于实时通信和嵌套的 iframe 中。</li></ul><p>跨域问题的解决方法有很多，具体选择哪种方法取决于项目的需求、环境和安全考虑。</p>`,61)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};