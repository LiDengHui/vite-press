import{_ as i,c as o,o as r,a7 as t}from"./chunks/framework.CegclTe-.js";const p=JSON.parse('{"title":"领域模型","description":"","frontmatter":{},"headers":[],"relativePath":"其他/领域模型.md","filePath":"其他/领域模型.md","lastUpdated":1749438066000}'),n={name:"其他/领域模型.md"};function s(e,l,a,g,d,c){return r(),o("div",null,l[0]||(l[0]=[t('<h1 id="领域模型" tabindex="-1">领域模型 <a class="header-anchor" href="#领域模型" aria-label="Permalink to “领域模型”">​</a></h1><p>领域模型（Domain Model）是<strong>对特定业务领域（问题域）中的核心概念、实体、规则、关系和流程的抽象表示</strong>。它的核心目的是<strong>捕获业务本质，解决业务问题</strong>，而不是技术实现细节。</p><p>简单来说，领域模型就是<strong>用软件开发者能理解和实现的方式，精确地描述业务专家眼中的“业务世界”</strong>。它是业务知识在软件设计中的体现。</p><h3 id="核心特征和目标" tabindex="-1">核心特征和目标 <a class="header-anchor" href="#核心特征和目标" aria-label="Permalink to “核心特征和目标”">​</a></h3><ol><li><p><strong>反映业务现实：</strong></p><ul><li>它基于对业务领域的深入理解（通常通过与领域专家交流获得）。</li><li>包含该领域的关键概念（如“客户”、“订单”、“产品”、“库存”、“支付”、“航班”、“座位”等）。</li><li>描述这些概念之间的关系（如“一个客户可以有多个订单”，“一个订单包含多个产品项”）。</li><li>体现重要的业务规则和约束（如“订单总额不能超过客户的信用额度”，“机票一旦出票，24小时内可免费退票”）。</li></ul></li><li><p><strong>解决特定业务问题：</strong></p><ul><li>领域模型不是通用的，它聚焦于当前软件系统要解决的特定业务问题范围（即“限界上下文”）。</li><li>它关注的是业务的核心复杂性和挑战所在。</li></ul></li><li><p><strong>独立于技术实现：</strong></p><ul><li>领域模型主要描述“业务是什么”和“业务做什么”，而不是“如何存储数据”或“如何调用API”。</li><li>它应该与技术细节（如数据库表结构、框架选择、UI设计）解耦。虽然最终要映射到实现，但模型本身是业务逻辑的纯粹表达。</li></ul></li><li><p><strong>作为沟通的通用语言：</strong></p><ul><li>领域模型是业务专家、产品经理、架构师、开发人员、测试人员等不同角色之间沟通的基础。</li><li>模型中的术语（如“订单”、“预订状态”）成为项目团队共享的、具有明确含义的“通用语言”。</li></ul></li><li><p><strong>指导软件设计：</strong></p><ul><li>领域模型是软件设计的核心输入。系统的架构（尤其是领域层）、类设计、接口设计都应围绕领域模型展开。</li><li>它帮助识别出系统中的核心领域对象（实体、值对象）、它们的行为（领域服务、领域事件）以及它们之间的关系（聚合、仓储）。</li></ul></li></ol><h3 id="领域模型的主要组成部分" tabindex="-1">领域模型的主要组成部分 <a class="header-anchor" href="#领域模型的主要组成部分" aria-label="Permalink to “领域模型的主要组成部分”">​</a></h3><ul><li><strong>实体：</strong> 具有唯一标识符和生命周期（会变化）的对象。例如：<code>Customer</code> (客户ID唯一)、<code>Order</code> (订单号唯一)、<code>Bank Account</code> (账号唯一)。</li><li><strong>值对象：</strong> 描述某种特征但没有唯一标识符的对象，其属性组合定义其唯一性。它们通常是不可变的。例如：<code>Money</code> (金额 + 货币)、<code>Address</code> (省市区街道门牌号)、<code>Color</code> (RGB值)。</li><li><strong>聚合：</strong> <strong>一组紧密关联、作为一个整体进行操作的实体和值对象的集合。</strong> 它定义了数据修改的边界和一致性保证。聚合根是聚合内部唯一被外部直接引用的对象。</li><li><strong>领域服务：</strong> 封装不适合放在实体或值对象中的业务逻辑（通常是跨多个实体的操作或无状态操作）。例如：<code>TransferService</code> (处理两个账户之间的转账，涉及两个<code>Account</code>实体和金额计算)。</li><li><strong>仓储：</strong> 提供对聚合根进行持久化存储和检索的抽象接口。它屏蔽了底层数据库细节。</li><li><strong>领域事件：</strong> 表示在领域内发生的、其他部分可能感兴趣的重要事情。用于解耦系统不同部分或触发后续流程。例如：<code>OrderPlacedEvent</code> (订单已创建)、<code>PaymentReceivedEvent</code> (付款已收到)。</li><li><strong>工厂：</strong> 负责复杂对象或聚合创建逻辑的封装。</li></ul><h3 id="领域模型-vs-数据模型" tabindex="-1">领域模型 vs. 数据模型 <a class="header-anchor" href="#领域模型-vs-数据模型" aria-label="Permalink to “领域模型 vs. 数据模型”">​</a></h3><p>这是常见的混淆点：</p><ul><li><strong>领域模型：</strong><ul><li>关注<strong>业务行为、规则、概念和流程</strong>。</li><li>包含实体、值对象的行为（方法）。</li><li>目标是解决业务问题，体现业务逻辑。</li><li>设计围绕业务概念和用例。</li><li>强调充血模型（Rich Domain Model），即对象不仅包含数据，还包含相关行为。</li></ul></li><li><strong>数据模型：</strong><ul><li>关注<strong>数据的存储、结构和关系</strong>（通常是关系型数据库的表、列、主键、外键）。</li><li>主要描述数据结构。</li><li>目标是高效、一致地存储和查询数据。</li><li>设计围绕数据范式（如1NF, 2NF, 3NF）和查询性能。</li><li>通常导致贫血模型（Anemic Domain Model），即对象仅有数据属性，行为被抽离到服务层。</li></ul></li></ul><h3 id="为什么领域模型重要-价值" tabindex="-1">为什么领域模型重要？（价值） <a class="header-anchor" href="#为什么领域模型重要-价值" aria-label="Permalink to “为什么领域模型重要？（价值）”">​</a></h3><ol><li><strong>应对复杂性：</strong> 将复杂业务逻辑封装在模型中，使核心代码更清晰、更易维护。</li><li><strong>提升可维护性：</strong> 业务规则集中在模型内部，修改规则时影响范围更可控。</li><li><strong>改善沟通：</strong> 统一的“通用语言”极大减少了沟通误解。</li><li><strong>增强可测试性：</strong> 业务逻辑集中在领域层，可以独立于UI、数据库等进行单元测试。</li><li><strong>业务与技术对齐：</strong> 确保软件真正满足业务需求，解决业务问题，而不仅仅是实现技术功能。</li><li><strong>更好的设计：</strong> 驱动出更符合业务本质的面向对象设计。</li></ol><h3 id="如何构建领域模型" tabindex="-1">如何构建领域模型？ <a class="header-anchor" href="#如何构建领域模型" aria-label="Permalink to “如何构建领域模型？”">​</a></h3><ol><li><strong>深入理解业务：</strong> 与领域专家密切合作，进行大量访谈和研讨（事件风暴、用例分析等）。</li><li><strong>识别核心概念：</strong> 找出领域中的关键实体、值对象。</li><li><strong>定义关系：</strong> 明确对象之间的关系（一对一、一对多等）。</li><li><strong>明确业务规则：</strong> 梳理并记录重要的业务规则和约束。</li><li><strong>识别聚合：</strong> 划定数据修改的边界，确定聚合根。</li><li><strong>定义领域服务：</strong> 找出不适合放在实体/值对象中的操作。</li><li><strong>识别领域事件：</strong> 找出系统中值得关注的发生点。</li><li><strong>迭代精炼：</strong> 领域模型不是一蹴而就的，需要随着对业务理解的加深不断迭代和重构。</li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><p>领域模型是<strong>软件核心业务逻辑的灵魂</strong>。它是业务知识在代码中的直接映射，专注于解决特定业务领域的问题，使用该领域的语言，并独立于技术基础设施。构建一个好的领域模型是开发复杂业务系统成功的关键，也是领域驱动设计（DDD）的核心实践。它让软件不再是冷冰冰的代码堆砌，而是真正理解和解决业务问题的智能工具。</p>',16)]))}const u=i(n,[["render",s]]);export{p as __pageData,u as default};
