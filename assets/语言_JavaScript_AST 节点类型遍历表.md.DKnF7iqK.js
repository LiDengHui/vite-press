import{_ as t,c as i,o as a,a6 as e}from"./chunks/framework.mq8cK8gF.js";const c=JSON.parse('{"title":"AST 节点类型遍历表","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/AST 节点类型遍历表.md","filePath":"语言/JavaScript/AST 节点类型遍历表.md","lastUpdated":null}'),d={name:"语言/JavaScript/AST 节点类型遍历表.md"};function n(l,s,h,r,o,p){return a(),i("div",null,s[0]||(s[0]=[e(`<h1 id="ast-节点类型遍历表" tabindex="-1">AST 节点类型遍历表 <a class="header-anchor" href="#ast-节点类型遍历表" aria-label="Permalink to “AST 节点类型遍历表”">​</a></h1><p><a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree git</a></p><p>在 JavaScript 的抽象语法树（AST）中，节点类型（<code>type</code>）定义了代码结构的分类。不同解析器（如 Acorn、Babel、Esprima）遵循 <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">ESTree 规范</a>，但可能有扩展。以下是常见类型分类及示例：</p><hr><h2 id="一、核心类型" tabindex="-1">一、核心类型 <a class="header-anchor" href="#一、核心类型" aria-label="Permalink to “一、核心类型”">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>Program</code></td><td>整个程序的根节点</td><td><code>const a = 1;</code></td></tr><tr><td><code>Identifier</code></td><td>标识符（变量名/函数名）</td><td><code>const </code><strong><code>a</code></strong><code> = 1;</code></td></tr><tr><td><code>Literal</code></td><td>字面量值</td><td><code>const a = </code><strong><code>1</code></strong><code>;</code></td></tr><tr><td><code>ExpressionStatement</code></td><td>表达式语句</td><td><code>a = 5;</code></td></tr><tr><td><code>BlockStatement</code></td><td>代码块（<code>{}</code> 包裹）</td><td><code>{ console.log(a); }</code></td></tr></tbody></table><hr><h2 id="二、声明与作用域" tabindex="-1">二、声明与作用域 <a class="header-anchor" href="#二、声明与作用域" aria-label="Permalink to “二、声明与作用域”">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>VariableDeclaration</code></td><td>变量声明 (<code>var</code>/<code>let</code>/<code>const</code>)</td><td><code>const a = 1;</code></td></tr><tr><td><code>FunctionDeclaration</code></td><td>函数声明</td><td><code>function foo() {}</code></td></tr><tr><td><code>ClassDeclaration</code></td><td>类声明</td><td><code>class Foo {}</code></td></tr><tr><td><code>ImportDeclaration</code></td><td>ES6 导入</td><td><code>import fs from &#39;fs&#39;;</code></td></tr><tr><td><code>ExportDefaultDeclaration</code></td><td>默认导出</td><td><code>export default foo;</code></td></tr></tbody></table><hr><h2 id="三、表达式" tabindex="-1">三、表达式 <a class="header-anchor" href="#三、表达式" aria-label="Permalink to “三、表达式”">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>CallExpression</code></td><td>函数调用</td><td><code>foo()</code></td></tr><tr><td><code>MemberExpression</code></td><td>成员访问 (<code>obj.prop</code>/<code>obj[&#39;prop&#39;]</code>)</td><td><code>obj.prop</code></td></tr><tr><td><code>BinaryExpression</code></td><td>二元运算 (<code>+</code>, <code>&gt;</code>, <code>===</code> 等)</td><td><code>a + b</code></td></tr><tr><td><code>UnaryExpression</code></td><td>一元运算 (<code>!</code>, <code>-</code>, <code>typeof</code>)</td><td><code>!true</code></td></tr><tr><td><code>ArrowFunctionExpression</code></td><td>箭头函数</td><td><code>() =&gt; {}</code></td></tr><tr><td><code>TemplateLiteral</code></td><td>模板字符串</td><td><code>\`Hello \${name}\`</code></td></tr><tr><td><code>LogicalExpression</code></td><td>逻辑运算 (<code>&amp;&amp;</code>/\`</td><td></td></tr></tbody></table><hr><h2 id="四、控制流" tabindex="-1">四、控制流 <a class="header-anchor" href="#四、控制流" aria-label="Permalink to “四、控制流”">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>IfStatement</code></td><td><code>if</code> 语句</td><td><code>if (a) { ... }</code></td></tr><tr><td><code>ForStatement</code></td><td><code>for</code> 循环</td><td><code>for (let i=0; i&lt;5; i++)</code></td></tr><tr><td><code>WhileStatement</code></td><td><code>while</code> 循环</td><td><code>while (true) { ... }</code></td></tr><tr><td><code>SwitchStatement</code></td><td><code>switch</code> 语句</td><td><code>switch (a) { ... }</code></td></tr><tr><td><code>ReturnStatement</code></td><td><code>return</code> 语句</td><td><code>return a;</code></td></tr><tr><td><code>ThrowStatement</code></td><td><code>throw</code> 语句</td><td><code>throw new Error();</code></td></tr><tr><td><code>TryStatement</code></td><td><code>try/catch</code> 块</td><td><code>try { ... } catch(e) {}</code></td></tr></tbody></table><hr><h2 id="五、其他常见类型" tabindex="-1">五、其他常见类型 <a class="header-anchor" href="#五、其他常见类型" aria-label="Permalink to “五、其他常见类型”">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>描述</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>ObjectExpression</code></td><td>对象字面量</td><td><code>{ name: &#39;Alice&#39; }</code></td></tr><tr><td><code>ArrayExpression</code></td><td>数组字面量</td><td><code>[1, 2, 3]</code></td></tr><tr><td><code>AssignmentExpression</code></td><td>赋值操作 (<code>=</code>, <code>+=</code> 等)</td><td><code>a = 10</code></td></tr><tr><td><code>NewExpression</code></td><td><code>new</code> 实例化</td><td><code>new Date()</code></td></tr><tr><td><code>ThisExpression</code></td><td><code>this</code> 关键字</td><td><code>this.name</code></td></tr><tr><td><code>SpreadElement</code></td><td>展开运算符 (<code>...</code>)</td><td><code>[...arr]</code></td></tr></tbody></table><hr><h2 id="六、工具与扩展" tabindex="-1">六、工具与扩展 <a class="header-anchor" href="#六、工具与扩展" aria-label="Permalink to “六、工具与扩展”">​</a></h2><ol><li><strong>查看完整类型列表</strong>： <ul><li>使用 <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">AST Explorer</a> 实时解析代码。</li><li>Babel 类型文档：<a href="https://babeljs.io/docs/en/babel-types" target="_blank" rel="noreferrer">@babel/types</a></li></ul></li><li><strong>解析器差异</strong>： <ul><li>Babel：支持实验性语法（如装饰器）。</li><li>Acorn：轻量级，符合 ESTree。</li><li>TypeScript 解析器：额外支持类型注解节点（如 <code>TSTypeAnnotation</code>）。</li></ul></li></ol><hr><h2 id="示例-ast-片段" tabindex="-1">示例 AST 片段 <a class="header-anchor" href="#示例-ast-片段" aria-label="Permalink to “示例 AST 片段”">​</a></h2><div class="language-json5"><button title="Copy Code" class="copy"></button><span class="lang">json5</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码: const sum = (a, b) =&gt; a + b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Program&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            declarations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;VariableDeclarator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ArrowFunctionExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                        body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                            type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;BinaryExpression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                            operator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                            left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                            right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Identifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                                name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,24)]))}const E=t(d,[["render",n]]);export{c as __pageData,E as default};
