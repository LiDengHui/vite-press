import{_ as e,c as o,o as p,a7 as n}from"./chunks/framework.BQO8qXET.js";const d=JSON.parse('{"title":"ES10 bigInt","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/es特性/es10.md","filePath":"语言/JavaScript/es特性/es10.md","lastUpdated":1750738239000}'),a={name:"语言/JavaScript/es特性/es10.md"};function r(s,t,l,i,c,g){return p(),o("div",null,t[0]||(t[0]=[n('<h1 id="es10-bigint" tabindex="-1">ES10 bigInt <a class="header-anchor" href="#es10-bigint" aria-label="Permalink to “ES10 bigInt”">​</a></h1><p>// Flat flatMap()</p><p>flat 拉平数组，去除空项 const arr = [1,2,3,[4,5]] const arr1 = [1,2,3,[4,5,[6]]] console.log(arr.flat()) console.log(arr1.flat(num)) console.log(arr1.flat(Infinity))</p><p>const arr1 = [1,2,3,4]</p><p>console.log(arr1.map(x=&gt;[x<em>2])) console.log(arr1.flatMap(x=&gt;[x</em>2]))</p><p><a href="//Object.formEntries" target="_blank" rel="noreferrer">//Object.formEntries</a>() =&gt; 对象自身可枚举属性 for...in</p><p>const map = new Map([&quot;name&quot;,&quot;-灯&quot;], [&quot;address&quot;,&quot;bejing&quot;]); console.log(Object.formEntries(map)) console.log(Object.entries);Ide</p><p>String.prototype.matchAll 返回包含所有匹配正则表达式及分组捕获迭代器</p><p>const str = &quot;yideng xuetang xuetang&quot;;</p><p>const reg= /xue*/g</p><p>while(matches = reg.exec(str)!== null) { console.log(<code>${matches[0]}-${reg.lastIndex}</code>) }</p><p>let matches2 = str.matchAll(reg)</p><p>const reg = /y(i)(deng(\\d?))/g</p><p>// trimStart // trimEnd</p><p>// Symbol.prototype.description</p><p>const sym = Symbol(&quot;描述&quot;) console.log(String(sym)) console.log(sym.description);</p><p>Catch 参数可以省略</p><p>// 之前</p><p>try {</p><p>} catch(e) {</p><p>}</p><p>try {</p><p>} catch{</p><p>}</p><h2 id="行分割符和段分割符号" tabindex="-1">行分割符和段分割符号 <a class="header-anchor" href="#行分割符和段分割符号" aria-label="Permalink to “行分割符和段分割符号”">​</a></h2><p>JSON.parse JSON是ECMAScript的一个子集</p><p>// 草案 解决一个问题</p><p>const json = &#39;{&quot;name&quot;: &quot;yideng&quot;\\nxuetang}&#39;</p><p>console.log(json)</p><p>JSON.parse(json);</p><p>JSON.stringify()</p><p>字符U+D800 到 U+DFFF处理</p><p>U+2028 行分隔符 U+2029 段分割符</p><p>JSON.stringify(&#39;\\UDEAD&#39;);</p><p>Array.prototype.sort()</p><p>小于10 插入排序 快速排序 O&lt;n^2&gt;</p><p>新的v8 TimSort() n(nlogn)</p><p>const arr = [ {name: &#39;w&#39;, age:18} {name: &#39;d&#39;, age:1} {name: &#39;yideng &#39;, age:8} {name: &#39;x&#39;, age:108} {name: &#39;j&#39;, age:198} ]</p><p>arr.sort((a,b)=&gt; a.age-b.age);</p><p>Function.string()</p><p>Object.prototype.toString();</p><p>function /<em>1213</em>/ foo /<em>123</em>/() { }</p><p>console.log(foo.toString())</p><p>// BigInt  任意进度整数 第七种基本数据类型</p><p>2^53-1</p><p>let num = 1n;</p><p>// 标准化的globalThis 对象</p><p>const getGlobal = function () { if(typeof self != &quot;undefined) return self; if(typeof window != &quot;undefined) return window; if(typeof gloabal != &quot;unefined&quot;) reutrn global;</p><p>throw new Error(); }</p><p>// 在任何属性中打印this consolelog(globalThis)</p>',50)]))}const u=e(a,[["render",r]]);export{d as __pageData,u as default};
