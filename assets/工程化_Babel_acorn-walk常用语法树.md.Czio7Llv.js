import{_ as i,c as a,o as e,a7 as n}from"./chunks/framework.DDkSvsBP.js";const E=JSON.parse('{"title":"acorn-walk 常用语法树","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Babel/acorn-walk常用语法树.md","filePath":"工程化/Babel/acorn-walk常用语法树.md","lastUpdated":1750738239000}'),t={name:"工程化/Babel/acorn-walk常用语法树.md"};function l(h,s,k,p,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="acorn-walk-常用语法树" tabindex="-1">acorn-walk 常用语法树 <a class="header-anchor" href="#acorn-walk-常用语法树" aria-label="Permalink to “acorn-walk 常用语法树”">​</a></h1><p><code>acorn-walk</code> 是 Acorn 的一个子模块，用于<strong>遍历和处理 JavaScript 抽象语法树（AST）</strong>，它提供了一些工具函数，使我们可以方便地处理 AST 节点。</p><hr><h1 id="🌳-常用函数及其作用" tabindex="-1">🌳 常用函数及其作用 <a class="header-anchor" href="#🌳-常用函数及其作用" aria-label="Permalink to “🌳 常用函数及其作用”">​</a></h1><h2 id="_1-simple-node-visitors-basevisitor-state" tabindex="-1">1. <code>simple(node, visitors, baseVisitor?, state?)</code> <a class="header-anchor" href="#_1-simple-node-visitors-basevisitor-state" aria-label="Permalink to “1. simple(node, visitors, baseVisitor?, state?)”">​</a></h2><blockquote><p>最常用的函数，用于简单遍历 AST。</p></blockquote><h3 id="参数说明" tabindex="-1">参数说明： <a class="header-anchor" href="#参数说明" aria-label="Permalink to “参数说明：”">​</a></h3><ul><li><code>node</code>：AST 根节点。</li><li><code>visitors</code>：一个对象，键是节点类型（如 <code>&#39;VariableDeclaration&#39;</code>），值是对应的回调函数。</li><li><code>baseVisitor</code>（可选）：自定义的基础遍历逻辑，一般用默认的即可。</li><li><code>state</code>（可选）：遍历过程中传递的共享状态对象。</li></ul><h3 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to “示例：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parse } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { simple } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;let x = 42&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  VariableDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Found a variable declaration:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h3 id="_2-ancestor-node-visitors-basevisitor-state" tabindex="-1">2. <code>ancestor(node, visitors, baseVisitor?, state?)</code> <a class="header-anchor" href="#_2-ancestor-node-visitors-basevisitor-state" aria-label="Permalink to “2. ancestor(node, visitors, baseVisitor?, state?)”">​</a></h3><blockquote><p>类似 <code>simple</code>，但回调函数中可以访问<strong>父节点数组</strong>，适合需要知道上下文信息的场景。</p></blockquote><h3 id="回调签名" tabindex="-1">回调签名： <a class="header-anchor" href="#回调签名" aria-label="Permalink to “回调签名：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node, state, ancestors)</span></span></code></pre></div><h3 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to “示例：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ancestor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ancestor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ancestors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Identifier:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ancestors:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ancestors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.type));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_3-full-node-callback-basevisitor-state" tabindex="-1">3. <code>full(node, callback, baseVisitor?, state?)</code> <a class="header-anchor" href="#_3-full-node-callback-basevisitor-state" aria-label="Permalink to “3. full(node, callback, baseVisitor?, state?)”">​</a></h2><blockquote><p>对每个节点调用回调，不区分节点类型，适合做全局扫描或调试。</p></blockquote><h3 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to “示例：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { full } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Node type:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node.type);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_4-fullancestor-node-callback-basevisitor-state" tabindex="-1">4. <code>fullAncestor(node, callback, baseVisitor?, state?)</code> <a class="header-anchor" href="#_4-fullancestor-node-callback-basevisitor-state" aria-label="Permalink to “4. fullAncestor(node, callback, baseVisitor?, state?)”">​</a></h2><blockquote><p>结合 <code>full</code> 和 <code>ancestor</code>，对每个节点都调用回调，并提供 ancestors。</p></blockquote><h3 id="示例-3" tabindex="-1">示例： <a class="header-anchor" href="#示例-3" aria-label="Permalink to “示例：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fullAncestor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fullAncestor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ancestors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Node:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node.type);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ancestors:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ancestors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.type));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h2 id="_5-findnodeat-node-start-end-test-basevisitor" tabindex="-1">5. <code>findNodeAt(node, start, end, test?, baseVisitor?)</code> <a class="header-anchor" href="#_5-findnodeat-node-start-end-test-basevisitor" aria-label="Permalink to “5. findNodeAt(node, start, end, test?, baseVisitor?)”">​</a></h2><blockquote><p>找出特定 <code>start</code> 和 <code>end</code> 范围内符合条件的节点。</p></blockquote><h3 id="示例-4" tabindex="-1">示例： <a class="header-anchor" href="#示例-4" aria-label="Permalink to “示例：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { findNodeAt } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findNodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Identifier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.node.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;x&#39;</span></span></code></pre></div><hr><h2 id="_6-findnodearound-node-pos-test-basevisitor" tabindex="-1">6. <code>findNodeAround(node, pos, test?, baseVisitor?)</code> <a class="header-anchor" href="#_6-findnodearound-node-pos-test-basevisitor" aria-label="Permalink to “6. findNodeAround(node, pos, test?, baseVisitor?)”">​</a></h2><blockquote><p>找出在某个位置周围（包含）的符合条件的节点。</p></blockquote><hr><h2 id="_7-findnodeafter-node-pos-test-basevisitor" tabindex="-1">7. <code>findNodeAfter(node, pos, test?, baseVisitor?)</code> <a class="header-anchor" href="#_7-findnodeafter-node-pos-test-basevisitor" aria-label="Permalink to “7. findNodeAfter(node, pos, test?, baseVisitor?)”">​</a></h2><blockquote><p>找出在某个位置之后的符合条件的节点。</p></blockquote><hr><h2 id="_8-make" tabindex="-1">8. \`make({ <a class="header-anchor" href="#_8-make" aria-label="Permalink to “8. \`make({”">​</a></h2><p>TypeName(node, state, c) { ... } })\`</p><blockquote><p>构造一个自定义 base visitor，可以用于覆盖默认的遍历方式。</p></blockquote><hr><h2 id="✅-常见用途" tabindex="-1">✅ 常见用途 <a class="header-anchor" href="#✅-常见用途" aria-label="Permalink to “✅ 常见用途”">​</a></h2><ul><li>静态代码分析（如检测 console.log）</li><li>构建代码转译工具（如 Babel 插件）</li><li>实现 Linter 规则</li><li>编辑器中的语法高亮或跳转功能</li></ul><hr>`,46)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
