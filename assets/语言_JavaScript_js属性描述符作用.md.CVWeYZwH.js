import{_ as i,c as a,o as t,a7 as n}from"./chunks/framework.t6yJIVLk.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/js属性描述符作用.md","filePath":"语言/JavaScript/js属性描述符作用.md","lastUpdated":1751812369000}'),l={name:"语言/JavaScript/js属性描述符作用.md"};function e(h,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="javascript-属性描述符-property-descriptors-详解" tabindex="-1">JavaScript 属性描述符(Property Descriptors)详解 <a class="header-anchor" href="#javascript-属性描述符-property-descriptors-详解" aria-label="Permalink to “JavaScript 属性描述符(Property Descriptors)详解”">​</a></h2><p>属性描述符是 JavaScript 中用于定义或修改对象属性行为的元数据对象，它提供了对属性更精细的控制能力。</p><h2 id="属性描述符的意义" tabindex="-1">属性描述符的意义 <a class="header-anchor" href="#属性描述符的意义" aria-label="Permalink to “属性描述符的意义”">​</a></h2><ol><li><strong>精细化控制属性行为</strong>：超越简单的值存储，控制属性的可写性、可枚举性等</li><li><strong>数据封装</strong>：可以创建&quot;私有&quot;属性（虽然不是真正的私有）</li><li><strong>元编程能力</strong>：可以在运行时动态修改属性行为</li><li><strong>兼容性处理</strong>：用于实现 getter/setter，兼容旧代码</li><li><strong>框架/库开发基础</strong>：Vue.js 等框架的响应式系统基于属性描述符实现</li></ol><h2 id="属性描述符的两种类型" tabindex="-1">属性描述符的两种类型 <a class="header-anchor" href="#属性描述符的两种类型" aria-label="Permalink to “属性描述符的两种类型”">​</a></h2><h2 id="_1-数据描述符-data-descriptor" tabindex="-1">1. 数据描述符（Data Descriptor） <a class="header-anchor" href="#_1-数据描述符-data-descriptor" aria-label="Permalink to “1. 数据描述符（Data Descriptor）”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: any,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 属性值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  writable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否可修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否可枚举</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  configurable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否可配置/删除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-存取描述符-accessor-descriptor" tabindex="-1">2. 存取描述符（Accessor Descriptor） <a class="header-anchor" href="#_2-存取描述符-accessor-descriptor" aria-label="Permalink to “2. 存取描述符（Accessor Descriptor）”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {},  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取属性值函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {},  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置属性值函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  enumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否可枚举</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  configurable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: boolean </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否可配置/删除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="各参数具体作用" tabindex="-1">各参数具体作用 <a class="header-anchor" href="#各参数具体作用" aria-label="Permalink to “各参数具体作用”">​</a></h2><h2 id="通用参数-两种描述符共有" tabindex="-1">通用参数（两种描述符共有） <a class="header-anchor" href="#通用参数-两种描述符共有" aria-label="Permalink to “通用参数（两种描述符共有）”">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td><code>enumerable</code></td><td>boolean</td><td><code>false</code></td><td>控制属性是否出现在 <code>for...in</code> 循环和 <code>Object.keys()</code> 中</td></tr><tr><td><code>configurable</code></td><td>boolean</td><td><code>false</code></td><td>控制属性描述符能否被修改，属性能否被删除</td></tr></tbody></table><h2 id="数据描述符特有参数" tabindex="-1">数据描述符特有参数 <a class="header-anchor" href="#数据描述符特有参数" aria-label="Permalink to “数据描述符特有参数”">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td><code>value</code></td><td>any</td><td><code>undefined</code></td><td>属性的值</td></tr><tr><td><code>writable</code></td><td>boolean</td><td><code>false</code></td><td>控制属性值是否可以被赋值运算符(<code>=</code>)改变</td></tr></tbody></table><h2 id="存取描述符特有参数" tabindex="-1">存取描述符特有参数 <a class="header-anchor" href="#存取描述符特有参数" aria-label="Permalink to “存取描述符特有参数”">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td><code>get</code></td><td>Function</td><td><code>undefined</code></td><td>获取属性值时调用的函数，返回值将作为属性值</td></tr><tr><td><code>set</code></td><td>Function</td><td><code>undefined</code></td><td>设置属性值时调用的函数，接收新值作为参数</td></tr></tbody></table><h2 id="实际应用示例" tabindex="-1">实际应用示例 <a class="header-anchor" href="#实际应用示例" aria-label="Permalink to “实际应用示例”">​</a></h2><h2 id="_1-创建不可变属性" tabindex="-1">1. 创建不可变属性 <a class="header-anchor" href="#_1-创建不可变属性" aria-label="Permalink to “1. 创建不可变属性”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;constant&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.constant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 静默失败（严格模式会报错）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.constant); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 42</span></span></code></pre></div><h2 id="_2-创建私有效果属性" tabindex="-1">2. 创建私有效果属性 <a class="header-anchor" href="#_2-创建私有效果属性" aria-label="Permalink to “2. 创建私有效果属性”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _private </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _private;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (newVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) _private </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_3-动态计算属性" tabindex="-1">3. 动态计算属性 <a class="header-anchor" href="#_3-动态计算属性" aria-label="Permalink to “3. 动态计算属性”">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> circle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  radius: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circle, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;area&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.radius;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circle.area); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 78.53981633974483</span></span></code></pre></div><h2 id="重要注意事项" tabindex="-1">重要注意事项 <a class="header-anchor" href="#重要注意事项" aria-label="Permalink to “重要注意事项”">​</a></h2><ol><li><p><strong>默认值与普通属性的区别</strong>：</p><ul><li>通过赋值创建的属性：<code>enumerable</code>、<code>configurable</code>、<code>writable</code> 默认为 <code>true</code></li><li>通过 <code>defineProperty</code> 创建的属性：这些属性默认为 <code>false</code></li></ul></li><li><p><strong>configurable 的限制</strong>：</p><ul><li>一旦设为 <code>false</code>，就不能再改为 <code>true</code></li><li>不能修改属性类型（数据属性和存取属性之间转换）</li></ul></li><li><p><strong>性能考虑</strong>：</p><ul><li>存取描述符比数据描述符有更高的性能开销</li><li>频繁访问的属性建议使用数据描述符</li></ul></li></ol><p>属性描述符是 JavaScript 对象系统的强大特性，合理使用可以实现高度定制的对象行为，是高级 JavaScript 编程的重要工具。</p>`,26)]))}const o=i(l,[["render",e]]);export{c as __pageData,o as default};
