import{_ as a,c as i,o as e,a7 as n}from"./chunks/framework.BsB_8gFK.js";const c=JSON.parse('{"title":"String Padding","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/es特性/es8.md","filePath":"语言/JavaScript/es特性/es8.md","lastUpdated":1750738239000}'),t={name:"语言/JavaScript/es特性/es8.md"};function r(h,s,l,p,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h2 id="es8" tabindex="-1">ES8 <a class="header-anchor" href="#es8" aria-label="Permalink to “ES8”">​</a></h2><p>// Async/Await</p><p>// next =&gt; Promise</p><p>// 异步代码</p><p>// 1. 嵌套回掉 // 2. Promise // 3. Generators</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="promsie-错误处理" tabindex="-1">promsie 错误处理 <a class="header-anchor" href="#promsie-错误处理" aria-label="Permalink to “promsie 错误处理”">​</a></h2><h2 id="await-的异步执行" tabindex="-1">await 的异步执行 <a class="header-anchor" href="#await-的异步执行" aria-label="Permalink to “await 的异步执行”">​</a></h2><h2 id="object-values-vs-object-keys-继承来的没有办法" tabindex="-1">Object.values() vs Object.keys() // 继承来的没有办法 <a class="header-anchor" href="#object-values-vs-object-keys-继承来的没有办法" aria-label="Permalink to “Object.values() vs Object.keys() // 继承来的没有办法”">​</a></h2><h2 id="object-entries-vs-for-in" tabindex="-1">Object.entries() vs for...in <a class="header-anchor" href="#object-entries-vs-for-in" aria-label="Permalink to “Object.entries() vs for...in”">​</a></h2><h1 id="string-padding" tabindex="-1">String Padding <a class="header-anchor" href="#string-padding" aria-label="Permalink to “String Padding”">​</a></h1><ol><li>String.prototype.padStart(targetLength, [padString])</li><li>String.prototype.padEnd()</li></ol><h1 id="结尾允许逗号" tabindex="-1">结尾允许逗号 <a class="header-anchor" href="#结尾允许逗号" aria-label="Permalink to “结尾允许逗号”">​</a></h1><h1 id="object-getownpropertydescriptors-对象描述符" tabindex="-1">Object.getOwnPropertyDescriptors(); // 对象描述符 <a class="header-anchor" href="#object-getownpropertydescriptors-对象描述符" aria-label="Permalink to “Object.getOwnPropertyDescriptors(); // 对象描述符”">​</a></h1><h1 id="sharedarraybuffer-与-atomics-多线程功能" tabindex="-1">SharedArrayBuffer 与 Atomics // 多线程功能 <a class="header-anchor" href="#sharedarraybuffer-与-atomics-多线程功能" aria-label="Permalink to “SharedArrayBuffer 与 Atomics // 多线程功能”">​</a></h1><p>共享内存，把多线程引入js</p><p>JS主线程， web-worker线程</p><p>// postMessage();</p><p>多线程 竞争 Atomics</p><p>Atomics.load(SharedArrayBuffer, position) Atomics.store(SharedArrayBuffer, position, newValue) //写入值 exchange() 返回替换的值 Atomics.wait(arrBuffer, 11, 11，2000) 休眠 Atomics.notify(共享视图数组，位置， 进程数) Atomics.add(intArrBuffer, index,value) sub() and,or,xor compareExchange(intArrBuffer,12,13,33)</p>`,20)]))}const E=a(t,[["render",r]]);export{c as __pageData,E as default};
