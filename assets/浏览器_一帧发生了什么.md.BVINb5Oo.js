import{_ as a,c as r,o as i,a7 as t,aO as l}from"./chunks/framework.BsB_8gFK.js";const u=JSON.parse('{"title":"一帧发生了什么","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/一帧发生了什么.md","filePath":"浏览器/一帧发生了什么.md","lastUpdated":1749107541000}'),o={name:"浏览器/一帧发生了什么.md"};function s(n,e,c,h,d,p){return i(),r("div",null,e[0]||(e[0]=[t('<h1 id="一帧发生了什么" tabindex="-1">一帧发生了什么 <a class="header-anchor" href="#一帧发生了什么" aria-label="Permalink to “一帧发生了什么”">​</a></h1><h2 id="浏览器渲染图" tabindex="-1">浏览器渲染图 <a class="header-anchor" href="#浏览器渲染图" aria-label="Permalink to “浏览器渲染图”">​</a></h2><p><img src="'+l+'" alt="" data-zoomable="true" loading="lazy"></p><ol><li>Vsync 接收到Vsync信号</li><li>Input event handlers之前Compositor Thread接收到的用户UI交互输入在这一刻会被传入给主线程，触发相关event的回调</li><li>requestAnimationFrame : 图中的红线的意思是你可能会在JS里Force Layout，也就是我们说的访问了scrollWidth、clientHeight、ComputedStyle等触发了强制重排，导致Recalc Styles和Layout前移到代码执行过程当中。</li><li>parse HTML : 如果有DOM变动，那么会有解析DOM的这一过程。</li><li>Recalculate Styles: 如果你在JS执行过程中修改了样式或者改动了DOM，那么便会执行这一步，重新计算指定元素及其子元素的样式。</li><li>Layout: 重排reflow。如果有涉及元素位置信息的DOM改动或者样式改动，那么浏览器会重新计算所有元素的位置、尺寸信息</li><li>update layer tree : 更新Render Layer的层叠排序关系</li><li>Paint : 其实Paint有两步，第一步是记录要执行哪些绘画调用，第二步才是执行这些绘画调用。第一步只是把所需要进行的操作记录序列化进一个叫做SkPicture的数据结构里</li><li>Composite : 主线程里的这一步会计算出每个Graphics Layers的合成时所需要的data，包括位移（Translation）、缩放（Scale）、旋转（Rotation）、Alpha 混合等操作的参数，并把这些内容传给Compositor Thread</li><li>Raster Scheduled and Rasterize: 第8步生成的SkPicture records在这个阶段被执行。</li><li>commit: <ol><li>如果是Software Rasterization，所有tile的光栅化完成后Compositor Thread会commit通知GPU Thread，于是所有的tile的位图都会作为纹理都会被GPU Thread上传到GPU里</li><li>如果是使用GPU 的Hardware Rasterization，那么此时纹理都已经在GPU中。接下来，GPU Thread会调用平台对应的3D API(windows下是<a href="http://baike.baidu.com/link?url=iukraGeY0dHYga0DQD-SbwQ9az37FcXwzhd0j_cFsGTEiKjOa8Q74T9i-I11webzQ1HtjjVDq_zYugxMDsuRUa" target="_blank" rel="noreferrer">D3D</a>，其他平台都是GL)，把所有纹理绘制到最终的一个位图里，从而完成纹理的合并。<br> 同时，非常关键的一点：在纹理的合并时，借助于3D API的相关合成参数，可以在合并前对纹理transformations（也就是之前提到的位移、旋转、缩放、alpha通道改变等等操作），先变形再合并。合并完成之后就可以将内容呈现到屏幕上了。</li></ol></li></ol><h2 id="浏览器中的进程" tabindex="-1">浏览器中的进程 <a class="header-anchor" href="#浏览器中的进程" aria-label="Permalink to “浏览器中的进程”">​</a></h2><h3 id="renderer-process" tabindex="-1">Renderer Process <a class="header-anchor" href="#renderer-process" aria-label="Permalink to “Renderer Process”">​</a></h3><p>浏览器一个标签页的周边容器</p><ol><li><p>Compositor Thread 负责接收浏览器传来的垂直同步信号,也负责接收从OS传来的用户交互, 比如滚动、输入、点击、鼠标移动等等,从而唤起 Main Thread 执行相关操作</p></li><li><p>Main Thread 某段 JS的执行, Recalculate Style, Update Layer tree, Paint, Composite layers 等等</p></li><li><p>Compositor Tile Worker 专门处理 til的Rasterization(光栅化)</p></li></ol><h3 id="gpu-process" tabindex="-1">GPU process <a class="header-anchor" href="#gpu-process" aria-label="Permalink to “GPU process”">​</a></h3><p>为浏览器所有的标签页和周边进程提供服务的单个进程</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to “参考文档”">​</a></h2><p><a href="https://github.com/hushicai/hushicai.github.io/issues/5" target="_blank" rel="noreferrer">https://github.com/hushicai/hushicai.github.io/issues/5</a><a href="https://juejin.cn/post/6844903506059477000" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903506059477000</a><a href="http://dev.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome" target="_blank" rel="noreferrer">http://dev.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome</a></p>',12)]))}const _=a(o,[["render",s]]);export{u as __pageData,_ as default};
