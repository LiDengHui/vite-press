import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.Cyk5UgWo.js";const i=JSON.parse(`{"title":"window 对象常用事件大全","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/window的事件.md","filePath":"浏览器/window的事件.md","lastUpdated":1751812369000}`),a={name:`浏览器/window的事件.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="window-对象常用事件大全" tabindex="-1"><code>window</code> 对象常用事件大全 <a class="header-anchor" href="#window-对象常用事件大全" aria-label="Permalink to “window 对象常用事件大全”">​</a></h1><h2 id="_1-页面生命周期事件" tabindex="-1">1. 页面生命周期事件 <a class="header-anchor" href="#_1-页面生命周期事件" aria-label="Permalink to “1. 页面生命周期事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>load</code></td><td>窗口及所有资源（图片、脚本等）加载完成时触发。</td><td><code>window.addEventListener(&#39;load&#39;, () =&gt; console.log(&#39;页面加载完毕&#39;));</code></td></tr><tr><td><code>DOMContentLoaded</code></td><td>HTML 解析完成（无需等待样式/图片）时触发。</td><td><code>document.addEventListener(&#39;DOMContentLoaded&#39;, initApp);</code></td></tr><tr><td><code>beforeunload</code></td><td>窗口即将关闭/刷新时触发（可提示用户保存数据）。</td><td><code>window.addEventListener(&#39;beforeunload&#39;, (e) =&gt; e.returnValue = &#39;确认离开？&#39;);</code></td></tr><tr><td><code>unload</code></td><td>窗口关闭或导航离开时触发（部分操作受限）。</td><td><code>window.addEventListener(&#39;unload&#39;, sendAnalytics);</code></td></tr><tr><td><code>pageshow</code> / <code>pagehide</code></td><td>页面显示/隐藏时触发（包括从缓存恢复）。</td><td><code>window.addEventListener(&#39;pageshow&#39;, restoreState);</code></td></tr><tr><td><code>visibilitychange</code></td><td>页面可见性变化时触发（通过 <code>document.hidden</code> 判断）。</td><td><code>document.addEventListener(&#39;visibilitychange&#39;, checkTabFocus);</code></td></tr></tbody></table><h2 id="_2-窗口与视图事件" tabindex="-1">2. 窗口与视图事件 <a class="header-anchor" href="#_2-窗口与视图事件" aria-label="Permalink to “2. 窗口与视图事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>resize</code></td><td>窗口大小改变时触发。</td><td><code>window.addEventListener(&#39;resize&#39;, debounce(handleResize, 200));</code></td></tr><tr><td><code>scroll</code></td><td>窗口滚动时触发（需防抖优化）。</td><td><code>window.addEventListener(&#39;scroll&#39;, trackScrollPosition);</code></td></tr><tr><td><code>fullscreenchange</code></td><td>进入/退出全屏模式时触发。</td><td><code>document.addEventListener(&#39;fullscreenchange&#39;, syncUI);</code></td></tr></tbody></table><h2 id="_3-网络与连接事件" tabindex="-1">3. 网络与连接事件 <a class="header-anchor" href="#_3-网络与连接事件" aria-label="Permalink to “3. 网络与连接事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>online</code> / <code>offline</code></td><td>网络连接恢复/丢失时触发。</td><td><code>window.addEventListener(&#39;online&#39;, syncData);</code></td></tr><tr><td><code>languagechange</code></td><td>用户首选语言变化时触发。</td><td><code>window.addEventListener(&#39;languagechange&#39;, updateLang);</code></td></tr></tbody></table><h2 id="_4-浏览器历史与导航事件" tabindex="-1">4. 浏览器历史与导航事件 <a class="header-anchor" href="#_4-浏览器历史与导航事件" aria-label="Permalink to “4. 浏览器历史与导航事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>popstate</code></td><td>前进/后退导航时触发（需 History API）。</td><td><code>window.addEventListener(&#39;popstate&#39;, restoreView);</code></td></tr><tr><td><code>hashchange</code></td><td>URL 哈希（<code>#</code> 后内容）变化时触发。</td><td><code>window.addEventListener(&#39;hashchange&#39;, handleRoute);</code></td></tr></tbody></table><h2 id="_5-存储与通信事件" tabindex="-1">5. 存储与通信事件 <a class="header-anchor" href="#_5-存储与通信事件" aria-label="Permalink to “5. 存储与通信事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>storage</code></td><td>同源其他标签页修改 <code>localStorage</code> 时触发。</td><td><code>window.addEventListener(&#39;storage&#39;, (e) =&gt; console.log(e.key, e.newValue));</code></td></tr><tr><td><code>message</code></td><td>通过 <code>postMessage</code> 接收消息时触发。</td><td><code>window.addEventListener(&#39;message&#39;, (e) =&gt; if (e.origin === &#39;https://trusted.com&#39;) handleMsg(e.data));</code></td></tr></tbody></table><h2 id="_6-设备与硬件事件" tabindex="-1">6. 设备与硬件事件 <a class="header-anchor" href="#_6-设备与硬件事件" aria-label="Permalink to “6. 设备与硬件事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>deviceorientation</code></td><td>设备方向变化时触发（需授权）。</td><td><code>window.addEventListener(&#39;deviceorientation&#39;, (e) =&gt; console.log(e.alpha, e.beta));</code></td></tr><tr><td><code>devicemotion</code></td><td>设备加速度变化时触发（如摇动）。</td><td><code>window.addEventListener(&#39;devicemotion&#39;, handleShake);</code></td></tr><tr><td><code>gamepadconnected</code></td><td>游戏手柄连接时触发。</td><td><code>window.addEventListener(&#39;gamepadconnected&#39;, initGamepad);</code></td></tr></tbody></table><h2 id="_7-安全与权限事件" tabindex="-1">7. 安全与权限事件 <a class="header-anchor" href="#_7-安全与权限事件" aria-label="Permalink to “7. 安全与权限事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>securitypolicyviolation</code></td><td>违反内容安全策略（CSP）时触发。</td><td><code>window.addEventListener(&#39;securitypolicyviolation&#39;, logViolation);</code></td></tr><tr><td><code>permissionchange</code></td><td>用户授予/拒绝权限（如摄像头）时触发。</td><td><code>navigator.permissions.query({name:&#39;camera&#39;}).then(...);</code></td></tr></tbody></table><h2 id="_8-其他特殊事件" tabindex="-1">8. 其他特殊事件 <a class="header-anchor" href="#_8-其他特殊事件" aria-label="Permalink to “8. 其他特殊事件”">​</a></h2><table tabindex="0"><thead><tr><th>事件名</th><th>触发条件</th><th>示例代码</th></tr></thead><tbody><tr><td><code>vrdisplayconnect</code></td><td>VR 设备连接时触发。</td><td><code>window.addEventListener(&#39;vrdisplayconnect&#39;, setupVR);</code></td></tr><tr><td><code>animationstart</code></td><td>CSS 动画开始时触发（全局监听）。</td><td><code>window.addEventListener(&#39;animationstart&#39;, (e) =&gt; console.log(e.animationName));</code></td></tr></tbody></table><hr><h3 id="使用说明" tabindex="-1"><strong>使用说明</strong> <a class="header-anchor" href="#使用说明" aria-label="Permalink to “使用说明”">​</a></h3><ol><li><strong>事件绑定</strong>：推荐使用 <code>addEventListener</code>（避免 <code>onload=</code> 等内联方式）。</li><li><strong>性能优化</strong>：高频事件（如 <code>resize</code>、<code>scroll</code>）需使用 <strong>防抖（debounce）</strong>。</li><li><strong>兼容性</strong>：部分事件（如 VR、游戏手柄）需检查浏览器支持：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gamepad&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gamepadconnected&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, handleGamepad);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol>`,20)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};