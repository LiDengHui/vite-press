import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.Cyk5UgWo.js";const i=JSON.parse(`{"title":"Object对象方法","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/Object对象方法.md","filePath":"语言/JavaScript/Object对象方法.md","lastUpdated":1751812369000}`),a={name:`语言/JavaScript/Object对象方法.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="object对象方法" tabindex="-1">Object对象方法 <a class="header-anchor" href="#object对象方法" aria-label="Permalink to “Object对象方法”">​</a></h1><p>在 JavaScript 中，可以通过以下几种方式遍历对象的属性和值：</p><hr><h3 id="_1-for-in-循环" tabindex="-1"><strong>1. <code>for...in</code> 循环</strong> <a class="header-anchor" href="#_1-for-in-循环" aria-label="Permalink to “1. for...in 循环”">​</a></h3><p>遍历对象自身的和继承的可枚举属性（不包含 Symbol 属性）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, obj[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：a 1, b 2, c 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>注意</strong>：</p><ul><li>会遍历原型链上的可枚举属性（可用 <code>obj.hasOwnProperty(key)</code> 过滤）。</li><li>不保证顺序（但现代 JS 引擎会按数字升序 + 插入顺序排列）。</li></ul><hr><h3 id="_2-object-keys-obj" tabindex="-1"><strong>2. <code>Object.keys(obj)</code></strong> <a class="header-anchor" href="#_2-object-keys-obj" aria-label="Permalink to “2. Object.keys(obj)”">​</a></h3><p>返回对象 <strong>自身可枚举属性</strong> 的数组（不包含 Symbol 属性）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keys.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, obj[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：a 1, b 2, c 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><strong>特点</strong>：</p><ul><li>只遍历对象自身的属性（不包含继承的）。</li><li>顺序与 <code>for...in</code> 一致。</li></ul><hr><h3 id="_3-object-values-obj" tabindex="-1"><strong>3. <code>Object.values(obj)</code></strong> <a class="header-anchor" href="#_3-object-values-obj" aria-label="Permalink to “3. Object.values(obj)”">​</a></h3><p>返回对象 <strong>自身可枚举属性值</strong> 的数组（不包含 Symbol 属性）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">values.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：1, 2, 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h3 id="_4-object-entries-obj" tabindex="-1"><strong>4. <code>Object.entries(obj)</code></strong> <a class="header-anchor" href="#_4-object-entries-obj" aria-label="Permalink to “4. Object.entries(obj)”">​</a></h3><p>返回对象 <strong>自身可枚举键值对</strong> 的数组（不包含 Symbol 属性）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：a 1, b 2, c 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><hr><h3 id="_5-object-getownpropertynames-obj" tabindex="-1"><strong>5. <code>Object.getOwnPropertyNames(obj)</code></strong> <a class="header-anchor" href="#_5-object-getownpropertynames-obj" aria-label="Permalink to “5. Object.getOwnPropertyNames(obj)”">​</a></h3><p>返回对象 <strong>所有自身属性（包括不可枚举的）</strong> 的数组（不包含 Symbol 属性）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allKeys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span></code></pre></div><hr><h3 id="_6-object-getownpropertysymbols-obj" tabindex="-1"><strong>6. <code>Object.getOwnPropertySymbols(obj)</code></strong> <a class="header-anchor" href="#_6-object-getownpropertysymbols-obj" aria-label="Permalink to “6. Object.getOwnPropertySymbols(obj)”">​</a></h3><p>返回对象 <strong>所有 Symbol 属性</strong> 的数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sym</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sym&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> objWithSymbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [sym]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;symbolValue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> symbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertySymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objWithSymbol); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Symbol(sym)]</span></span></code></pre></div><hr><h3 id="_7-reflect-ownkeys-obj" tabindex="-1"><strong>7. <code>Reflect.ownKeys(obj)</code></strong> <a class="header-anchor" href="#_7-reflect-ownkeys-obj" aria-label="Permalink to “7. Reflect.ownKeys(obj)”">​</a></h3><p>返回对象 <strong>所有自身属性（包括不可枚举和 Symbol）</strong> 的数组。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allKeysAndSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(objWithSymbol); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;d&quot;, Symbol(sym)]</span></span></code></pre></div><hr><h3 id="_8-结合-for-of-和-object-keys" tabindex="-1"><strong>8. 结合 <code>for...of</code> 和 <code>Object.keys()</code></strong> <a class="header-anchor" href="#_8-结合-for-of-和-object-keys" aria-label="Permalink to “8. 结合 for...of 和 Object.keys()”">​</a></h3><p>如果希望用 <code>for...of</code> 遍历对象：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, obj[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：a 1, b 2, c 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>遍历内容</th><th>是否包含继承属性</th><th>是否包含 Symbol</th><th>是否包含不可枚举属性</th></tr></thead><tbody><tr><td><code>for...in</code></td><td>可枚举属性</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td><code>Object.keys()</code></td><td>自身可枚举属性</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>Object.values()</code></td><td>自身可枚举值</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>Object.entries()</code></td><td>自身可枚举键值对</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td><code>Object.getOwnPropertyNames()</code></td><td>所有自身属性</td><td>❌</td><td>❌</td><td>✔️</td></tr><tr><td><code>Object.getOwnPropertySymbols()</code></td><td>自身 Symbol 属性</td><td>❌</td><td>✔️</td><td>✔️</td></tr><tr><td><code>Reflect.ownKeys()</code></td><td>所有自身属性</td><td>❌</td><td>✔️</td><td>✔️</td></tr></tbody></table>`,41)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};