import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";var i=`/vite-press/assets/120518791696708.BqeV1siv.png`;const a=JSON.parse(`{"title":"V8 之 对象表示","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/V8之2对象表示.md","filePath":"语言/JavaScript/V8之2对象表示.md","lastUpdated":1750738239000}`),o={name:`语言/JavaScript/V8之2对象表示.md`};function s(t,a,o,s,c,l){return e(),n(`div`,null,a[0]||=[r(`<h1 id="v8-之-对象表示" tabindex="-1">V8 之 对象表示 <a class="header-anchor" href="#v8-之-对象表示" aria-label="Permalink to “V8 之 对象表示”">​</a></h1><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to “概览”">​</a></h2><p>简易的图表或许是了解对象表示最为快速直观的方法。</p><p><img src="`+i+`" alt="" data-zoomable="true" loading="lazy"></p><p>所有的对象内存都会有一个Map指针，用以描述该对象的结构。绝大多数对象将其自身的属性放在一个内存中（“a”和“b”）；附加命名属性通常会放在一个单独的数组中（“c”和“d”）；而数字式的属性则单独存放在另一个地方，通常是一个连续的数组。</p><p>这张图仅仅表示已被优化的JS对象的通常状态，另有一些状态来处理其他情况。如果你对此抱有兴趣，继续下文吧。</p><h2 id="属性的怪异属性" tabindex="-1">属性的怪异属性 <a class="header-anchor" href="#属性的怪异属性" aria-label="Permalink to “属性的怪异属性”">​</a></h2><p>V8有它的难处：javascript标准中允许开发者以非常灵活的方式定义对象，因此很难用一种形式来高效地表示对象。一个对象基本上就是一堆属性的集合：也就是一群键值对， 你可以以两种方式来访问对象属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.prop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>根据标准，属性的名称永远是字符串。如果你用不是字符串的东西来作为属性的名称，那它将会被隐式转换为字符串。所以一个怪异的情况就是，如果用数字作为属性名，则数字也会被转换为字符串（至少根据标准就是这样）。因此，你可以以小树或者负数来作为下标。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这些都是同一个属性哦</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-1.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这俩也是同一个属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj[o];    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 因为o转换成了字符串</span></span></code></pre></div><p>数组在js中也只是带有神奇length属性的对象。大多数数组的属性名都是非负整数，而length的值则用来计算与这些属性名中最大的那个加一，比如</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回101</span></span></code></pre></div><p>除此之外数组和普通对象没什么区别。函数也是对象，只不过它们的length属性返回的是其定义的参数的个数。</p><h2 id="字典模式-哈希表模式" tabindex="-1">字典模式（哈希表模式） <a class="header-anchor" href="#字典模式-哈希表模式" aria-label="Permalink to “字典模式（哈希表模式）”">​</a></h2><p>既然JavaScript中的对象就是键值对映射，为何不直接以哈希表来表示对象？这种方式没什么问题，V8 内部实际上也用了这样的方式来表达一些难以用优化形式表达的对象。但访问哈希表中的值要比访问指定偏移的值慢多了。</p><p>我们来看看字符串和哈希表在V8中是如何工作。字符串有多种表达方式，用来表示属性名的最常见的ASCII码序列 ———— 所有字符串挨个排序，每个字符1字节。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>    0:  map (字符串类型)</span></span>
<span class="line"><span>	4:  length (字符数)</span></span>
<span class="line"><span>	8:  hash code (惰性计算而来)</span></span>
<span class="line"><span>	12: characters...</span></span></code></pre></div><p>译注：左边是偏移量，右边是该偏移量起始内存存放的值含义；从0开始，除最后一处外每个要素占用4字节，最后一处则是长度为length的字符</p><p>字符串通常不可变，唯一可能变得是惰性计算而来的哈希值。用做属性名的字符串称为<strong>符号</strong>， 这意味着它必须独有，非独有的字符串如果被用作属性名，都会被单独复制一份出来，以便不受其他修改的影响。</p><p>v8中的哈希表由一个包含键和值的大数组组成。初始化时，所有的键和值都会被初始化为undefined（一个特殊值），当有键值插入到哈希表中时，键的哈希值被计算出来，其低位被用作数组的下标。如果数组的该位置已经被占用，则哈希表尝试（取模过后的）下一个位置，以此类推。一下是这一过程的伪代码</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>insert(table, key, value):</span></span>
<span class="line"><span>    table = ensureCapacity(table, length(table) + 1)</span></span>
<span class="line"><span>    code = hash(key)</span></span>
<span class="line"><span>    n = capacity(table)</span></span>
<span class="line"><span>    index = code (mod n)</span></span>
<span class="line"><span>    while getKey(table, index) is not undefined:</span></span>
<span class="line"><span>        index += 1 (mod n)</span></span>
<span class="line"><span>    set(table, index, key, value)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lookup(table, key):</span></span>
<span class="line"><span>    code = hash(key)</span></span>
<span class="line"><span>    n = capacity(table)</span></span>
<span class="line"><span>    index = code (mod n)</span></span>
<span class="line"><span>    k = getKey(table, index)</span></span>
<span class="line"><span>    while k is not null or undefined</span></span>
<span class="line"><span>            and k != key:</span></span>
<span class="line"><span>        index += 1 (mod n)</span></span>
<span class="line"><span>        k = getKey(table, index)</span></span>
<span class="line"><span>    if k == key:</span></span>
<span class="line"><span>        return getValue(table, index)</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>        return undefined</span></span></code></pre></div><p>由于符号字符串是独有的，这里的hash code 至多计算一次，计算该值和对比键值通常都很快，然而这一算法仍然不够简单，导致于每次访问对象的属性都会慢下来。V8会尽可能地避免这种表达方式。</p><h2 id="快速的对象内属性" tabindex="-1">快速的对象内属性 <a class="header-anchor" href="#快速的对象内属性" aria-label="Permalink to “快速的对象内属性”">​</a></h2><p>在Lars Bak（V8 的缔造团队领导者） 2008年的这段视频中，他讲述了一种可以在通常情况下更快速访问属性的对象表达方式。考虑如下的构造结构函数：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>function Point(x, y) {</span></span>
<span class="line"><span>    this.x = x;</span></span>
<span class="line"><span>    this.y = y;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>像这样的构造函数是最为多见的。绝大多数时间里，同一构造函数所产生的对象会拥有以相同顺序赋值的相同属性。既然这些对象有着如此类似的结构，我们在内存中就可以以这样相同的结构来布局这些对象。</p><p>V8将这种描述对象的方式称为<strong>Map</strong>。你可以假想Map为一张填满描述符的表，每一项都表示一个属性。Map也包含其他信息，比如对象的大小以及指向构造函数和原型的指针等，但这里我们主要关注这些描述符。同样结构的对象，通常会共享同一个<code>Map</code>.一个完成初始化<code>Point</code>实例可能就想这样：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Map M2</span></span>
<span class="line"><span>    object size: 20 (2个属性的空间)</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: FIELD at offset 16</span></span></code></pre></div><p>现在你可能会想到，不是所有的Pointer实例都有相同的属性。当Point的实例刚刚在内存中开辟空间时（在构造函数中的代码真正执行前），它是没有任何属性的，Map M2 并不符合它的结构。另外，我们也可以在构造函数完成后随时为它增加新的其他属性。</p><p>V8处理通过一种特殊的描述符来处理这种情况：<code>Transition</code>.当增加一个新的属性时，除非迫不得已,我们不会创建新的Map，而是尽可能使用一个现存符合结构的Map。<code>Transition</code>描述符就是用来指向这些Map的。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>	Map M0</span></span>
<span class="line"><span>		&quot;x&quot;: TRANSITION to M1 at offset 12</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	this.x = x;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	Map M1</span></span>
<span class="line"><span>		&quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>		&quot;y&quot;: TRANSITION to M2 at offset 16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	this.y = y;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	Map M2</span></span>
<span class="line"><span>		&quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>		&quot;y&quot;: FIELD at offset 16</span></span></code></pre></div><p>在上面的例子中新的Point实例从没有任何Field 的M0 开始; 在第一次赋值时， 对象的Map指针指向了M1， 属性x的值存放在了偏移量12的位置；在第二次赋值时， Map指针指向了M2，属性y的值存放在了偏移量为16的位置。</p><p>如果在M2的基础上新增属性呢？</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Map M2</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: FIELD at offset 16</span></span>
<span class="line"><span>    &quot;z&quot;: TRANSITION to M3 at offset 20</span></span>
<span class="line"><span></span></span>
<span class="line"><span>this.z = z;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Map M3</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: FIELD at offset 16</span></span>
<span class="line"><span>    &quot;z&quot;: FIELD at offset 20</span></span></code></pre></div><p>如果新增的属性之前没有，则我们会通过复制M2创建一个新的Map，M3， 然后将一个新的FIELD 描述符增加在M3上。同时我们要在M2上增加一个TRANSITION描述符。注意。新增TRANSITION时修改Map位数不多的情况之一，通常Map是不可变得。</p><p>如果对象的属性并不是以相同的顺序出现呢？比如：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>function Point(x, y, reverse) {</span></span>
<span class="line"><span>    if (reverse) {</span></span>
<span class="line"><span>        this.x = x;</span></span>
<span class="line"><span>        this.y = y;</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        this.y = x;</span></span>
<span class="line"><span>        this.x = y;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在这种情况下，我们最终会得到一个Transition树，而不是链。初始的Map（上面的M0）将会有两个Transition，具体代码中转向哪个，会根据x和y的赋值顺序来定。正因为这样，不是所有的Point都会有相同的Map了。</p><p>这正是事情变糟的地方。V8对于这样小规模分支情形可以容忍，但如果你的代码中充斥着以同一个构造函数得出随机赋值对象，V8就会将其退化到字典模式，将属性存放在哈希表中。否则就会有大量的Map涌现。</p><h2 id="对象内的稀疏追踪" tabindex="-1">对象内的稀疏追踪 <a class="header-anchor" href="#对象内的稀疏追踪" aria-label="Permalink to “对象内的稀疏追踪”">​</a></h2><p>你可能好奇V8如何确定一个对象保留多少内存。很明显，我们不希望每次增加属性都重新开辟内存，同时也不想为一个小对象预留大片的内存。V8使用一个叫做对象内稀疏追踪（in-object slack tracking）的办法来确定为构造函数的新实例分配多少内存。</p><p>一开始，够着函数所产生的对象会被分配较多的内存：足够存放32个快速属性的内存。一旦该构造函数实例化了足够多次（最后一次看的时候是8次），V8就会选取其中最大的实例，通过Transition指针便利该够着函数对应的Map。新实例分配的内存，将直接使用便利得来的最大内存值。而最开始实例化出来的对象，也采用了非常精明的方式来缩减内存占用。当对象初始化时，对象所得的内存将以接近垃圾回收器可回收内存的形式出现。由于对象的Map标明了它的内存占用大小，垃圾回收器不会直接回收这片内存。直到稀疏追踪的过程完成之后，Map中的内存大小被重新修正，相应对象的内存占用也就小了。此时垃圾回收器会回收掉这些已经时可回收的内存，而原先的对象也无需重新挪动。</p><p>现在我估计你的下一个问题是：&quot;如果一个对象在稀疏追踪结束之后又增加了新的属性呢&quot;. 这就要依靠一个单独的数组来存放这些附加的属性。只要有属性加入，这个数组随时可以重新分配为更大的数组。</p><h2 id="成员函数与原型" tabindex="-1">成员函数与原型 <a class="header-anchor" href="#成员函数与原型" aria-label="Permalink to “成员函数与原型”">​</a></h2><p>JavaScript 没有类，因此他的成员函数调用与C++及Java不同。JavaScript中的成员函数只是普通的属性。在下面的例子中，distance知识Point对象的一个属性，它指向PointDistance函数。JavaScript中的任何函数都可以作为成员函数，并通过this来访问其目标函数。</p><p>译注：在C++中， obj.method(param)实际是C代码method(this, param)的语法糖，因此this指针实际是函数的目标对象，而不是函数的发起者。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.distance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PointDistance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PointDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.y;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dx, dy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dy);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果distance像普通的对象内属性一样对待，那很显然会占用大量的内存空间，原因是每一个Point实例都会有一个Field来存放这个共同的属性。对于有大量成员函数的对象更是如此，我们可以对此改进。</p><p>C++解决这个问题的方法是虚标(v-table)。虚标是一个存放各个需函数指针的数组。带有虚函数的类的每个实例，都会有一个指向该类虚表的指针。当你调用虚函数时，程序会读取虚表，并按照虚表中该虚函数的地址跳转执行。在V8中，我们已经有了这么一个类型的表，它就是Map.</p><p>为了让Map有类似虚表的功能，我们需要为其增加一种新的描述符：Constant Function。 CF类型的描述符表示该对象有一个已知的属性，该属性不存放在对象中，而是直接尾随描述符。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Map M0</span></span>
<span class="line"><span>    &quot;x&quot;: TRANSITION to M1 at offset 12</span></span>
<span class="line"><span></span></span>
<span class="line"><span>this.x = x;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Map M1</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: TRANSITION to M2 at offset 16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>this.y = y;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Map M2</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: FIELD at offset 16</span></span>
<span class="line"><span>    &quot;distance&quot;: TRANSITION to M3 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>this.distance = PointDistance;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Map M3</span></span>
<span class="line"><span>    &quot;x&quot;: FIELD at offset 12</span></span>
<span class="line"><span>    &quot;y&quot;: FIELD at offset 16</span></span>
<span class="line"><span>    &quot;distance&quot;: CONSTENT_FUNCTION</span></span></code></pre></div><p>注意，转换到另一个Map只会在描述符的函数与实际函数一致才会发生。因此如果程序员对PointDistance重新赋值为另一个值，则该Transition不再有效，Map也会重新创建。同时注意，我们并不像虚标那样仅仅是跳转到虚函数，而是会生成一个包含函数地址的优化代码，以便在下次执行时，一旦发现对象使用Map是这个Map并要调用该函数，则直接跳转过去。</p><p>JavaScript中还有另一种方法来提供公共属性，那就是通过构造函数所关联的原型对象。对于一个构造函数的实例来说，原型对象所拥有的属性，它也可以直接使用。举例来说：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>function Point(x, y) {</span></span>
<span class="line"><span>    this.x = x;</span></span>
<span class="line"><span>    this.y = y;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Point.prototype.distance = function(p) {</span></span>
<span class="line"><span>    var dx = this.x - p.x;</span></span>
<span class="line"><span>    var dy = this.y - p.y;</span></span>
<span class="line"><span>    return Math.sqrt(dx*dx, dy*dy);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>var u = new Point(1, 2);</span></span>
<span class="line"><span>var v = new Point(3, 4);</span></span>
<span class="line"><span>var d = u.distance(v);</span></span></code></pre></div><p>这样的代码随处可见，同时也是实现继承的一种范式，因为原型还可以有自己的原型。instanceof操作符所针对的就是原型链。</p><p>和普通对象一样，V8也会将原型的成员函数以CF扫描符来表示。调用原型的函数会比直接调用对象自己的函数略慢，因为编译器不仅需要检查目标对象的Map，同时也要检查原型链上的其他Map。但这不会产生大的性能问题，对于开发者来说也不影响代码书写。</p><h2 id="数字式属性-fast-element" tabindex="-1">数字式属性： Fast Element <a class="header-anchor" href="#数字式属性-fast-element" aria-label="Permalink to “数字式属性： Fast Element”">​</a></h2><p>至此，我们已经讨论了普通属性和方法，并且假设对象总是以相同顺序构造相同的属性。但这对于数字式的属性（以下标的形式来访问的数组元素）并不成立，同时任何对象都有可能像数组一样使用，因此我们需要对数组一样的对象区别对待。记住，根据标准，所有的属性都必须是字符串，其他类型会先转换为字符串。</p><p>我们将属性名为非负整数（0，1，2 ...）的属性称为Element。V8中，Element的存放和其他属性是分开的。每个对象都有一个指向Element数组的指针，对像Map中的Element Field将会反映出Element是如何存储的。注意，Map中并不包含Element的描述符，但可能包含它有着不同Element类型的同一种Map的Transition描述符（换而言之，一个Map只对应一种Element数组，如果Element数组的类型不同，会形成一个Transition）。大多数情况下，对象都有会Fast Element，也就是说这些Element以连续数组的形式存放。有三种不同的Fast Element：</p><ol><li>Fast small integers</li><li>Fast doubles</li><li>Fast values</li></ol><p>根据标准，JS中的所有的数字都理应以64位浮点数形式出现，尽管我们平时处理的都是整数。因此V8吋可能以31位带符号整数来表达数字（最低位总是0，这有助于垃圾回收器区分数字和指针）。因此含有Fast small integers 类型的对象，其Element 类型只会包含这样的数字。如果需要存储小数、大整数、或其他特殊值，如-0，则需要将数组提升为Fast doubles， 于是这引入了潜在的昂贵的复制-转换操作，但通常不会频繁发生。Fast doubles仍然是很快的因此所有数字都是无封箱存储的。但如果我们要存储的是其他类型，比如字符串或对象，则必须将其提升为普通的Fast Element数组。</p><p>JavaScript 不提供任何确定存储元素多少的办法。你可能会说像这样的办法，new Array(100), 但实际上这仅仅针对Array构造函数有用。如果你将值存在一个不存在的下标上，V8会重新开辟更大的内存，将原有元素复制到新内存。V8 可以处理带空洞的数组，也就是只有某些下标是存有元素，而期间的下标都是空的。其内部会安插特殊的哨兵值，因此试图访问未赋值的下标，会得到undefined</p><p>当然 Fast Element也有其限制。如果你在远远超过当前数组大小的下标赋值，V8会将数组转换为字典模式，将值以哈希表的形式存储。这对于稀疏数组来说很有用，但性能上肯定打了折扣，无论是从转换这一过程来说，还是从之后的访问来说。如果你需要复制整个数组，不要逆向复制（索引从高到低），因此这几乎必然触发字典模式。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这会大大降低大数组的性能</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a[i];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>由于普通的属性和数字式属性分开存放，即使数组退化为字典模式，也不会影响其他属性的访问速度</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p>这篇文章中我们观察了V8内部式如何表示对象及其属性的。V8为通用接口提供了针对具体场景可切换的数据存储模型，这作为VM语言的一项优势，对于编译型语言来说是难以企及的：那些语言要么只能小范围优化，要么则依赖于程序员对对象结构的控制。</p><p><a href="https://v8.dev/blog" target="_blank" rel="noreferrer">https://v8.dev/blog</a></p>`,69)])}var c=t(o,[[`render`,s]]);export{a as __pageData,c as default};