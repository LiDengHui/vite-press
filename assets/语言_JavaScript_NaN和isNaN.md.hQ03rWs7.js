import{_ as i,c as a,o as n,a6 as t}from"./chunks/framework.mq8cK8gF.js";const o=JSON.parse('{"title":"NaN和isNaN","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/NaN和isNaN.md","filePath":"语言/JavaScript/NaN和isNaN.md","lastUpdated":null}'),h={name:"语言/JavaScript/NaN和isNaN.md"};function e(l,s,k,p,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="nan和isnan" tabindex="-1">NaN和isNaN <a class="header-anchor" href="#nan和isnan" aria-label="Permalink to “NaN和isNaN”">​</a></h1><p>在 JavaScript 中，<code>isNaN</code> 函数用于检测一个值是否为 <code>NaN</code>（Not-a-Number），但它存在一些设计上的问题，容易导致误解和错误。以下是主要问题及解决方案：</p><h2 id="问题-1-isnan-会先强制类型转换" tabindex="-1"><strong>问题 1：<code>isNaN</code> 会先强制类型转换</strong> <a class="header-anchor" href="#问题-1-isnan-会先强制类型转换" aria-label="Permalink to “问题 1：isNaN 会先强制类型转换”">​</a></h2><p><code>isNaN</code> 在检查前会<strong>先将参数转换为数值类型</strong>。如果转换失败（结果为 <code>NaN</code>），则返回 <code>true</code>。这会导致非数值类型（如字符串）被误判：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（字符串 &quot;123&quot; 转成数字 123，不是 NaN）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true（字符串转数字失败，得到 NaN）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（空字符串转成 0）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;    &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（空格字符串转成 0）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（空数组转成 0）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（数组 [1] 转成 1）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true（数组转数字失败，得到 NaN）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true（对象转数字失败）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true（undefined 转数字失败）</span></span></code></pre></div><p><strong>问题本质</strong>：<code>isNaN</code> 实际检查的是 <strong>“转换后的值是否是 <code>NaN</code>”</strong>，而非 <strong>“原值是否是 <code>NaN</code>”</strong>。</p><hr><h3 id="问题-2-无法可靠检测真正的-nan" tabindex="-1"><strong>问题 2：无法可靠检测真正的 <code>NaN</code></strong> <a class="header-anchor" href="#问题-2-无法可靠检测真正的-nan" aria-label="Permalink to “问题 2：无法可靠检测真正的 NaN”">​</a></h3><p>由于强制转换，一些明显不是数字的值（如空字符串、空数组）会被转换成 <code>0</code>，导致 <code>isNaN</code> 返回 <code>false</code>，而开发者可能期望返回 <code>true</code>。</p><hr><h2 id="解决方案-使用-number-isnan-es6" tabindex="-1"><strong>解决方案：使用 <code>Number.isNaN</code> (ES6+)</strong> <a class="header-anchor" href="#解决方案-使用-number-isnan-es6" aria-label="Permalink to “解决方案：使用 Number.isNaN (ES6+)”">​</a></h2><p>ES6 引入了 <code>Number.isNaN</code>，它<strong>不会进行类型转换</strong>，只对真正的 <code>NaN</code> 返回 <code>true</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true（唯一正确的情况）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（字符串不是 NaN）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（空字符串不是 NaN）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（数组不是 NaN）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false（undefined 不是 NaN）</span></span></code></pre></div><hr><h2 id="如何兼容旧环境" tabindex="-1"><strong>如何兼容旧环境？</strong> <a class="header-anchor" href="#如何兼容旧环境" aria-label="Permalink to “如何兼容旧环境？”">​</a></h2><p>在不支持 ES6 的环境中，可通过以下 Polyfill 实现 <code>Number.isNaN</code>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.isNaN) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 利用 NaN 是 JavaScript 中唯一不等于自身的值这一特性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="总结-使用场景对比" tabindex="-1"><strong>总结：使用场景对比</strong> <a class="header-anchor" href="#总结-使用场景对比" aria-label="Permalink to “总结：使用场景对比”">​</a></h2><table tabindex="0"><thead><tr><th><strong>场景</strong></th><th><code>isNaN</code> (全局)</th><th><code>Number.isNaN</code> (推荐)</th></tr></thead><tbody><tr><td>检测 <code>NaN</code></td><td>❌ 不可靠（会转换类型）</td><td>✅ 安全</td></tr><tr><td>检测非数字字符串（如 <code>&quot;abc&quot;</code>）</td><td>✅ 返回 <code>true</code></td><td>❌ 返回 <code>false</code></td></tr><tr><td>检测空字符串 <code>&quot;&quot;</code></td><td>❌ 返回 <code>false</code></td><td>❌ 返回 <code>false</code></td></tr><tr><td>检测数组 <code>[]</code></td><td>❌ 返回 <code>false</code></td><td>❌ 返回 <code>false</code></td></tr></tbody></table><hr><h2 id="最佳实践" tabindex="-1"><strong>最佳实践</strong> <a class="header-anchor" href="#最佳实践" aria-label="Permalink to “最佳实践”">​</a></h2><ol><li><strong>永远避免使用全局 <code>isNaN</code></strong><br> 它的类型转换行为极易导致隐蔽的 Bug。</li><li><strong>使用 <code>Number.isNaN</code></strong><br> 精准检测真正的 <code>NaN</code> 值。</li><li><strong>如果需要检查“是否为有效数字”</strong>：<br> 更推荐用 <strong><code>typeof value === &#39;number&#39; &amp;&amp; !isNaN(value)</code></strong> 或 <strong><code>Number.isFinite(value)</code></strong>。</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查是否为有效数字（非 NaN 且可计算）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;number&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 排除 Infinity 和 NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,24)]))}const g=i(h,[["render",e]]);export{o as __pageData,g as default};
