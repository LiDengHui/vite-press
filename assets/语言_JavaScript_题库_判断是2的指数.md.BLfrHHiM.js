import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const i=JSON.parse(`{"title":"判断2的指数","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/题库/判断是2的指数.md","filePath":"语言/JavaScript/题库/判断是2的指数.md","lastUpdated":1751812369000}`),a={name:`语言/JavaScript/题库/判断是2的指数.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="判断2的指数" tabindex="-1">判断2的指数 <a class="header-anchor" href="#判断2的指数" aria-label="Permalink to “判断2的指数”">​</a></h1><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个函数 <code>isPowerOf2</code> 用于判断一个给定的数字 <code>x</code> 是否是 2 的幂次方。以下是它的工作原理：</p><h2 id="解释" tabindex="-1">解释： <a class="header-anchor" href="#解释" aria-label="Permalink to “解释：”">​</a></h2><ol><li><p><strong>2的幂次方的特性</strong>：</p><ul><li>2的幂次方的数在二进制表示中，<strong>只有一个 <code>1</code></strong>，其余位都是 <code>0</code>。</li><li>例如： <ul><li><code>1</code>（2⁰）→ <code>0001</code></li><li><code>2</code>（2¹）→ <code>0010</code></li><li><code>4</code>（2²）→ <code>0100</code></li><li><code>8</code>（2³）→ <code>1000</code></li></ul></li></ul></li><li><p><strong><code>x - 1</code> 的作用</strong>：</p><ul><li>如果 <code>x</code> 是 2 的幂次方，那么 <code>x - 1</code> 会把 <code>x</code> 的二进制中唯一的 <code>1</code> 变成 <code>0</code>，并且后面的所有位变成 <code>1</code>。</li><li>例如： <ul><li><code>4</code>（<code>0100</code>）→ <code>3</code>（<code>0011</code>）</li><li><code>8</code>（<code>1000</code>）→ <code>7</code>（<code>0111</code>）</li></ul></li></ul></li><li><p><strong><code>x &amp; (x - 1)</code> 的作用</strong>：</p><ul><li>如果 <code>x</code> 是 2 的幂次方，那么 <code>x &amp; (x - 1)</code> 的结果一定是 <code>0</code>，因为 <code>x</code> 和 <code>x - 1</code> 的所有位都不同。</li><li>例如： <ul><li><code>4 &amp; 3</code> → <code>0100 &amp; 0011 = 0000</code>（<code>0</code>）</li><li><code>8 &amp; 7</code> → <code>1000 &amp; 0111 = 0000</code>（<code>0</code>）</li></ul></li></ul></li><li><p><strong>特殊情况 <code>x = 0</code></strong>：</p><ul><li>当 <code>x = 0</code> 时，<code>0 &amp; (0 - 1) = 0 &amp; (-1) = 0</code>，但 <code>0</code> <strong>不是</strong> 2 的幂次方，因此需要额外判断 <code>x &gt; 0</code>。</li></ul></li></ol><h2 id="修正后的代码" tabindex="-1">修正后的代码： <a class="header-anchor" href="#修正后的代码" aria-label="Permalink to “修正后的代码：”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="关键点" tabindex="-1">关键点： <a class="header-anchor" href="#关键点" aria-label="Permalink to “关键点：”">​</a></h2><ul><li>该函数可以正确判断 <strong>正整数</strong> 是否是 2 的幂次方。</li><li>修正后的版本排除了 <code>x = 0</code> 的情况，避免误判。</li><li>时间复杂度：<code>O(1)</code>（仅需一次位运算和比较）。</li></ul><h2 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to “其他方法”">​</a></h2><p>是的，除了使用 <code>x &amp; (x - 1) === 0</code> 的方法，还有其他几种方式可以判断一个数是否是 2 的幂次方。以下是几种常见的方法：</p><hr><h2 id="方法-1-利用-math-log2-对数法" tabindex="-1"><strong>方法 1：利用 <code>Math.log2</code>（对数法）</strong> <a class="header-anchor" href="#方法-1-利用-math-log2-对数法" aria-label="Permalink to “方法 1：利用 Math.log2（对数法）”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>原理</strong>：</p><ul><li><code>Math.log2(x)</code> 计算 <code>x</code> 以 2 为底的对数。</li><li>如果 <code>x</code> 是 2 的幂次方，则 <code>Math.log2(x)</code> 应该是整数。</li><li><code>Number.isInteger()</code> 检查该对数是否为整数。</li></ul><p><strong>缺点</strong>：</p><ul><li>浮点数精度问题可能导致误判（如 <code>Math.log2(8)</code> 是 <code>3</code>，但 <code>Math.log2(536870912)</code> 可能因精度误差变成 <code>29.000000000000004</code>）。</li></ul><hr><h2 id="方法-2-位运算-计算-1-的个数" tabindex="-1"><strong>方法 2：位运算（计算 <code>1</code> 的个数）</strong> <a class="header-anchor" href="#方法-2-位运算-计算-1-的个数" aria-label="Permalink to “方法 2：位运算（计算 1 的个数）”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>原理</strong>：</p><ul><li>将 <code>x</code> 转为二进制字符串，检查其中 <code>1</code> 的个数是否恰好为 1。</li><li>例如： <ul><li><code>4</code> → <code>&quot;100&quot;</code>（1 个 <code>1</code>）→ <code>true</code></li><li><code>5</code> → <code>&quot;101&quot;</code>（2 个 <code>1</code>）→ <code>false</code></li></ul></li></ul><p><strong>缺点</strong>：</p><ul><li>需要字符串转换，性能不如位运算高效。</li></ul><hr><h2 id="方法-3-利用-x-x-x" tabindex="-1"><strong>方法 3：利用 <code>x === (x &amp; -x)</code></strong> <a class="header-anchor" href="#方法-3-利用-x-x-x" aria-label="Permalink to “方法 3：利用 x === (x &amp; -x)”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>原理</strong>：</p><ul><li><code>x &amp; -x</code> 会保留 <code>x</code> 的最低位的 <code>1</code>，其余位清零。</li><li>如果 <code>x</code> 是 2 的幂次方，则 <code>x</code> 只有一个 <code>1</code>，所以 <code>x &amp; -x</code> 仍然等于 <code>x</code>。</li><li>例如： <ul><li><code>8</code> → <code>1000</code>，<code>-8</code>（补码）→ <code>...1000</code> → <code>8 &amp; -8 = 1000 &amp; ...1000 = 1000</code>（<code>8</code>）</li><li><code>6</code> → <code>0110</code>，<code>-6</code> → <code>...1010</code> → <code>6 &amp; -6 = 0110 &amp; 1010 = 0010</code>（<code>2</code>，不等于 <code>6</code>）</li></ul></li></ul><p><strong>优点</strong>：</p><ul><li>比 <code>x &amp; (x - 1)</code> 更直接，但需要理解补码机制。</li></ul><hr><h2 id="方法-4-暴力枚举-适用于小范围" tabindex="-1"><strong>方法 4：暴力枚举（适用于小范围）</strong> <a class="header-anchor" href="#方法-4-暴力枚举-适用于小范围" aria-label="Permalink to “方法 4：暴力枚举（适用于小范围）”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>原理</strong>：</p><ul><li>不断除以 2，直到 <code>x</code> 变成奇数。</li><li>如果最终 <code>x === 1</code>，说明它是 2 的幂次方。</li></ul><p><strong>缺点</strong>：</p><ul><li>效率较低，不推荐用于大数计算。</li></ul><hr><h2 id="方法-5-查表法-适用于已知范围" tabindex="-1"><strong>方法 5：查表法（适用于已知范围）</strong> <a class="header-anchor" href="#方法-5-查表法-适用于已知范围" aria-label="Permalink to “方法 5：查表法（适用于已知范围）”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> powerOf2Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOf2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> powerOf2Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>适用场景</strong>：</p><ul><li>如果已知 <code>x</code> 的范围较小（如 32 位整数），可以预计算所有可能的 2 的幂次方，存入 <code>Set</code> 进行快速查找。</li></ul><p><strong>缺点</strong>：</p><ul><li>占用额外内存，不适用于任意大数。</li></ul><hr><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>时间复杂度</th><th>适用场景</th><th>缺点</th></tr></thead><tbody><tr><td><code>x &amp; (x - 1) === 0</code></td><td><code>O(1)</code></td><td>通用</td><td>需排除 <code>x = 0</code></td></tr><tr><td><code>Math.log2</code></td><td><code>O(1)</code></td><td>数学计算</td><td>浮点精度问题</td></tr><tr><td>统计 <code>1</code> 的个数</td><td><code>O(log x)</code></td><td>直观</td><td>字符串操作较慢</td></tr><tr><td><code>x === (x &amp; -x)</code></td><td><code>O(1)</code></td><td>位运算优化</td><td>需理解补码</td></tr><tr><td>暴力枚举</td><td><code>O(log x)</code></td><td>教学示例</td><td>效率低</td></tr><tr><td>查表法</td><td><code>O(1)</code></td><td>固定范围</td><td>占用内存</td></tr></tbody></table><p><strong>推荐方法</strong>：</p><ul><li><strong>最优解</strong>：<code>x &gt; 0 &amp;&amp; (x &amp; (x - 1)) === 0</code>（高效、简洁）。</li><li><strong>替代方案</strong>：<code>x &gt; 0 &amp;&amp; x === (x &amp; -x)</code>（同样高效，但可读性稍差）。</li></ul>`,51)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};