import{_ as a,c as n,o as i,a7 as e}from"./chunks/framework.BQO8qXET.js";const k=JSON.parse('{"title":"ESLint插件系统","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Eslint/Eslint插件系统.md","filePath":"工程化/Eslint/Eslint插件系统.md","lastUpdated":1750817186000}'),l={name:"工程化/Eslint/Eslint插件系统.md"};function t(p,s,h,r,d,o){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="eslint插件系统" tabindex="-1">ESLint插件系统 <a class="header-anchor" href="#eslint插件系统" aria-label="Permalink to “ESLint插件系统”">​</a></h1><p>ESLint 插件系统是 ESLint 的扩展机制，用于添加自定义的 <strong>规则（rules）</strong>、<strong>处理器（processors）</strong>、<strong>配置（configs）</strong>、 <strong>解析器（parser）</strong> 和 <strong>环境（env）</strong> 等。插件本质上是一个包含多个属性的模块，遵循一定格式输出一个对象。</p><hr><h2 id="✅-一、什么是-eslint-插件" tabindex="-1">✅ 一、什么是 ESLint 插件？ <a class="header-anchor" href="#✅-一、什么是-eslint-插件" aria-label="Permalink to “✅ 一、什么是 ESLint 插件？”">​</a></h2><ul><li><p>插件是一个 <strong>npm 模块</strong>，通常命名为：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint-plugin-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;name&gt;</span></span></code></pre></div><p>引用时可省略前缀，直接使用 <code>&lt;name&gt;</code>。</p></li><li><p>插件导出的是一个包含扩展功能的对象，它告诉 ESLint：</p><ul><li>提供了哪些规则</li><li>提供了哪些配置 preset</li><li>是否有自定义处理器</li><li>是否提供了环境定义</li><li>等等</li></ul></li></ul><hr><h2 id="✅-二、插件对象结构和属性" tabindex="-1">✅ 二、插件对象结构和属性 <a class="header-anchor" href="#✅-二、插件对象结构和属性" aria-label="Permalink to “✅ 二、插件对象结构和属性”">​</a></h2><p>一个完整的 ESLint 插件导出对象大致结构如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configs: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    processors: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    environments: {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也可以包括以下非标准字段（一些工具读取）：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    meta: {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>下面是各个属性的详细说明：</p><h3 id="_1-rules-✅" tabindex="-1">1. <code>rules</code> ✅ <a class="header-anchor" href="#_1-rules-✅" aria-label="Permalink to “1. rules ✅”">​</a></h3><p>自定义的规则集合，键是规则名，值是规则实现对象。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>rules: {</span></span>
<span class="line"><span>    &quot;no-foo&quot;: {</span></span>
<span class="line"><span>        meta: { /* 元信息 */</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        create(context) {</span></span>
<span class="line"><span>            return {</span></span>
<span class="line"><span>                Identifier(node) {</span></span>
<span class="line"><span>                    if (node.name === &#39;foo&#39;) {</span></span>
<span class="line"><span>                        context.report({node, message: &quot;&#39;foo&#39; is not allowed&quot;});</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>使用时规则名称是：<code>&lt;plugin&gt;/&lt;rule&gt;</code>（如 <code>myplugin/no-foo</code>）</li></ul><h3 id="_2-configs-✅" tabindex="-1">2. <code>configs</code> ✅ <a class="header-anchor" href="#_2-configs-✅" aria-label="Permalink to “2. configs ✅”">​</a></h3><p>预定义配置集合，方便用户快速引用插件提供的一组规则、环境等。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>configs: {</span></span>
<span class="line"><span>    recommended: {</span></span>
<span class="line"><span>        rules: {</span></span>
<span class="line"><span>            &quot;myplugin/no-foo&quot;: &quot;error&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>用户可通过 <code>extends: [&#39;plugin:myplugin/recommended&#39;]</code> 使用这些配置。</li></ul><h3 id="_3-processors-可选" tabindex="-1">3. <code>processors</code> （可选） <a class="header-anchor" href="#_3-processors-可选" aria-label="Permalink to “3. processors （可选）”">​</a></h3><p>用于对非 JS 文件进行处理（如 <code>.vue</code>, <code>.md</code>）。你可以对文本做分片，然后交由 ESLint 处理每个片段。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>processors: {</span></span>
<span class="line"><span>    &#39;.md&#39;: {</span></span>
<span class="line"><span>        preprocess(text, filename){</span></span>
<span class="line"><span>            return [extractJSFromMarkdown(text)];</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        postprocess(messages, filename){</span></span>
<span class="line"><span>            return messages[0];</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        supportsAutofix: true</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_4-environments-可选" tabindex="-1">4. <code>environments</code>（可选） <a class="header-anchor" href="#_4-environments-可选" aria-label="Permalink to “4. environments（可选）”">​</a></h3><p>定义新的环境，比如添加全局变量。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>environments: {</span></span>
<span class="line"><span>    myenv: {</span></span>
<span class="line"><span>        globals: {</span></span>
<span class="line"><span>            myGlobal: &quot;readonly&quot;</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        parserOptions: {</span></span>
<span class="line"><span>            ecmaVersion: 2021</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>用户通过 <code>env: { myenv: true }</code> 启用。</li></ul><h3 id="_5-meta-非标准" tabindex="-1">5. <code>meta</code>（非标准） <a class="header-anchor" href="#_5-meta-非标准" aria-label="Permalink to “5. meta（非标准）”">​</a></h3><p>不是 ESLint 要求的，但有些工具（比如文档生成工具）会使用。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>meta: {</span></span>
<span class="line"><span>    name: &#39;eslint-plugin-myplugin&#39;,</span></span>
<span class="line"><span>    version: &#39;1.0.0&#39;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="✅-三、插件注册方式-用户角度" tabindex="-1">✅ 三、插件注册方式（用户角度） <a class="header-anchor" href="#✅-三、插件注册方式-用户角度" aria-label="Permalink to “✅ 三、插件注册方式（用户角度）”">​</a></h2><h3 id="安装插件" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件" aria-label="Permalink to “安装插件”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-plugin-myplugin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><h3 id="使用插件-eslintrc" tabindex="-1">使用插件（.eslintrc） <a class="header-anchor" href="#使用插件-eslintrc" aria-label="Permalink to “使用插件（.eslintrc）”">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;myplugin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;myplugin/no-foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;plugin:myplugin/recommended&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="✅-四、总结" tabindex="-1">✅ 四、总结 <a class="header-anchor" href="#✅-四、总结" aria-label="Permalink to “✅ 四、总结”">​</a></h2><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td><code>rules</code></td><td>Object</td><td>提供自定义规则实现</td></tr><tr><td><code>configs</code></td><td>Object</td><td>提供可扩展的预设配置</td></tr><tr><td><code>processors</code></td><td>Object</td><td>提供对非 JS 文件的自定义处理</td></tr><tr><td><code>environments</code></td><td>Object</td><td>定义新的全局变量和环境设置</td></tr><tr><td><code>meta</code></td><td>Object</td><td>插件元信息（非必需）</td></tr></tbody></table><h2 id="插件模版" tabindex="-1">插件模版 <a class="header-anchor" href="#插件模版" aria-label="Permalink to “插件模版”">​</a></h2>`,36)]))}const g=a(l,[["render",t]]);export{k as __pageData,g as default};
