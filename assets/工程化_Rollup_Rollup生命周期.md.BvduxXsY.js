import{_ as t,c as l,o as r,a6 as n}from"./chunks/framework.mq8cK8gF.js";const p=JSON.parse('{"title":"Rollup生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Rollup/Rollup生命周期.md","filePath":"工程化/Rollup/Rollup生命周期.md","lastUpdated":null}'),e={name:"工程化/Rollup/Rollup生命周期.md"};function s(i,o,d,g,c,a){return r(),l("div",null,o[0]||(o[0]=[n('<h1 id="rollup生命周期" tabindex="-1">Rollup生命周期 <a class="header-anchor" href="#rollup生命周期" aria-label="Permalink to “Rollup生命周期”">​</a></h1><p>Rollup.js 的构建过程分为 <strong>Build</strong>（构建）和 <strong>Output</strong>（输出）两大阶段，每个阶段包含多个子流程，并通过<strong>插件钩子（Hooks）</strong> 实现扩展性。以下是各阶段的详细作用和执行流程：</p><h2 id="🔧-一、build-阶段-依赖解析与模块图生成" tabindex="-1">🔧 <strong>一、Build 阶段：依赖解析与模块图生成</strong> <a class="header-anchor" href="#🔧-一、build-阶段-依赖解析与模块图生成" aria-label="Permalink to “🔧 一、Build 阶段：依赖解析与模块图生成”">​</a></h2><p><strong>目标</strong>：解析入口文件，构建模块依赖图（Module Graph），生成模块的抽象语法树（AST）。<br><strong>流程</strong>：</p><ol><li><p><strong><code>options</code> 钩子</strong></p><ul><li><strong>作用</strong>：转换或修改 Rollup 配置（如修改输入路径）。</li><li><strong>类型</strong>：<code>async, sequential</code>（按插件顺序执行）。</li></ul></li><li><p><strong><code>buildStart</code> 钩子</strong></p><ul><li><strong>作用</strong>：初始化构建状态（如清理缓存、预加载资源）。</li><li><strong>类型</strong>：<code>async, parallel</code>（插件并行执行）。</li></ul></li><li><p><strong><code>resolveId</code> 钩子</strong></p><ul><li><strong>作用</strong>：解析模块路径（如处理别名 <code>@/utils</code> → <code>src/utils.js</code>）。</li><li><strong>类型</strong>：<code>async, first</code>（一旦某个插件返回有效路径，则停止后续解析）。</li></ul></li><li><p><strong><code>load</code> 钩子</strong></p><ul><li><strong>作用</strong>：加载模块内容（如读取文件或返回虚拟模块）。</li><li><strong>示例</strong>：加载 JSON 文件时，<code>@rollup/plugin-json</code> 将其转为 JS 对象。</li></ul></li><li><p><strong><code>transform</code> 钩子</strong></p><ul><li><strong>作用</strong>：转换模块代码（如 Babel 转译、替换环境变量）。</li><li><strong>类型</strong>：<code>async, sequential</code>（插件串行执行，前一个结果作为下一个输入）。</li></ul></li><li><p><strong><code>moduleParsed</code> 钩子</strong></p><ul><li><strong>作用</strong>：模块 AST 解析完成后触发，收集 <code>import</code> 依赖关系，递归解析子模块。</li></ul></li><li><p><strong><code>buildEnd</code> 钩子</strong></p><ul><li><strong>作用</strong>：构建结束（成功或失败时执行清理操作）。</li></ul></li></ol><p><strong>输出</strong>：生成 <code>bundle</code> 对象，包含模块依赖图、AST 和原始代码，但尚未打包。</p><h2 id="📦-二、output-阶段-代码打包与产物生成" tabindex="-1">📦 <strong>二、Output 阶段：代码打包与产物生成</strong> <a class="header-anchor" href="#📦-二、output-阶段-代码打包与产物生成" aria-label="Permalink to “📦 二、Output 阶段：代码打包与产物生成”">​</a></h2><p><strong>目标</strong>：将模块依赖图转换为优化后的最终产物（如单文件或代码分割的 chunk）。<br><strong>流程</strong>：</p><ol><li><p><strong><code>outputOptions</code> 钩子</strong></p><ul><li><strong>作用</strong>：修改输出配置（如动态调整输出格式 <code>esm</code> → <code>cjs</code>）。</li></ul></li><li><p><strong><code>renderStart</code> 钩子</strong></p><ul><li><strong>作用</strong>：输出阶段开始的初始化。</li></ul></li><li><p><strong>关键代码优化</strong></p><ul><li><strong>Tree Shaking</strong>：静态分析 AST，删除未使用的代码（需 ES 模块语法）。</li><li><strong>作用域提升（Scope Hoisting）</strong>：将模块合并到单一作用域，减少运行时开销。</li></ul></li><li><p><strong><code>banner/footer/intro/outro</code> 钩子</strong></p><ul><li><strong>作用</strong>：在产物首尾添加自定义内容（如版权声明）。</li></ul></li><li><p><strong><code>renderChunk</code> 钩子</strong></p><ul><li><strong>作用</strong>：处理单个 chunk 的代码（如压缩、添加 Sourcemap）。</li><li><strong>常用插件</strong>：<code>rollup-plugin-terser</code> 压缩代码。</li></ul></li><li><p><strong><code>generateBundle</code> 钩子</strong></p><ul><li><strong>作用</strong>：所有 chunk 生成后，修改最终产物（如注入全局变量）。</li></ul></li><li><p><strong><code>writeBundle</code> 钩子</strong></p><ul><li><strong>作用</strong>：产物写入磁盘前的最后操作（如校验文件大小）。</li></ul></li><li><p><strong><code>closeBundle</code> 钩子</strong></p><ul><li><strong>作用</strong>：构建完全结束（关闭文件句柄、释放内存）。</li></ul></li></ol><p><strong>输出</strong>：</p><ul><li>通过 <code>bundle.generate()</code> 返回内存中的代码（适用于 SSR）。</li><li>通过 <code>bundle.write()</code> 将产物写入磁盘（如 <code>dist/bundle.js</code>）。</li></ul><h2 id="⚙️-三、插件钩子的核心类型与作用" tabindex="-1">⚙️ <strong>三、插件钩子的核心类型与作用</strong> <a class="header-anchor" href="#⚙️-三、插件钩子的核心类型与作用" aria-label="Permalink to “⚙️ 三、插件钩子的核心类型与作用”">​</a></h2><p>Rollup 的插件机制依赖以下钩子类型，控制执行逻辑：</p><table tabindex="0"><thead><tr><th><strong>钩子类型</strong></th><th><strong>作用</strong></th><th><strong>示例钩子</strong></th></tr></thead><tbody><tr><td><strong>Async/Sync</strong></td><td>异步钩子可返回 Promise；同步钩子需立即返回结果</td><td><code>transform</code>（Async）</td></tr><tr><td><strong>Parallel</strong></td><td>并发执行插件逻辑（如 <code>buildStart</code>）</td><td><code>buildStart</code></td></tr><tr><td><strong>Sequential</strong></td><td>串行执行，前一个插件的返回值作为下一个的输入</td><td><code>transform</code></td></tr><tr><td><strong>First</strong></td><td>一旦某个插件返回非 <code>null</code> 值，则停止后续执行</td><td><code>resolveId</code></td></tr></tbody></table><h2 id="🌟-四、关键优化技术" tabindex="-1">🌟 <strong>四、关键优化技术</strong> <a class="header-anchor" href="#🌟-四、关键优化技术" aria-label="Permalink to “🌟 四、关键优化技术”">​</a></h2><ol><li><strong>Tree Shaking</strong><ul><li>依赖 ES 模块的静态结构，移除未使用的代码（如未导出的函数）。</li></ul></li><li><strong>代码分割（Code Splitting）</strong><ul><li>通过动态导入（<code>import()</code>）分割代码，生成按需加载的 chunk。</li></ul></li><li><strong>格式兼容</strong><ul><li>支持输出 <code>esm</code>、<code>cjs</code>、<code>iife</code> 等多种格式，适配不同环境。</li></ul></li></ol><h2 id="💎-总结" tabindex="-1">💎 <strong>总结</strong> <a class="header-anchor" href="#💎-总结" aria-label="Permalink to “💎 总结”">​</a></h2><p>Rollup 通过 <strong>Build → Output</strong> 两阶段实现高效打包：</p><ul><li><strong>Build 阶段</strong>：解析模块依赖关系，粒度到<strong>单个文件</strong>，核心是生成模块图。</li><li><strong>Output 阶段</strong>：优化（Tree Shaking、作用域提升）并输出代码，粒度到 <strong>chunk</strong>（打包后的代码块）。<br><strong>插件系统</strong>是 Rollup 扩展性的核心，开发者可通过钩子介入每个子流程，实现路径别名、代码压缩等复杂需求。</li></ul>',19)]))}const h=t(e,[["render",s]]);export{p as __pageData,h as default};
