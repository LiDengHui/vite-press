import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const i=JSON.parse(`{"title":"数的表示","description":"","frontmatter":{},"headers":[],"relativePath":"语言/JavaScript/数的表示.md","filePath":"语言/JavaScript/数的表示.md","lastUpdated":1751812369000}`),a={name:`语言/JavaScript/数的表示.md`};function o(t,i,a,o,s,c){return e(),n(`div`,null,i[0]||=[r(`<h1 id="数的表示" tabindex="-1">数的表示 <a class="header-anchor" href="#数的表示" aria-label="Permalink to “数的表示”">​</a></h1><p>在 JavaScript 中，数字可以有不同的表示形式和含义。以下是每个数字的解释：</p><ol><li><p><strong><code>11</code></strong></p><ul><li>普通的十进制数字，值为 11。</li></ul></li><li><p><strong><code>.11</code></strong></p><ul><li>省略了整数部分的浮点数，等同于 <code>0.11</code>。</li></ul></li><li><p><strong><code>11.</code></strong></p><ul><li>带有小数点的数字，但小数部分为 0，等同于 <code>11.0</code> 或 <code>11</code>（仍然是浮点数类型，但值等于整数 11）。</li></ul></li><li><p><strong><code>011</code></strong></p><ul><li><strong>已弃用的八进制表示法</strong>（在严格模式下会报错）。在非严格模式下，<code>011</code> 会被解释为八进制，值为 <code>9</code>（因为 <code>0</code> 开头表示八进制）。</li><li>注意：现代 JavaScript 推荐使用 <code>0o11</code> 表示八进制。</li></ul></li><li><p><strong><code>080</code></strong></p><ul><li>看起来像八进制，但由于八进制数字只能是 <code>0-7</code>，<code>8</code> 是无效的，所以 <code>080</code> 会被解释为十进制，值为 <code>80</code>。</li><li>注意：在严格模式下，<code>080</code> 会报错（因为 <code>0</code> 开头会被尝试解析为八进制）。</li></ul></li><li><p><strong><code>0o11</code></strong></p><ul><li>标准的八进制表示法（ES6+），<code>0o</code> 开头表示八进制，<code>11</code> 的八进制值为 <code>9</code>（因为 <code>1×8 + 1 = 9</code>）。</li></ul></li><li><p><strong><code>0o80</code></strong></p><ul><li>无效的八进制数字，因为 <code>8</code> 不是合法的八进制数字，会抛出语法错误。</li></ul></li><li><p><strong><code>0b11</code></strong></p><ul><li>二进制表示法（ES6+），<code>0b</code> 开头表示二进制，<code>11</code> 的二进制值为 <code>3</code>（因为 <code>1×2 + 1 = 3</code>）。</li></ul></li><li><p><strong><code>0x11</code></strong></p><ul><li>十六进制表示法，<code>0x</code> 开头表示十六进制，<code>11</code> 的十六进制值为 <code>17</code>（因为 <code>1×16 + 1 = 17</code>）。</li></ul></li><li><p><strong><code>11e2</code></strong></p><ul><li>科学计数法，表示 <code>11 × 10²</code>，即 <code>1100</code>。</li></ul></li><li><p><strong><code>11.toString()</code></strong></p><ul><li>会抛出语法错误，因为 JavaScript 解析器会将 <code>11.</code> 当作浮点数的一部分，然后尝试解析 <code>toString()</code>，导致错误。</li><li>正确的写法是： <ul><li><code>(11).toString()</code> 或</li><li><code>11..toString()</code>（第一个点表示小数点，第二个点是方法调用）。</li></ul></li></ul></li><li><p><strong><code>11 .toString()</code></strong></p><ul><li>可以正常执行，因为数字和点之间有空格，JavaScript 能正确识别为对数字 <code>11</code> 调用 <code>toString()</code> 方法。</li><li>返回值是字符串 <code>&quot;11&quot;</code>。</li></ul></li></ol><h2 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to “总结：”">​</a></h2><table tabindex="0"><thead><tr><th>数字表示</th><th>含义</th></tr></thead><tbody><tr><td><code>11</code></td><td>十进制 11</td></tr><tr><td><code>.11</code></td><td>浮点数 0.11</td></tr><tr><td><code>11.</code></td><td>浮点数 11.0（等同于 11）</td></tr><tr><td><code>011</code></td><td>非严格模式下为八进制 9，严格模式下报错</td></tr><tr><td><code>080</code></td><td>非严格模式下为十进制 80（因为 8 不是合法八进制数字），严格模式报错</td></tr><tr><td><code>0o11</code></td><td>八进制 9</td></tr><tr><td><code>0o80</code></td><td>语法错误（8 不是合法八进制数字）</td></tr><tr><td><code>0b11</code></td><td>二进制 3</td></tr><tr><td><code>0x11</code></td><td>十六进制 17</td></tr><tr><td><code>11e2</code></td><td>科学计数法 1100（11 × 10²）</td></tr><tr><td><code>11.toString()</code></td><td>语法错误（解析器混淆）</td></tr><tr><td><code>11 .toString()</code></td><td>正确写法，返回字符串 <code>&quot;11&quot;</code></td></tr></tbody></table>`,5)])}var s=t(a,[[`render`,o]]);export{i as __pageData,s as default};