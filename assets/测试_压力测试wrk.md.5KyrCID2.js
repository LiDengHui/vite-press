import{F as e,J as t,T as n,b as r,f as i,j as a,k as o,m as s,p as c,q as l,r as u}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";const d=JSON.parse(`{"title":"🖥️ 使用wrk对Nginx进行压力测试","description":"","frontmatter":{},"headers":[],"relativePath":"测试/压力测试wrk.md","filePath":"测试/压力测试wrk.md","lastUpdated":1755956237000}`),f={name:`测试/压力测试wrk.md`};function p(r,d,f,p,m,h){let g=t(`Mermaid`);return e(),s(`div`,null,[d[1]||=a(`p`,null,[l(`在Mac上对Nginx SSG（静态站点生成）进行压力测试，我推荐使用 `),a(`strong`,null,`wrk`),l(` 🚀。这款工具轻量、高性能，且安装使用简单，非常适合快速验证Nginx服务的性能。`)],-1),d[2]||=a(`p`,null,`下面是一份用wrk对Nginx进行压力测试的指南。`,-1),d[3]||=a(`h1`,{id:`🖥️-使用wrk对nginx进行压力测试`,tabindex:`-1`},[l(`🖥️ 使用wrk对Nginx进行压力测试 `),a(`a`,{class:`header-anchor`,href:`#🖥️-使用wrk对nginx进行压力测试`,"aria-label":`Permalink to “🖥️ 使用wrk对Nginx进行压力测试”`},`​`)],-1),d[4]||=a(`h2`,{id:`📊-1-压力测试简要流程`,tabindex:`-1`},[l(`📊 1. 压力测试简要流程 `),a(`a`,{class:`header-anchor`,href:`#📊-1-压力测试简要流程`,"aria-label":`Permalink to “📊 1. 压力测试简要流程”`},`​`)],-1),d[5]||=a(`p`,null,`一个完整的压力测试通常包括几个关键步骤：明确测试目标、准备测试环境、执行测试命令以及分析解读结果。下图简要说明了这一流程：`,-1),(e(),o(i,null,{default:n(()=>[u(g,{id:`mermaid-15`,class:`mermaid my-class main img`,graph:`flowchart%20TD%0A%20%20%20%20A%5B%E5%BC%80%E5%A7%8B%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%5D%20--%3E%20B(%E6%98%8E%E7%A1%AE%E6%B5%8B%E8%AF%95%E7%9B%AE%E6%A0%87%3Cbr%3E%E4%BE%8B%E5%A6%82%3A%E5%90%9E%E5%90%90%E9%87%8F%2C%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4)%0A%20%20%20%20B%20--%3E%20C(%E5%87%86%E5%A4%87%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%3Cbr%3E%E7%8B%AC%E7%AB%8B%E6%B5%8B%E8%AF%95%E6%9C%BA%2C%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7)%0A%20%20%20%20C%20--%3E%20D%5B%E6%89%A7%E8%A1%8Cwrk%E6%B5%8B%E8%AF%95%E5%91%BD%E4%BB%A4%5D%0A%20%20%20%20D%20--%3E%20E%7B%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%7D%0A%20%20%20%20E%20--%20%E5%85%B3%E6%B3%A8%E7%82%B9%20--%3E%20F%5B%E5%BB%B6%E8%BF%9F%E5%88%86%E5%B8%83%3Cbr%3EPercentile%5D%0A%20%20%20%20E%20--%20%E5%85%B3%E6%B3%A8%E7%82%B9%20--%3E%20G%5B%E5%90%9E%E5%90%90%E9%87%8F%3Cbr%3ERequests%2Fsec%5D%0A%20%20%20%20E%20--%20%E5%85%B3%E6%B3%A8%E7%82%B9%20--%3E%20H%5B%E9%94%99%E8%AF%AF%E4%B8%8E%E8%B6%85%E6%97%B6%3Cbr%3ESocket%20errors%5D%0A%20%20%20%20F%20--%3E%20I%5B%E8%AF%84%E4%BC%B0%E6%80%A7%E8%83%BD%E4%B8%8E%E9%A2%84%E6%9C%9F%E5%B7%AE%E5%BC%82%5D%0A%20%20%20%20G%20--%3E%20I%0A%20%20%20%20H%20--%3E%20I%0A%20%20%20%20I%20--%3E%20J%7B%E6%98%AF%E5%90%A6%E5%8F%91%E7%8E%B0%E7%93%B6%E9%A2%88%E6%88%96%E5%BC%82%E5%B8%B8%3F%7D%0A%20%20%20%20J%20--%20%E6%98%AF%20--%3E%20K%5B%E8%B0%83%E6%95%B4Nginx%E6%88%96%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0%3Cbr%3E%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%3Cbr%3E%E6%A0%B9%E6%8D%AE%E5%8F%91%E7%8E%B0%E4%BC%98%E5%8C%96%5D%0A%20%20%20%20J%20--%20%E5%90%A6%20--%3E%20L%5B%E6%B5%8B%E8%AF%95%E5%AE%8C%E6%88%90%5D%0A%20%20%20%20K%20--%3E%20D%0A`})]),fallback:n(()=>d[0]||=[l(` Loading... `,-1)]),_:1})),d[6]||=c(`<p>你可以根据上述流程，规划并执行你的测试。</p><h2 id="🔧-2-安装wrk" tabindex="-1">🔧 2. 安装wrk <a class="header-anchor" href="#🔧-2-安装wrk" aria-label="Permalink to “🔧 2. 安装wrk”">​</a></h2><p>在Mac上，你可以使用Homebrew轻松安装wrk：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wrk</span></span></code></pre></div><p>安装完成后，可以通过运行 <code>wrk -v</code> 来验证安装是否成功。</p><h2 id="🚀-3-编写wrk命令" tabindex="-1">🚀 3. 编写wrk命令 <a class="header-anchor" href="#🚀-3-编写wrk命令" aria-label="Permalink to “🚀 3. 编写wrk命令”">​</a></h2><p>wrk的基本命令格式如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">线程</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">连接</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试时</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">间</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --latency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">测试UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="🎯-常用参数说明" tabindex="-1">🎯 常用参数说明 <a class="header-anchor" href="#🎯-常用参数说明" aria-label="Permalink to “🎯 常用参数说明”">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">建议值范围（仅供参考）</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-t</code></td><td style="text-align:left;">使用的<strong>线程数</strong></td><td style="text-align:left;">不超过Mac CPU物理核心数</td></tr><tr><td style="text-align:left;"><code>-c</code></td><td style="text-align:left;">保持打开的<strong>并发连接数</strong></td><td style="text-align:left;">可根据测试目标逐步增加</td></tr><tr><td style="text-align:left;"><code>-d</code></td><td style="text-align:left;"><strong>测试持续时间</strong></td><td style="text-align:left;">例如 <code>30s</code>, <code>1m</code></td></tr><tr><td style="text-align:left;"><code>--latency</code></td><td style="text-align:left;">显示详细的<strong>延迟分布统计信息</strong></td><td style="text-align:left;">无参数</td></tr><tr><td style="text-align:left;"><code>-H, --header</code></td><td style="text-align:left;">添加HTTP请求头</td><td style="text-align:left;">例如 <code>&quot;User-Agent: wrk&quot;</code></td></tr><tr><td style="text-align:left;"><code>-s, --script</code></td><td style="text-align:left;">指定Lua脚本<strong>实现复杂请求</strong>（如POST）</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="💻-测试命令示例" tabindex="-1">💻 测试命令示例 <a class="header-anchor" href="#💻-测试命令示例" aria-label="Permalink to “💻 测试命令示例”">​</a></h3><p>假设你的Nginx SSG本地访问地址是 <code>http://localhost:8080</code>，你可以尝试以下命令：</p><h4 id="⚡-快速测试-轻负载摸底" tabindex="-1">⚡ 快速测试（轻负载摸底） <a class="header-anchor" href="#⚡-快速测试-轻负载摸底" aria-label="Permalink to “⚡ 快速测试（轻负载摸底）”">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d10s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --latency</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8080</span></span></code></pre></div><h4 id="🔥-压力测试-模拟高并发" tabindex="-1">🔥 压力测试（模拟高并发） <a class="header-anchor" href="#🔥-压力测试-模拟高并发" aria-label="Permalink to “🔥 压力测试（模拟高并发）”">​</a></h4><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d30s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --latency</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8080</span></span></code></pre></div><p>这个命令会使用4个线程、100个HTTP连接，对服务器持续测试30秒，并最终输出延迟分布统计。</p><h4 id="📝-带特定http头的测试" tabindex="-1">📝 带特定HTTP头的测试 <a class="header-anchor" href="#📝-带特定http头的测试" aria-label="Permalink to “📝 带特定HTTP头的测试”">​</a></h4><p>如果你需要为请求附加特定的Header（比如模拟特定的User-Agent或处理缓存），可以使用 <code>-H</code> 参数：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d30s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --latency</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;User-Agent: wrk&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:8080</span></span></code></pre></div><h2 id="📈-4-解读wrk结果" tabindex="-1">📈 4. 解读wrk结果 <a class="header-anchor" href="#📈-4-解读wrk结果" aria-label="Permalink to “📈 4. 解读wrk结果”">​</a></h2><p>执行测试命令后，wrk会输出类似以下的结果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>Running 30s test @ http://localhost:8080</span></span>
<span class="line"><span>  4 threads and 100 connections</span></span>
<span class="line"><span>  Thread Stats   Avg      Stdev     Max   +/- Stdev</span></span>
<span class="line"><span>    Latency    24.76ms   10.12ms 199.55ms   85.12%</span></span>
<span class="line"><span>    Req/Sec     1.03k   201.26     1.98k    69.00%</span></span>
<span class="line"><span>  Latency Distribution</span></span>
<span class="line"><span>     50%   23.01ms</span></span>
<span class="line"><span>     75%   28.54ms</span></span>
<span class="line"><span>     90%   36.65ms</span></span>
<span class="line"><span>     99%   61.85ms</span></span>
<span class="line"><span>  123456 requests in 30.10s, 1.23GB read</span></span>
<span class="line"><span>Requests/sec:   4101.23</span></span>
<span class="line"><span>Transfer/sec:     41.82MB</span></span></code></pre></div><p>你需要关注这些关键指标：</p><ul><li><strong>Latency (延迟)</strong>：特别是 <strong>Latency Distribution</strong> 部分，它显示了不同百分比请求的响应时间（如P50, P90, P99）。<strong>P99</strong> 或 <strong>P95</strong> 值能告诉你最慢的那部分请求的体验。</li><li><strong>Req/Sec (每秒请求数)</strong>：即<strong>吞吐量</strong>，表示服务器每秒处理的请求数。这个值通常是<strong>越高越好</strong>。</li><li><strong>Thread Stats</strong>：展示了延迟 (<code>Latency</code>) 和每秒请求数 (<code>Req/Sec</code>) 的<strong>平均值、标准差、最大值</strong>等，帮你了解数据的波动情况。</li><li><strong>Socket errors</strong>：如果出现大量的连接错误、读写错误或超时，可能意味着服务器或测试机遇到了资源瓶颈（如端口数、打开文件数限制）。</li><li><strong>Requests/sec</strong>：所有线程加总的<strong>平均每秒请求数</strong>，是衡量服务器整体吞吐能力的核心指标。</li><li><strong>Transfer/sec</strong>：每秒从服务器接收的<strong>数据量</strong>。</li></ul><h2 id="⚠️-5-压力测试注意事项" tabindex="-1">⚠️ 5. 压力测试注意事项 <a class="header-anchor" href="#⚠️-5-压力测试注意事项" aria-label="Permalink to “⚠️ 5. 压力测试注意事项”">​</a></h2><p>进行压力测试时，请注意以下几点：</p><ul><li><strong>测试环境隔离</strong>：最好在<strong>独立的测试环境</strong>进行，避免影响生产或其他开发环境。</li><li><strong>循序渐进</strong>：不要一开始就使用极高的并发数。从较低的 <code>-c</code> 和 <code>-t</code> 参数开始，逐步增加，观察系统指标（如CPU、内存）的变化。</li><li><strong>监控系统资源</strong>：在运行wrk的同时，使用Mac的<strong>活动监视器</strong>或命令行工具（如 <code>top</code>, <code>htop</code>）监控Nginx进程和系统整体的CPU、内存占用情况。</li><li><strong>Nginx日志</strong>：观察Nginx的访问日志和错误日志，可以发现是否有异常错误。</li><li><strong>调整系统限制</strong>：Mac对单个进程可打开的文件描述符数量有一定限制。如果进行高并发测试时遇到 <code>too many open files</code> 错误，可以尝试临时提高限制：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ulimit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将当前会话的文件描述符限制提高到10000</span></span></code></pre></div></li><li><strong>理解测试对象</strong>：由于你的站点是SSG（静态站点生成），内容主要是静态资源（HTML, CSS, JS, 图片）。Nginx在处理静态资源时通常性能很高，瓶颈可能出现在磁盘I/O、网络带宽或Nginx自身的工作进程配置上。</li></ul><h2 id="💎-总结" tabindex="-1">💎 总结 <a class="header-anchor" href="#💎-总结" aria-label="Permalink to “💎 总结”">​</a></h2><p>使用wrk对Nginx SSG进行压力测试，<strong>核心步骤</strong>是安装工具、设计并执行测试命令，然后<strong>重点关注结果中的延迟分布（特别是高百分位值）、吞吐量（Requests/sec）和错误信息</strong>。</p><p>结合系统资源监控，你就能比较全面地评估Nginx服务在当前配置下的性能表现，并找到可能的瓶颈所在。</p>`,31)])}var m=r(f,[[`render`,p]]);export{d as __pageData,m as default};