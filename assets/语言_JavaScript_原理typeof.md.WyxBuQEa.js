import{_ as e,c as a,o as n,a7 as d}from"./chunks/framework.DDkSvsBP.js";const u=JSON.parse('{"title":"原理typeof","description":"","frontmatter":{"title":"原理typeof","tags":["js"],"categories":["技术文档","前端","js"],"date":"2020-08-08T19:31:51.000Z"},"headers":[],"relativePath":"语言/JavaScript/原理typeof.md","filePath":"语言/JavaScript/原理typeof.md","lastUpdated":1751078101000}'),s={name:"语言/JavaScript/原理typeof.md"};function o(r,t,l,i,p,c){return n(),a("div",null,t[0]||(t[0]=[d(`<h1 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to “typeof”">​</a></h1><p>typeof基本判断</p><table tabindex="0"><thead><tr><th>类型</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>Undefined</td><td>&quot;undefined&quot;</td><td></td></tr><tr><td>Null</td><td>&quot;object&quot;</td><td>最初实现中，object标签为0，Null的标签为0x00, 所以null被误认为object</td></tr><tr><td>Boolean</td><td>&quot;boolean&quot;</td><td></td></tr><tr><td>Number</td><td>&quot;number&quot;</td><td></td></tr><tr><td>BigInt</td><td>&quot;bigint&quot;</td><td></td></tr><tr><td>String</td><td>&quot;string&quot;</td><td></td></tr><tr><td>Symbol</td><td>&quot;symbol&quot;</td><td></td></tr><tr><td>宿主对象</td><td>取决于具体实现</td><td></td></tr><tr><td>Function对象</td><td>&quot;function&quot;</td><td>除 Function 外的所有构造函数的类型都是 &#39;object, Number</td></tr><tr><td>其他任何对象</td><td>&quot;object&quot;</td><td></td></tr></tbody></table><h2 id="运算优先级" tabindex="-1">运算优先级 <a class="header-anchor" href="#运算优先级" aria-label="Permalink to “运算优先级”">​</a></h2><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to “异常”">​</a></h2><p>在 let 和 const 声明之前，对一个变量使用 typeof 会抛出 ReferenceError，块作用域变量在块的头部处于 <code>暂存死区</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>typeof undeclaredVariable === &#39;undefined&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>typeof newLetVariable; // ReferenceError</span></span>
<span class="line"><span>typeof newConstVariable; // ReferenceError</span></span>
<span class="line"><span>typeof newClass; // ReferenceError</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let newLetVariable;</span></span>
<span class="line"><span>const newConstVariable = &#39;hello&#39;;</span></span>
<span class="line"><span>class newClass{};</span></span></code></pre></div><h2 id="例外" tabindex="-1">例外 <a class="header-anchor" href="#例外" aria-label="Permalink to “例外”">​</a></h2><p>所有浏览器都存在 <code>typeof document.all === undefined</code></p>`,9)]))}const f=e(s,[["render",o]]);export{u as __pageData,f as default};
