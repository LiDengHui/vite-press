import{_ as a,c as i,o as t,a7 as n,aW as e}from"./chunks/framework.CegclTe-.js";const k=JSON.parse('{"title":"强缓存与协商缓存","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/性能优化/强缓存与协商缓存.md","filePath":"浏览器/性能优化/强缓存与协商缓存.md","lastUpdated":1751344787000}'),o={name:"浏览器/性能优化/强缓存与协商缓存.md"};function l(r,s,d,c,h,p){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="强缓存与协商缓存" tabindex="-1">强缓存与协商缓存 <a class="header-anchor" href="#强缓存与协商缓存" aria-label="Permalink to “强缓存与协商缓存”">​</a></h1><p>浏览器缓存中的<strong>强缓存</strong>和<strong>协商缓存</strong>是优化网页加载速度、减少服务器压力的核心机制，它们的核心区别在于<strong>是否向服务器发送请求验证资源有效性</strong>。以下是详细对比和作用说明：</p><hr><h2 id="一、强缓存-本地缓存" tabindex="-1"><strong>一、强缓存（本地缓存）</strong> <a class="header-anchor" href="#一、强缓存-本地缓存" aria-label="Permalink to “一、强缓存（本地缓存）”">​</a></h2><p><strong>核心特点</strong>：<strong>不发送请求到服务器</strong>，直接使用本地缓存。<br><strong>实现方式</strong>（通过HTTP响应头控制）：</p><ol><li><p><strong><code>Cache-Control</code></strong>（优先级更高，HTTP/1.1）</p><ul><li><code>max-age=3600</code>：资源有效期（秒），例如1小时。</li><li><code>no-cache</code>：<strong>跳过强缓存</strong>，直接进入协商缓存。</li><li><code>no-store</code>：禁止任何缓存（包括协商缓存）。</li><li><code>public</code>：允许代理服务器缓存资源。</li><li><code>private</code>：仅允许浏览器缓存（禁止代理缓存）。</li></ul></li><li><p><strong><code>Expires</code></strong>（HTTP/1.0，兼容性保留）</p><ul><li>指定资源的绝对过期时间（如<code>Expires: Wed, 21 Oct 2025 07:28:00 GMT</code>）。</li><li>问题：依赖客户端时间，若时间不准确会导致缓存失效。</li></ul></li></ol><p><strong>缓存生效流程</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>浏览器请求资源 → 检查缓存头（Cache-Control/Expires） → </span></span>
<span class="line"><span>  若未过期 → 直接读取本地缓存（状态码 \`200 (from disk cache)\` 或 \`200 (from memory cache)\`）</span></span></code></pre></div><p><strong>作用</strong>：</p><ul><li><strong>极速加载</strong>：避免网络请求，显著提升页面打开速度。</li><li><strong>降低服务器压力</strong>：减少无效请求。</li></ul><hr><h2 id="二、协商缓存-对比缓存" tabindex="-1"><strong>二、协商缓存（对比缓存）</strong> <a class="header-anchor" href="#二、协商缓存-对比缓存" aria-label="Permalink to “二、协商缓存（对比缓存）”">​</a></h2><p><strong>核心特点</strong>：<strong>向服务器发送请求验证资源是否变更</strong>，未变更则使用缓存（返回304），变更则返回新资源。<br><strong>实现方式</strong>（通过两组HTTP头组合）：</p><ol><li><p><strong><code>Last-Modified</code> &amp; <code>If-Modified-Since</code></strong>：</p><ul><li>服务器返回<code>Last-Modified</code>（资源最后修改时间，如<code>Last-Modified: Wed, 21 Oct 2025 07:28:00 GMT</code>）。</li><li>浏览器下次请求时携带<code>If-Modified-Since</code>（值为上次收到的<code>Last-Modified</code>）。</li><li>服务器对比时间：若未修改 → 返回 <strong><code>304 Not Modified</code></strong>（无响应体）；若修改 → 返回 <strong><code>200</code></strong> + 新资源。</li></ul></li><li><p><strong><code>ETag</code> &amp; <code>If-None-Match</code></strong>（优先级更高，解决时间精度问题）：</p><ul><li>服务器返回<code>ETag</code>（资源的唯一标识符，如<code>ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</code>）。</li><li>浏览器下次请求时携带<code>If-None-Match</code>（值为上次收到的<code>ETag</code>）。</li><li>服务器对比<code>ETag</code>：一致 → 返回 <strong><code>304</code></strong>；不一致 → 返回 <strong><code>200</code></strong> + 新资源。</li></ul></li></ol><p><strong>缓存生效流程</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>浏览器请求资源 → 携带缓存标识（If-Modified-Since/If-None-Match）→ </span></span>
<span class="line"><span>  服务器验证资源是否变更 → </span></span>
<span class="line"><span>    未变更 → 返回 \`304\` → 浏览器读取本地缓存</span></span>
<span class="line"><span>    已变更 → 返回 \`200\` + 新资源 → 浏览器更新缓存</span></span></code></pre></div><p><strong>作用</strong>：</p><ul><li><strong>保证资源时效性</strong>：确保用户获取最新资源。</li><li><strong>节省带宽</strong>：304响应无响应体，减少数据传输量。</li></ul><hr><h2 id="三、关键区别对比" tabindex="-1"><strong>三、关键区别对比</strong> <a class="header-anchor" href="#三、关键区别对比" aria-label="Permalink to “三、关键区别对比”">​</a></h2><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th>强缓存</th><th>协商缓存</th></tr></thead><tbody><tr><td><strong>是否请求服务器</strong></td><td>否（直接读缓存）</td><td>是（发送验证请求）</td></tr><tr><td><strong>响应状态码</strong></td><td><code>200 (from cache)</code></td><td><code>304 Not Modified</code></td></tr><tr><td><strong>控制优先级</strong></td><td><code>Cache-Control</code> &gt; <code>Expires</code></td><td><code>ETag</code> &gt; <code>Last-Modified</code></td></tr><tr><td><strong>网络消耗</strong></td><td>零请求（最快）</td><td>有请求（但304无响应体）</td></tr><tr><td><strong>资源更新</strong></td><td>过期前无法获取新资源</td><td>实时验证，及时更新</td></tr></tbody></table><hr><h2 id="四、实际应用场景" tabindex="-1"><strong>四、实际应用场景</strong> <a class="header-anchor" href="#四、实际应用场景" aria-label="Permalink to “四、实际应用场景”">​</a></h2><ol><li><p><strong>强缓存适用</strong>：</p><ul><li>静态资源（JS/CSS/图片）：设置<code>Cache-Control: max-age=31536000</code>（1年），配合文件名哈希（如<code>app.abc123.js</code>），内容变更后URL改变，强制重新下载。</li><li>不常变化的资源（如字体文件）。</li></ul></li><li><p><strong>协商缓存适用</strong>：</p><ul><li>HTML文件：设置<code>Cache-Control: no-cache</code>，确保页面内容及时更新。</li><li>频繁更新的资源（如用户头像）。</li></ul></li></ol><hr><h2 id="五、缓存策略最佳实践" tabindex="-1"><strong>五、缓存策略最佳实践</strong> <a class="header-anchor" href="#五、缓存策略最佳实践" aria-label="Permalink to “五、缓存策略最佳实践”">​</a></h2><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Nginx 配置示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /static </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 强缓存：1年（通过文件名哈希避免旧缓存）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public, max-age=31536000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 协商缓存：HTML文件禁用强缓存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><ul><li><strong>强缓存</strong>：速度极致，适合长期不变的静态资源。</li><li><strong>协商缓存</strong>：灵活性高，适合需及时更新的内容。<br><strong>二者协同工作</strong>：浏览器先检查强缓存，失效后再触发协商缓存，兼顾性能与资源准确性。<br> 通过合理配置HTTP缓存头，可显著提升用户体验并降低服务器负载。</li></ul><h2 id="测试结果" tabindex="-1">测试结果 <a class="header-anchor" href="#测试结果" aria-label="Permalink to “测试结果”">​</a></h2><p>没有开启强缓存 <img src="`+e+'" alt="" data-zoomable="true" loading="lazy"></p><p>开启强缓存</p>',33)]))}const b=a(o,[["render",l]]);export{k as __pageData,b as default};
