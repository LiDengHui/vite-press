import{_ as i,c as a,o as t,a7 as e}from"./chunks/framework.C7ilHghW.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/RequestIdeaCallback.md","filePath":"浏览器/RequestIdeaCallback.md","lastUpdated":1752741218000}'),l={name:"浏览器/RequestIdeaCallback.md"};function n(h,s,k,r,d,p){return t(),a("div",null,s[0]||(s[0]=[e(`<p><code>requestIdleCallback</code> 是浏览器提供的一个 API，用于在浏览器空闲时期执行低优先级任务，避免阻塞关键渲染和用户交互。以下是详细说明：</p><hr><h3 id="基本语法" tabindex="-1"><strong>基本语法</strong> <a class="header-anchor" href="#基本语法" aria-label="Permalink to “基本语法”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> requestId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(callback[, options])</span></span></code></pre></div><hr><h3 id="参数说明" tabindex="-1"><strong>参数说明</strong> <a class="header-anchor" href="#参数说明" aria-label="Permalink to “参数说明”">​</a></h3><ol><li><p><strong><code>callback</code></strong>（必需）<br> 当浏览器空闲时调用的函数，接收一个参数 <code>deadline</code>：</p><ul><li><strong><code>deadline.timeRemaining()</code></strong><br> 返回当前帧剩余空闲时间（毫秒），通常 ≤ 50ms（浏览器限制）。</li><li><strong><code>deadline.didTimeout</code></strong><br> 布尔值，若为 <code>true</code> 表示回调因 <code>timeout</code> 超时被触发（非自然空闲）。</li></ul></li><li><p><strong><code>options</code></strong>（可选）<br> 配置对象，唯一属性：</p><ul><li><strong><code>timeout</code></strong>（数值）<br> 设置回调执行的超时时间（毫秒）。若指定时间内浏览器未调用回调，则强制在下一帧执行（此时 <code>deadline.didTimeout=true</code>）。</li></ul></li></ol><hr><h3 id="使用示例" tabindex="-1"><strong>使用示例</strong> <a class="header-anchor" href="#使用示例" aria-label="Permalink to “使用示例”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义空闲任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idleTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">deadline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 检查剩余时间或超时状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (deadline.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeRemaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deadline.didTimeout) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tasks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    executeTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(task); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行具体任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 若还有任务，继续调度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tasks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    requestIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idleTask, { timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置2秒超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始调度</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">requestIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(idleTask);</span></span></code></pre></div><hr><h3 id="取消空闲回调" tabindex="-1"><strong>取消空闲回调</strong> <a class="header-anchor" href="#取消空闲回调" aria-label="Permalink to “取消空闲回调”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancelIdleCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestId); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传入 requestIdleCallback 返回的ID</span></span></code></pre></div><hr><h3 id="适用场景" tabindex="-1"><strong>适用场景</strong> <a class="header-anchor" href="#适用场景" aria-label="Permalink to “适用场景”">​</a></h3><ul><li>日志上报、数据分析</li><li>非关键资源的预加载</li><li>后台数据缓存</li><li>耗时计算（如大数据处理）</li></ul><hr><h3 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ol><li><strong>避免操作 DOM</strong><br> 空闲回调可能发生在渲染帧之间，直接操作 DOM 可能导致布局抖动。若需更新 UI，应结合 <code>requestAnimationFrame</code>。</li><li><strong>超时机制慎用</strong><br> 设置 <code>timeout</code> 可能强制回调在非空闲期执行，影响页面性能。</li><li><strong>任务分块执行</strong><br> 单次回调内执行时间应控制在几毫秒内，用 <code>timeRemaining()</code> 检查剩余时间，分批次处理大任务。</li><li><strong>兼容性</strong><br> 支持 Chrome、Firefox、Edge，但不支持 Safari。可使用 <a href="https://github.com/aFarkas/requestIdleCallback" target="_blank" rel="noreferrer">polyfill</a> 或降级方案：</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.requestIdleCallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.requestIdleCallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeRemaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><h3 id="与-requestanimationframe-对比" tabindex="-1"><strong>与 <code>requestAnimationFrame</code> 对比</strong> <a class="header-anchor" href="#与-requestanimationframe-对比" aria-label="Permalink to “与 requestAnimationFrame 对比”">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th><code>requestIdleCallback</code></th><th><code>requestAnimationFrame</code></th></tr></thead><tbody><tr><td><strong>触发时机</strong></td><td>浏览器空闲时</td><td>下一帧渲染前</td></tr><tr><td><strong>适用任务</strong></td><td>非关键、可延迟任务</td><td>动画、布局更新等关键任务</td></tr><tr><td><strong>执行频率</strong></td><td>不固定（取决于空闲时间）</td><td>每帧一次（通常 60fps）</td></tr><tr><td><strong>是否可能阻塞渲染</strong></td><td>否</td><td>是（若任务过长）</td></tr></tbody></table><hr><p>通过合理使用 <code>requestIdleCallback</code>，可以优化页面性能，确保用户交互的流畅性。</p>`,25)]))}const c=i(l,[["render",n]]);export{o as __pageData,c as default};
