import{_ as a,c as i,o as n,a6 as e}from"./chunks/framework.mq8cK8gF.js";const c=JSON.parse('{"title":"Babel插件系统","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/Babel/Babel插件.md","filePath":"工程化/Babel/Babel插件.md","lastUpdated":1750738239000}'),l={name:"工程化/Babel/Babel插件.md"};function t(p,s,h,d,r,k){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="babel插件系统" tabindex="-1">Babel插件系统 <a class="header-anchor" href="#babel插件系统" aria-label="Permalink to “Babel插件系统”">​</a></h1><p>Babel 是一个 JavaScript 编译器，它的插件系统是 Babel 的核心之一，可以让你定制 JavaScript 的编译过程。理解 Babel 插件系统的本质就是理解它是如何把源码的 AST 进行**转换（transform）**的。</p><hr><h2 id="🌱-babel-插件系统概述" tabindex="-1">🌱 Babel 插件系统概述 <a class="header-anchor" href="#🌱-babel-插件系统概述" aria-label="Permalink to “🌱 Babel 插件系统概述”">​</a></h2><p>Babel 插件其实就是一个 <strong>函数</strong>，返回一个包含 <strong><code>visitor</code></strong> 对象的对象，这个对象定义了如何访问（和转换）抽象语法树（AST）中的不同节点。</p><hr><h2 id="📦-babel-插件结构" tabindex="-1">📦 Babel 插件结构 <a class="header-anchor" href="#📦-babel-插件结构" aria-label="Permalink to “📦 Babel 插件结构”">​</a></h2><h3 id="_1-最基础的结构如下" tabindex="-1">1. 最基础的结构如下： <a class="header-anchor" href="#_1-最基础的结构如下" aria-label="Permalink to “1. 最基础的结构如下：”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myBabelPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    visitor: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path.node.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>babel</code>: 是 Babel 提供的工具对象，通常从中解构 <code>types</code> (<code>babel.types</code>)，用于生成和判断 AST 节点。</li><li><code>visitor</code>: 是一个对象，定义了每个节点类型（如 <code>Identifier</code>, <code>FunctionDeclaration</code>）的处理函数。</li></ul><hr><h3 id="_2-插件对象支持的属性" tabindex="-1">2. 插件对象支持的属性 <a class="header-anchor" href="#_2-插件对象支持的属性" aria-label="Permalink to “2. 插件对象支持的属性”">​</a></h3><table tabindex="0"><thead><tr><th>属性名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>visitor</code></td><td>Object</td><td>必填。定义 AST 节点类型对应的处理方法。</td></tr><tr><td><code>name</code></td><td>string</td><td>插件名（推荐）。便于调试和错误提示。</td></tr><tr><td><code>pre</code></td><td>Function</td><td>在插件运行前调用，初始化状态等。</td></tr><tr><td><code>post</code></td><td>Function</td><td>所有节点访问完毕后调用，清理资源等。</td></tr><tr><td><code>manipulateOptions</code></td><td>Function</td><td>用于操作 Babel 配置选项。</td></tr></tbody></table><hr><h2 id="🧠-babel-插件运行原理" tabindex="-1">🧠 Babel 插件运行原理 <a class="header-anchor" href="#🧠-babel-插件运行原理" aria-label="Permalink to “🧠 Babel 插件运行原理”">​</a></h2><ol><li>Babel 首先将代码解析成 AST（抽象语法树）；</li><li>然后调用插件，依次执行插件中的 <code>visitor</code>；</li><li>每个 <code>visitor</code> 方法接收到的是 <code>path</code>，它包含了当前 AST 节点和上下文操作；</li><li>插件可以读取、替换、插入节点，控制代码的最终输出。</li></ol><hr><h2 id="👣-ast-visitor-模式" tabindex="-1">👣 AST Visitor 模式 <a class="header-anchor" href="#👣-ast-visitor-模式" aria-label="Permalink to “👣 AST Visitor 模式”">​</a></h2><p>Babel 使用的是<strong>访问者模式（Visitor Pattern）</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>visitor: {</span></span>
<span class="line"><span>  FunctionDeclaration(path) {</span></span>
<span class="line"><span>    console.log(&#39;函数名是：&#39;, path.node.id.name);</span></span>
<span class="line"><span>    path.remove(); // 删除函数声明</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>你也可以使用 <code>enter</code> / <code>exit</code> 钩子来在进入或离开某个节点时做事情：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>visitor: {</span></span>
<span class="line"><span>  Identifier: {</span></span>
<span class="line"><span>    enter(path) {</span></span>
<span class="line"><span>      console.log(&#39;进入标识符&#39;, path.node.name);</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    exit(path) {</span></span>
<span class="line"><span>      console.log(&#39;离开标识符&#39;, path.node.name);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><h2 id="🔧-使用-babel-types-工具" tabindex="-1">🔧 使用 <code>babel.types</code> 工具 <a class="header-anchor" href="#🔧-使用-babel-types-工具" aria-label="Permalink to “🔧 使用 babel.types 工具”">​</a></h2><p>Babel 的 <code>types</code>（简称 <code>t</code>） 提供了构造、判断、修改 AST 的方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>const { types: t } = babel;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>visitor: {</span></span>
<span class="line"><span>  BinaryExpression(path) {</span></span>
<span class="line"><span>    if (t.isIdentifier(path.node.left, { name: &quot;a&quot; })) {</span></span>
<span class="line"><span>      path.node.left = t.identifier(&quot;b&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><hr><h2 id="🛠-示例-把所有-var-替换为-let" tabindex="-1">🛠 示例：把所有 <code>var</code> 替换为 <code>let</code> <a class="header-anchor" href="#🛠-示例-把所有-var-替换为-let" aria-label="Permalink to “🛠 示例：把所有 var 替换为 let”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;transform-var-to-let&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    visitor: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      VariableDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (path.node.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;var&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          path.node.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;let&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="🧩-插件类型" tabindex="-1">🧩 插件类型 <a class="header-anchor" href="#🧩-插件类型" aria-label="Permalink to “🧩 插件类型”">​</a></h2><p>Babel 插件可以分为几类：</p><table tabindex="0"><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>转换插件（Transform）</td><td>@babel/plugin-transform-arrow-functions</td><td>转换语法、功能</td></tr><tr><td>语法插件（Syntax）</td><td>@babel/plugin-syntax-dynamic-import</td><td>仅解析语法，不转换</td></tr><tr><td>宏插件（Macro）</td><td>babel-plugin-macros</td><td>处理编译期宏逻辑</td></tr><tr><td>开发插件（Custom）</td><td>你自定义的插件</td><td>只用于项目定制</td></tr></tbody></table><hr><h2 id="⚙️-配置插件" tabindex="-1">⚙️ 配置插件 <a class="header-anchor" href="#⚙️-配置插件" aria-label="Permalink to “⚙️ 配置插件”">​</a></h2><p>在 <code>.babelrc</code> 或 <code>babel.config.js</code> 中配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// babel.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;./my-plugin.js&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 相对路径或 npm 包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h2 id="🧪-插件调试技巧" tabindex="-1">🧪 插件调试技巧 <a class="header-anchor" href="#🧪-插件调试技巧" aria-label="Permalink to “🧪 插件调试技巧”">​</a></h2><ul><li>使用 <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">AST Explorer</a> 观察 AST 树结构。</li><li>给插件加 <code>console.log()</code> 来追踪节点访问顺序。</li><li>熟悉 Babel 提供的 <code>path.replaceWith</code>, <code>path.remove</code>, <code>path.insertBefore</code> 等 API。</li></ul><hr><h2 id="🧩-开发一个插件的推荐步骤" tabindex="-1">🧩 开发一个插件的推荐步骤 <a class="header-anchor" href="#🧩-开发一个插件的推荐步骤" aria-label="Permalink to “🧩 开发一个插件的推荐步骤”">​</a></h2><ol><li>用 AST Explorer 研究你要转换的代码结构；</li><li>编写一个 Babel 插件，监听对应的节点类型；</li><li>使用 Babel 的 API 替换节点；</li><li>本地测试或者配合 <code>babel-cli</code> 编译测试代码。</li></ol><hr>`,44)]))}const E=a(l,[["render",t]]);export{c as __pageData,E as default};
