import{_ as i,c as t,o as a,a7 as n,aQ as e,aR as l,aS as o,aT as d}from"./chunks/framework.CegclTe-.js";const y=JSON.parse('{"title":"元素的尺寸","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/元素的尺寸.md","filePath":"浏览器/元素的尺寸.md","lastUpdated":1751812369000}'),r={name:"浏览器/元素的尺寸.md"};function h(c,s,p,g,k,E){return a(),t("div",null,s[0]||(s[0]=[n('<h1 id="元素的尺寸" tabindex="-1">元素的尺寸 <a class="header-anchor" href="#元素的尺寸" aria-label="Permalink to “元素的尺寸”">​</a></h1><p>在 DOM 中，元素的各种尺寸属性用于描述元素的布局和几何信息。以下是常见的尺寸属性及其含义：</p><hr><h3 id="_1-偏移尺寸-offset-dimensions" tabindex="-1"><strong>1. 偏移尺寸（Offset Dimensions）</strong> <a class="header-anchor" href="#_1-偏移尺寸-offset-dimensions" aria-label="Permalink to “1. 偏移尺寸（Offset Dimensions）”">​</a></h3><p><img src="'+e+'" alt="" data-zoomable="true" loading="lazy"></p><p>与元素的<strong>视觉占据空间</strong>相关，包括边框、滚动条和内边距，但不包括外边距。</p><ul><li><strong><code>offsetWidth</code></strong>: 元素的总宽度（内容宽度 + 左右内边距 + 左右边框 + 垂直滚动条宽度）。</li><li><strong><code>offsetHeight</code></strong>: 元素的总高度（内容高度 + 上下内边距 + 上下边框 + 水平滚动条高度）。</li><li><strong><code>offsetLeft</code></strong>: 元素左上角相对于<strong>最近定位父元素</strong>（或 <code>offsetParent</code>）的左边缘的水平距离。</li><li><strong><code>offsetTop</code></strong>: 元素左上角相对于<strong>最近定位父元素</strong>（或 <code>offsetParent</code>）的上边缘的垂直距离。</li><li><strong><code>offsetParent</code></strong>: 指向最近的定位祖先元素（<code>position</code> 不为 <code>static</code>），决定 <code>offsetLeft/Top</code> 的参照。</li></ul><hr><h3 id="_2-客户端尺寸-client-dimensions" tabindex="-1"><strong>2. 客户端尺寸（Client Dimensions）</strong> <a class="header-anchor" href="#_2-客户端尺寸-client-dimensions" aria-label="Permalink to “2. 客户端尺寸（Client Dimensions）”">​</a></h3><p><img src="'+l+'" alt="" data-zoomable="true" loading="lazy"></p><p>表示元素的<strong>可视区域</strong>（内容 + 内边距），不包括边框、滚动条和外边距。</p><ul><li><strong><code>clientWidth</code></strong>: 内容宽度 + 左右内边距（不包含滚动条和边框）。</li><li><strong><code>clientHeight</code></strong>: 内容高度 + 上下内边距（不包含滚动条和边框）。</li><li><strong><code>clientLeft</code></strong>: 左边框的宽度（通常与 <code>border-left-width</code> 相同）。</li><li><strong><code>clientTop</code></strong>: 上边框的高度（通常与 <code>border-top-width</code> 相同）。</li></ul><hr><h3 id="_3-滚动尺寸-scroll-dimensions" tabindex="-1"><strong>3. 滚动尺寸（Scroll Dimensions）</strong> <a class="header-anchor" href="#_3-滚动尺寸-scroll-dimensions" aria-label="Permalink to “3. 滚动尺寸（Scroll Dimensions）”">​</a></h3><p><img src="'+o+'" alt="" data-zoomable="true" loading="lazy"> 与元素的<strong>滚动内容区域</strong>相关。</p><ul><li><strong><code>scrollWidth</code></strong>: 元素内容的实际总宽度（包括不可见部分），无水平滚动条时等于 <code>clientWidth</code>。</li><li><strong><code>scrollHeight</code></strong>: 元素内容的实际总高度（包括不可见部分），无垂直滚动条时等于 <code>clientHeight</code>。</li><li><strong><code>scrollLeft</code></strong>: 元素内容向左滚动的像素数（可读写，用于控制滚动位置）。</li><li><strong><code>scrollTop</code></strong>: 元素内容向上滚动的像素数（可读写，用于控制滚动位置）。</li></ul><hr><h3 id="_4-边界矩形-bounding-rectangle" tabindex="-1"><strong>4. 边界矩形（Bounding Rectangle）</strong> <a class="header-anchor" href="#_4-边界矩形-bounding-rectangle" aria-label="Permalink to “4. 边界矩形（Bounding Rectangle）”">​</a></h3><p><img src="'+d+`" alt="" data-zoomable="true" loading="lazy"></p><p>通过 <code>getBoundingClientRect()</code> 获取，返回元素相对于<strong>视口</strong>的几何信息：</p><ul><li><strong><code>width</code></strong>: 元素的宽度（包括内容、内边距、边框）。</li><li><strong><code>height</code></strong>: 元素的高度（包括内容、内边距、边框）。</li><li><strong><code>left</code>/<code>x</code></strong>: 元素左边界相对于视口左边的距离。</li><li><strong><code>top</code>/<code>y</code></strong>: 元素上边界相对于视口顶部的距离。</li><li><strong><code>right</code></strong>: 元素右边界相对于视口左边的距离。</li><li><strong><code>bottom</code></strong>: 元素下边界相对于视口顶部的距离。</li></ul><hr><h3 id="关键区别总结" tabindex="-1"><strong>关键区别总结</strong> <a class="header-anchor" href="#关键区别总结" aria-label="Permalink to “关键区别总结”">​</a></h3><table tabindex="0"><thead><tr><th>属性/方法</th><th>包含内容</th><th>参照系</th><th>典型用途</th></tr></thead><tbody><tr><td><code>offsetWidth/Height</code></td><td>内容 + 内边距 + 边框 + 滚动条</td><td>元素自身</td><td>获取元素占据的总空间</td></tr><tr><td><code>clientWidth/Height</code></td><td>内容 + 内边距（无滚动条）</td><td>元素自身</td><td>获取可视区域大小</td></tr><tr><td><code>scrollWidth/Height</code></td><td>实际内容总大小（可滚动部分）</td><td>元素自身</td><td>检测内容是否溢出</td></tr><tr><td><code>getBoundingClientRect()</code></td><td>内容 + 内边距 + 边框</td><td>视口（viewport）</td><td>计算元素在屏幕中的精确位置</td></tr></tbody></table><hr><h3 id="示例场景" tabindex="-1"><strong>示例场景</strong> <a class="header-anchor" href="#示例场景" aria-label="Permalink to “示例场景”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> box</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素总宽度（含边框、内边距）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(box.offsetWidth);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取可视区域高度（不含边框、滚动条）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(box.clientHeight);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检测内容是否溢出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (box.scrollHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.clientHeight) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;内容有垂直滚动条！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取元素相对于视口的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBoundingClientRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`元素距离视口顶部：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><h3 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ol><li>所有值均为整数（像素单位，四舍五入）。</li><li>滚动尺寸（<code>scrollWidth/Height</code>）可能因浏览器对子元素边距的处理略有差异。</li><li>修改 CSS 的 <code>box-sizing</code> 会影响 <code>clientWidth/Height</code> 的计算（例如设为 <code>border-box</code> 时，宽度包含边框）。</li></ol><p>理解这些属性有助于精准控制布局、实现滚动检测或动态定位！</p>`,31)]))}const b=i(r,[["render",h]]);export{y as __pageData,b as default};
