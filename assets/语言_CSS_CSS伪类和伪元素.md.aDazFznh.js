import{F as e,b as t,m as n,p as r}from"./chunks/plugin-vue_export-helper.TNYQ6xSD.js";var i=`/vite-press/assets/52469045660155.B3P5YkG4.png`,a=`/vite-press/assets/52320546149205.DfTrTYtD.png`;const o=JSON.parse(`{"title":"CSS 伪类和伪元素","description":"","frontmatter":{},"headers":[],"relativePath":"语言/CSS/CSS伪类和伪元素.md","filePath":"语言/CSS/CSS伪类和伪元素.md","lastUpdated":1754714200000}`),s={name:`语言/CSS/CSS伪类和伪元素.md`};function c(t,o,s,c,l,u){return e(),n(`div`,null,o[0]||=[r(`<h1 id="css-伪类和伪元素" tabindex="-1">CSS 伪类和伪元素 <a class="header-anchor" href="#css-伪类和伪元素" aria-label="Permalink to “CSS 伪类和伪元素”">​</a></h1><p>CSS 的伪类和伪元素是强大的选择器，用于选择元素的特定状态或文档树中不存在的部分（虚拟元素）。它们以 <code>:</code> 或 <code>::</code> 开头。</p><h2 id="核心区别" tabindex="-1">核心区别 <a class="header-anchor" href="#核心区别" aria-label="Permalink to “核心区别”">​</a></h2><ul><li><strong>伪类 (<code>:</code>):</strong> 选择处于<strong>特定状态</strong>的<strong>已有元素</strong>（例如：鼠标悬停、被点击、是第一个子元素、被聚焦等）。</li><li><strong>伪元素 (<code>::</code>):</strong> 选择并样式化元素的<strong>特定部分</strong>或<strong>创建新的虚拟元素</strong>（例如：元素的第一行、第一个字母、在元素内容之前或之后插入内容等）。</li></ul><hr><h2 id="一、-伪类-pseudo-classes" tabindex="-1">一、 伪类 (Pseudo-Classes) <a class="header-anchor" href="#一、-伪类-pseudo-classes" aria-label="Permalink to “一、 伪类 (Pseudo-Classes)”">​</a></h2><p>伪类以一个冒号 (<code>:</code>) 开头，用于定义元素的特殊状态。<strong>触发依赖于用户交互、元素在文档树中的位置、表单状态等。</strong></p><h3 id="常见伪类及其触发条件" tabindex="-1">常见伪类及其触发条件 <a class="header-anchor" href="#常见伪类及其触发条件" aria-label="Permalink to “常见伪类及其触发条件”">​</a></h3><ol><li><p><strong>动态/用户交互伪类 (最常用):</strong></p><ul><li><code>:hover</code>: 当用户将鼠标指针悬停在元素上时触发。</li><li><code>:active</code>: 当元素被用户激活（例如鼠标点击按下时）时触发。</li><li><code>:focus</code>: 当元素获得焦点时触发（例如通过键盘 Tab 键聚焦到输入框，或鼠标点击输入框）。</li><li><code>:focus-visible</code>: 当元素获得焦点且浏览器认为焦点应该可见（通常是键盘操作获得焦点）时触发。更符合可访问性。</li><li><code>:focus-within</code>: 当元素自身或其<strong>任何后代元素</strong>获得焦点时触发。常用于高亮整个表单区域。</li><li><code>:visited</code>: 选择用户已访问过的链接 (<code>&lt;a&gt;</code>)。出于隐私限制，可应用的样式有限（通常只能改颜色）。</li></ul></li><li><p><strong>结构伪类 (基于位置):</strong></p><ul><li><code>:first-child</code>: 选择是其父元素的<strong>第一个</strong>子元素的元素。</li><li><code>:last-child</code>: 选择是其父元素的<strong>最后一个</strong>子元素的元素。</li><li><code>:nth-child(n)</code>: 选择是其父元素的<strong>第 n 个</strong>子元素的元素。<code>n</code> 可以是数字、关键词 (<code>even</code>, <code>odd</code>) 或公式 (<code>2n+1</code>)。计算基于所有子元素类型。</li><li><code>:nth-last-child(n)</code>: 类似 <code>:nth-child(n)</code>，但从最后一个子元素开始<strong>倒序</strong>计数。</li><li><code>:first-of-type</code>: 选择是其父元素中<strong>同类型</strong>兄弟元素中的<strong>第一个</strong>元素。</li><li><code>:last-of-type</code>: 选择是其父元素中<strong>同类型</strong>兄弟元素中的<strong>最后一个</strong>元素。</li><li><code>:nth-of-type(n)</code>: 选择是其父元素中<strong>同类型</strong>兄弟元素中的<strong>第 n 个</strong>元素。</li><li><code>:nth-last-of-type(n)</code>: 类似 <code>:nth-of-type(n)</code>，但从最后一个同类型元素开始<strong>倒序</strong>计数。</li><li><code>:only-child</code>: 选择是其父元素的<strong>唯一</strong>子元素的元素（没有兄弟元素）。</li><li><code>:only-of-type</code>: 选择是其父元素中<strong>唯一</strong>的该类型元素的元素（可能有其他类型的兄弟元素）。</li><li><code>:root</code>: 选择文档的根元素（在 HTML 中总是 <code>&lt;html&gt;</code>）。通常用于声明全局 CSS 变量。</li></ul></li><li><p><strong>表单状态伪类:</strong></p><ul><li><code>:checked</code>: 选择被选中的<strong>单选按钮 (<code>&lt;input type=&quot;radio&quot;&gt;</code>)</strong>、<strong>复选框 (<code>&lt;input type=&quot;checkbox&quot;&gt;</code>)</strong> 或 **下拉选项 (<code>&lt;option&gt;</code>) **。</li><li><code>:disabled</code>: 选择被禁用的表单元素（具有 <code>disabled</code> 属性）。</li><li><code>:enabled</code>: 选择未被禁用的表单元素（<code>disabled</code> 属性的反面）。</li><li><code>:required</code>: 选择设置了 <code>required</code> 属性的表单元素。</li><li><code>:optional</code>: 选择没有设置 <code>required</code> 属性的表单元素（<code>:required</code> 的反面）。</li><li><code>:valid</code>: 选择其内容<strong>通过验证</strong>的表单元素（根据 <code>type</code>, <code>pattern</code>, <code>required</code> 等属性）。</li><li><code>:invalid</code>: 选择其内容<strong>未通过验证</strong>的表单元素。</li><li><code>:in-range</code>: 选择值在指定 <code>min</code>/<code>max</code> 范围内的 <code>&lt;input type=&quot;number&quot;&gt;</code> 或 <code>&lt;input type=&quot;range&quot;&gt;</code>。</li><li><code>:out-of-range</code>: 选择值超出指定 <code>min</code>/<code>max</code> 范围的 <code>&lt;input type=&quot;number&quot;&gt;</code> 或 <code>&lt;input type=&quot;range&quot;&gt;</code>。</li><li><code>:read-only</code>: 选择设置了 <code>readonly</code> 属性的元素（用户不可编辑）。</li><li><code>:read-write</code>: 选择没有 <code>readonly</code> 属性（且不是 <code>disabled</code>）的元素（用户可编辑）。</li></ul></li><li><p><strong>语言伪类:</strong></p><ul><li><code>:lang(language-code)</code>: 选择设置了特定语言（通过 <code>lang=&quot;xx&quot;</code> 属性或 HTTP 头）的元素。比属性选择器 <code>[lang|=&quot;xx&quot;]</code> 更健壮。</li></ul></li><li><p><strong>逻辑组合伪类 (CSS Selectors Level 4):</strong></p><ul><li><code>:is()</code> / <code>:matches()</code> / <code>:any()</code>: 接受一个选择器列表作为参数，匹配列表中<strong>任意一个</strong>选择器能选中的元素。用于简化复杂选择器的分组。<code>(:any()</code> 是旧别名，<code>:matches()</code> 被弃用，推荐 <code>:is()</code>)。</li><li><code>:not()</code>: 接受一个<strong>简单选择器</strong>或<strong>选择器列表</strong>作为参数，匹配<strong>不符合</strong>该参数的元素。</li><li><code>:where()</code>: 功能类似 <code>:is()</code>，但<strong>其选择器的优先级总是 0</strong>。用于引入不影响优先级的选择器。</li></ul></li><li><p><strong>其他:</strong></p><ul><li><code>:target</code>: 当元素的 <code>id</code> 与当前 URL 的片段标识符（<code>#id</code>）匹配时触发。常用于页面内锚点导航的样式。</li><li><code>:empty</code>: 选择<strong>完全没有子元素</strong>（包括文本节点，甚至空格）的元素。</li><li><code>:link</code>: 选择<strong>未被访问过</strong>的链接 (<code>&lt;a&gt;</code> 带有 <code>href</code> 属性)。通常在 <code>:visited</code> 之前定义。</li></ul></li></ol><hr><h2 id="二、-伪元素-pseudo-elements" tabindex="-1">二、 伪元素 (Pseudo-Elements) <a class="header-anchor" href="#二、-伪元素-pseudo-elements" aria-label="Permalink to “二、 伪元素 (Pseudo-Elements)”">​</a></h2><p>伪元素以<strong>两个冒号 (<code>::</code>)</strong> 开头（CSS3 规范要求，但单冒号 <code>:</code> 在旧浏览器中通常仍有效，推荐使用 <code>::</code>）。它们用于样式化元素的特定部分或创建不在文档树中的内容。</p><h3 id="常见伪元素及其作用" tabindex="-1">常见伪元素及其作用 <a class="header-anchor" href="#常见伪元素及其作用" aria-label="Permalink to “常见伪元素及其作用”">​</a></h3><ol><li><strong><code>::before</code></strong>: 在<strong>选定元素的内容之前</strong>插入一个虚拟元素作为其第一个子元素。需要与 <code>content</code> 属性一起使用来生成内容（即使内容是空字符串 <code>content: &quot;&quot;;</code>，也常用于纯装饰）。</li><li><strong><code>::after</code></strong>: 在<strong>选定元素的内容之后</strong>插入一个虚拟元素作为其最后一个子元素。同样需要 <code>content</code> 属性。</li><li><strong><code>::first-letter</code></strong>: 选择<strong>块级元素</strong>（如 <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;div&gt;</code>）<strong>第一行</strong>的<strong>第一个字母</strong>（或首字符，如数字、标点、<code>::before</code> 生成的内容）。常用于实现首字下沉效果。</li><li><strong><code>::first-line</code></strong>: 选择<strong>块级元素</strong>的<strong>第一行</strong>文本。根据视口宽度动态变化。</li><li><strong><code>::selection</code></strong>: 选择用户<strong>用鼠标或其他指针设备高亮选中的</strong>文本部分。只能应用少数 CSS 属性（<code>color</code>, <code>background-color</code>, <code>text-shadow</code>, <code>cursor</code>, <code>caret-color</code>, <code>outline</code> 等）。</li><li><strong><code>::placeholder</code></strong>: 选择表单元素（如 <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>）的<strong>占位符文本</strong> (<code>placeholder</code> 属性中的文本)。可以改变其样式。</li><li><strong><code>::marker</code></strong>: 选择<strong>列表项</strong>（<code>&lt;li&gt;</code>）的<strong>标记框</strong>（通常是项目符号或数字）。可以改变列表标记的样式（颜色、内容、位置等）。</li><li><strong><code>::backdrop</code> (实验性)</strong>: 当元素以全屏模式（如 <code>dialog.showModal()</code> 或 <code>Element.requestFullscreen()</code>）显示时，创建覆盖在元素下方但位于其他页面内容之上的背景层。可用于设置模态框背后的灰色遮罩样式。</li></ol><hr><h2 id="总结表格" tabindex="-1">总结表格 <a class="header-anchor" href="#总结表格" aria-label="Permalink to “总结表格”">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">语法前缀</th><th style="text-align:left;">目的</th><th style="text-align:left;">触发/作用依据</th><th style="text-align:left;">常见示例</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>伪类</strong></td><td style="text-align:left;"><code>:</code></td><td style="text-align:left;">选择元素的<strong>特定状态</strong></td><td style="text-align:left;">用户交互、文档位置、表单状态、语言等</td><td style="text-align:left;"><code>:hover</code>, <code>:active</code>, <code>:focus</code>, <code>:first-child</code>, <code>:checked</code>, <code>:disabled</code>, <code>:target</code>, <code>:not()</code></td></tr><tr><td style="text-align:left;"><strong>伪元素</strong></td><td style="text-align:left;"><code>::</code></td><td style="text-align:left;">选择/创建元素的<strong>特定部分</strong>或<strong>内容</strong></td><td style="text-align:left;">元素内容的特定位置、需要生成虚拟内容</td><td style="text-align:left;"><code>::before</code>, <code>::after</code>, <code>::first-letter</code>, <code>::first-line</code>, <code>::selection</code>, <code>::placeholder</code></td></tr></tbody></table><p><strong>关键要点：</strong></p><ul><li><strong>伪类 = 状态 (<code>:</code>)</strong></li><li><strong>伪元素 = 部分/新内容 (<code>::</code>)</strong></li><li>伪类基于元素在<strong>特定时刻的条件</strong>（状态或位置）。</li><li>伪元素基于元素<strong>内容的结构</strong>或需要<strong>生成新的内容</strong>。</li><li>使用 <code>::</code> 来明确表示伪元素（现代最佳实践），但大多数浏览器对旧的单冒号 <code>:</code> 写法有良好兼容性。</li><li><code>::before</code> 和 <code>::after</code> <strong>必须</strong>与 <code>content</code> 属性一起使用才能生效（即使 <code>content: &quot;&quot;;</code>）。</li></ul><p>理解并熟练运用伪类和伪元素是编写高效、灵活、交互性强的 CSS 的关键技能。它们极大地扩展了 CSS 选择器的能力。</p><h2 id="examples" tabindex="-1">examples <a class="header-anchor" href="#examples" aria-label="Permalink to “examples”">​</a></h2><h3 id="表单样式控制" tabindex="-1">表单样式控制 <a class="header-anchor" href="#表单样式控制" aria-label="Permalink to “表单样式控制”">​</a></h3><p><img src="`+i+`" alt="" data-zoomable="true" loading="lazy"></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.form-block:focus-within</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    backgroudn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.label</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> span</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data-required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="首字母样式和选中样式" tabindex="-1">首字母样式和选中样式 <a class="header-anchor" href="#首字母样式和选中样式" aria-label="Permalink to “首字母样式和选中样式”">​</a></h3><p><img src="`+a+`" alt="" data-zoomable="true" loading="lazy"></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.content::first-letter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.content::selection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#fff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">underline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,27)])}var l=t(s,[[`render`,c]]);export{o as __pageData,l as default};